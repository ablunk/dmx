syntax(Model) "models/expressions.ecore" {
	Model:element(Model) -> FunctionList;
		
	FunctionList [1] -> Function:composite(functions) ";" FunctionList ;
	FunctionList -> ;
	
	Function:element(Function) -> "funktion" IDENTIFIER:composite(name) 
		"(" ParametersOpt ")" 
		"=" Expression:composite(body);
	
	ParametersOpt [1] -> ParameterList;
	ParametersOpt [0] -> ;				
	ParameterList [1] -> Parameter:composite(parameters) "," ParameterList;
	ParameterList [0] -> Parameter:composite(parameters);
	
	Parameter:element(Parameter) -> IDENTIFIER:composite(name);
	
	Expression -> Plus;
	Expression -> Minus;
	Expression -> Term;		
	
	Term -> Mul;
	Term -> Div;
	Term -> Factor;
	
	Factor -> FunctionCall;
	Factor -> ParameterAccess;
	Factor -> Number;
	Factor -> "(" Expression ")";
	
	Plus:element(Plus) -> Expression:composite(op1) "+" Term:composite(op2);
	Minus:element(Minus) -> Expression:composite(op1) "-" Term:composite(op2);
	Mul:element(Mul) -> Term:composite(op1) "*" Factor:composite(op2);
	Div:element(Div) -> Term:composite(op1) "/" Factor:composite(op2);
	Number:element(Number) -> INTEGER:composite(value);
	ParameterAccess:element(ParameterAccess) -> IDENTIFIER:reference(parameter);	
	FunctionCall:element(FunctionCall) -> IDENTIFIER:reference(function)
			"(" ArgumentsOpt ")"; 

	ArgumentsOpt [1] -> ArgumentList;
	ArgumentsOpt [0] -> ;				
	ArgumentList [1] -> Expression:composite(arguments) "," ArgumentList;
	ArgumentList [0] -> Expression:composite(arguments);
}