Model Dbl

This model description is not a real EMF artifact. It was generated by the
org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's
code generator can be extended.
This can be disabled with -vmargs -Dorg.eclipse.emf.examples.generator.validator=false.

Package dbl <http://www.informatik.hu-berlin.de/sam/dbl>

  Class Construct
    Reference expandExpr : ExpandExpr<<1..1>>

  Class ExtensibleElement -> NamedElement, Construct
    Attribute concreteSyntax : EString
    Attribute instanceOfExtensionDefinition : EBoolean<<1..1>>

  Class Model
    Reference imports : Import<<0..*>>
    Reference modules : Module<<0..*>>

  Class Import
    Attribute file : EString<<1..1>>
    Reference model : Model

  Class Module -> NamedElement, ConstructiveExtensionAtContentExtensionPoint, Construct
    Reference classes : Class<<0..*>>
    Reference extensions : Extension<<0..*>>
    Reference extensionSemantics : ExtensionSemantics<<0..*>>
    Reference functions : Function<<0..*>>
    Reference variables : Variable<<0..*>>

  Class Annotation -> NamedElement
    Reference items : AnnotationItem<<0..*>>

  Class AnnotationItem
    Attribute key : EString<<1..1>>
    Attribute value : EString<<1..1>>

  Class AnnotateableElement
    Reference annotations : Annotation<<0..*>>

  Class ConstructiveExtension -> ExtensibleElement

  Class ConstructiveExtensionAtContentExtensionPoint
    Reference contentExtensions : ConstructiveExtension<<0..*>>

  Class ModuleContentExtension -> ConstructiveExtension

  Class ClassContentExtension -> ConstructiveExtension

  Class Type
    Reference arrayDimensions : ArrayDimension<<0..*>>

  Class TypedElement
    Reference primitiveType : PrimitiveType
    Reference typeArrayDimensions : ArrayDimension<<0..*>>
    Reference classifierType : IdExpr

  Class ArrayDimension
    Reference size : Expression

  Class PrimitiveType -> Type

  Class VoidType -> PrimitiveType

  Class IntType -> PrimitiveType

  Class BoolType -> PrimitiveType

  Class DoubleType -> PrimitiveType

  Class StringType -> PrimitiveType

  Class Function -> NamedElement, TypedElement, LocalScope
    Reference parameters : Parameter<<0..*>>
    Attribute class : EBoolean<<1..1>>
    Attribute abstract : EBoolean<<1..1>>

  Class NativeBinding
    Attribute targetLanguage : EString<<1..1>>
    Attribute targetType : EString<<1..1>>

  Class SuperClassSpecification
    Reference class : Class<<1..1>>
    Reference constructorArguments : Expression<<0..*>>

  Class Class -> NamedElement, Type, ConstructiveExtensionAtContentExtensionPoint, Concept, Construct, AnnotateableElement
    Attribute active : EBoolean<<1..1>>
    Reference bindings : NativeBinding<<0..*>>
    Reference superClasses : SuperClassSpecification<<0..*>>
    Reference constructors : Constructor<<0..*>>
    Reference attributes : Variable<<0..*>>
    Reference methods : Function<<0..*>>
    Reference actionsBlock : LocalScope

  Class Constructor -> LocalScope
    Reference parameters : Parameter<<0..*>>
    Reference owningClass : Class<<1..1>>

  Class AbstractVariable -> NamedElement, TypedElement, AnnotateableElement

  Class Variable -> AbstractVariable, SimpleStatement
    Attribute control : EBoolean<<1..1>>
    Attribute class : EBoolean<<1..1>>
    Reference initialValue : Expression

  Class Parameter -> AbstractVariable

  Class NamedElement
    Attribute name : EString

  Class Statement -> ExtensibleElement, AnnotateableElement

  Class LoopStatement -> Statement

  Class SimpleStatement -> Statement

  Class Assignment -> SimpleStatement
    Reference variable : VariableAccess<<1..1>>
    Reference value : Expression<<1..1>>

  Class FunctionCall -> SimpleStatement
    Reference callIdExpr : IdExpr<<1..1>>

  Class Return -> SimpleStatement
    Reference value : Expression<<1..1>>

  Class WaitUntil -> SimpleStatement
    Reference condition : Expression<<1..1>>

  Class Terminate -> SimpleStatement

  Class Yield -> SimpleStatement

  Class Wait -> SimpleStatement

  Class Reactivate -> SimpleStatement
    Reference objectAccess : Expression<<1..1>>

  Class ActivateObject -> SimpleStatement
    Reference objectAccess : Expression<<1..1>>
    Attribute priority : EInt<<1..1>>

  Class Advance -> SimpleStatement
    Reference time : Expression<<1..1>>

  Class Print -> SimpleStatement
    Reference outputs : Expression<<0..*>>

  Class IfStatement -> Statement
    Reference condition : Expression<<1..1>>
    Reference trueCase : Statement<<1..1>>
    Reference falseCase : Statement

  Class LocalScope
    Reference statements : Statement<<0..*>>

  Class LocalScopeStatement -> SimpleStatement, LocalScope

  Class ForStatement -> LoopStatement, LocalScope
    Reference termination : Expression<<1..1>>
    Reference increment : Assignment<<1..1>>
    Reference body : Statement<<1..1>>

  Class WhileStatement -> LoopStatement
    Reference condition : Expression<<1..1>>
    Reference body : Statement<<1..1>>

  Class SwitchStatement -> SimpleStatement
    Reference variable : VariableAccess<<1..1>>
    Reference cases : SwitchCase<<0..*>>
    Reference defaultCase : SwitchCase

  Class SwitchCase
    Reference value : Expression<<1..1>>
    Reference body : Statement<<0..*>>

  Class BreakStatement -> SimpleStatement

  Class ContinueStatement -> SimpleStatement

  Class Expression -> TypedElement, ExtensibleElement

  Class L1Expr -> Expression

  Class L2Expr -> Expression

  Class L3Expr -> Expression

  Class L4Expr -> Expression

  Class L5Expr -> Expression

  Class L6Expr -> Expression

  Class L7Expr -> Expression

  Class L8Expr -> Expression

  Class L9Expr -> Expression

  Class BinaryOperator -> Expression
    Reference op1 : Expression<<1..1>>
    Reference op2 : Expression<<1..1>>

  Class UnaryOperator -> Expression
    Reference op : Expression<<1..1>>

  Class Or -> BinaryOperator, L8Expr

  Class And -> BinaryOperator, L7Expr

  Class NotEqual -> BinaryOperator, L6Expr

  Class Equal -> BinaryOperator, L6Expr

  Class Greater -> BinaryOperator, L5Expr

  Class GreaterEqual -> BinaryOperator, L5Expr

  Class Less -> BinaryOperator, L5Expr

  Class LessEqual -> BinaryOperator, L5Expr

  Class InstanceOf -> BinaryOperator, L5Expr

  Class Plus -> BinaryOperator, L4Expr

  Class Minus -> BinaryOperator, L4Expr

  Class Mul -> BinaryOperator, L3Expr

  Class Mod -> BinaryOperator, L3Expr

  Class Div -> BinaryOperator, L3Expr

  Class Neg -> UnaryOperator, L2Expr

  Class Not -> UnaryOperator, L2Expr

  Class Cast -> UnaryOperator, TypedElement, L2Expr

  Class CreateObject -> L1Expr, TypedElement

  Class NullLiteral -> L1Expr

  Class TimeLiteral -> L1Expr

  Class ActiveLiteral -> L1Expr

  Class StringLiteral -> L1Expr
    Attribute value : EString<<1..1>>

  Class IntLiteral -> L1Expr
    Attribute value : EInt<<1..1>>

  Class TrueLiteral -> L1Expr

  Class FalseLiteral -> L1Expr

  Class DoubleLiteral -> L1Expr
    Attribute value : EDouble<<1..1>>

  Class ExpandExpr -> Expression
    Reference expr : Expression<<1..1>>

  Class ParseExpr -> Expression
    Reference astPart : Construct<<1..1>>

  Class PredefinedId

  Class MeLiteral -> PredefinedId

  Class SuperLiteral -> PredefinedId

  Class MetaLiteral -> PredefinedId

  Class TypeLiteral -> PredefinedId

  Class SizeOfArray -> PredefinedId

  Class AnnotationLiteral -> PredefinedId, Annotation

  Class IdExpr -> L1Expr
    Reference parentIdExpr : IdExpr
    Reference referencedElement : NamedElement
    Reference predefinedId : PredefinedId
    Reference arrayIndex : Expression<<0..*>>
    Reference callPart : CallPart

  Class CallPart
    Reference callArguments : Expression<<0..*>>

  Class ElementAccess -> Expression
    Reference idExpr : IdExpr

  Class VariableAccess -> ElementAccess

  Class MetaAccess -> VariableAccess

  Class TypeAccess -> ElementAccess

  Class Extension -> Concept, ExtensibleElement
    Reference extensionPoint : Concept<<1..1>>
    Reference syntaxDefinition : SyntaxDefinition<<1..1>>

  Class ExtensionSemantics -> ExtensibleElement, LocalScope
    Reference syntaxDefinition : Extension<<1..1>>

  Class SyntaxDefinition -> ExtensibleElement
    Reference startSymbol : MetaSymbol<<1..1>>
    Reference symbols : MetaSymbol<<0..*>>

  Class SyntaxSymbolClassifier -> NamedElement, ExtensibleElement

  Class ComplexSymbol -> SyntaxSymbolClassifier

  Class Concept -> ComplexSymbol

  Class MetaSymbol -> NamedElement, ComplexSymbol
    Reference possibleSyntax : SyntaxExpression<<1..1>>

  Class SyntaxExpression

  Class L3SyntaxExpression -> SyntaxExpression

  Class L2SyntaxExpression -> SyntaxExpression

  Class SymbolSequence -> L2SyntaxExpression
    Reference sequence : SyntaxExpression<<0..*>>

  Class L1SyntaxExpression -> SyntaxExpression

  Class StructuralSymbolReference -> NamedElement, PlainSymbolReference
    Attribute list : EBoolean<<1..1>>
    Attribute /composite : EBoolean<<1..1>>
    Attribute localScopedReference : EBoolean<<1..1>>
    Attribute globalScopedReference : EBoolean<<1..1>>

  Class PlainSymbolReference -> L1SyntaxExpression
    Reference /classifier : SyntaxSymbolClassifier<<1..1>>
    Reference ownedClassifier : SyntaxSymbolClassifier
    Reference referencedClassifier : SyntaxSymbolClassifier

  Class ElementarySymbol -> SyntaxSymbolClassifier

  Class IdSymbol -> ElementarySymbol

  Class IntSymbol -> ElementarySymbol

  Class StringSymbol -> ElementarySymbol

  Class Keyword -> ElementarySymbol
    Attribute keyword : EString<<1..1>>

  Class MetaExpr -> Expression
    Reference expr : Expression<<1..1>>

  Class TargetStatement -> SimpleStatement
    Reference body : Statement<<1..1>>

  Class CreateIdStatement -> Variable

  Class ExpansionStatement -> SimpleStatement
    Attribute classContext : EBoolean<<1..1>>
    Attribute functionContext : EBoolean<<1..1>>
    Attribute variableContext : EBoolean<<1..1>>
    Reference differingContext : IdExpr
    Reference parts : ExpansionPart<<0..*>>
    Reference exprs : Expression<<0..*>>

  Class ExpansionPart

  Class ExpandTextPart -> ExpansionPart
    Attribute text : EString<<1..1>>

  Class ExpandVariablePart -> ExpansionPart
    Reference expr : Expression<<1..1>>

  Class ExpandExpression -> Expression
    Reference metaObject : Expression<<1..1>>

  Class ExpandStatement -> Statement
    Reference metaObject : Expression<<1..1>>
    Reference location : Expression

  Class CodeQuoteExpression -> Expression
    Reference quotedCode : QuotedCode<<1..1>>

  Class QuotedCode

  Class QuotedExpression -> QuotedCode
    Reference expression : Expression<<1..1>>

  Class QuotedStatements -> QuotedCode
    Reference statements : Statement<<0..*>>

  Class QuotedClassContent -> QuotedCode, Class

  Class QuotedModuleContent -> QuotedCode, Module

  Class Pattern -> NamedElement
    Attribute top : EBoolean<<1..1>>
    Reference context : Parameter<<1..1>>
    Reference body : Statement<<1..1>>

  Class TestStatement -> Statement
    Attribute value : EInt<<1..1>>
