syntax(Package) "models/Ecore.ecore" {
	Package:element(EPackage) -> 
		ws(indent) "package" ws(space) (IDENTIFIER:composite(name="unnamed") ws(space))?
		"{" ws(blockstart) 
			(PackageContents)*
		 ws(blockend) ws(indent) "}" ws(statement);
	
	PackageContents -> Package:composite(eSubpackages);
	PackageContents -> Class:composite(eClassifiers);
	PackageContents -> DataType:composite(eClassifiers);
	
	Class:element(EClass) ->
		ws(indent) 
		(AbstractSwitch:composite(abstract))? 
		(InterfaceSwitch:composite(interface))? 
		"class" ws(space) IDENTIFIER:composite(name="unnamed") ws(space)
		(SuperClasses ws(space))?
		"{" ws(blockstart) (ClassContents)*	
		 ws(blockend) ws(indent) "}" ws(statement);
		 
	AbstractSwitch:constant("true":EBoolean) -> "abstract"  ws(space);
	InterfaceSwitch:constant("true":EBoolean) -> "interface"  ws(space);	
	
	SuperClasses -> "extends" ws(space) ClassRef:reference(eSuperTypes)
		(ws(empty) "," ws(space) ClassRef:reference(eSuperTypes))*;
	ClassRef:element(EClass) -> IDENTIFIER:composite(name="unnamed");
		
	DataType:element(EDataType) ->
		ws(indent) "datatype" ws(space) IDENTIFIER:composite(name="unnamed") ws(empty) 
			 ("["INSTANCE_CLASS_NAME:composite(instanceTypeName)"]" ws(empty))? ";" ws(statement); 		 		
		
	ClassContents -> ws(indent) "attribute" ws(space) Attribute:composite(eStructuralFeatures);
	ClassContents -> ws(indent) "reference" ws(space) Reference:composite(eStructuralFeatures);
	ClassContents -> ws(indent) Operation:composite(eOperations);
	
	Attribute:element(EAttribute) -> IDENTIFIER:composite(name="unnamed") ws(empty) ":"
		ws(empty) TypeExpr 
			Multiplicity ws(statement);
			
	TypeExpr[1] -> TypeRef:reference(eType);
	TypeExpr[0] -> "<broken-ref>";

 	Reference:element(EReference) -> IDENTIFIER:composite(name="unnamed") ws(empty) ":"
		ws(empty) ClassRef:reference(eType) Multiplicity ws(statement); 			
						
	Operation:element(EOperation) -> IDENTIFIER:composite(name="unnamed") 
		"(" ( Parameter:composite(eParameters) ("," ws(space) Parameter:composite(eParameters))*)? ")" 
		":" OperationReturn ws(statement);
		
	OperationReturn -> TypeRef:reference(eType);
	OperationReturn -> "void";
	
	Parameter:element(EParameter) -> IDENTIFIER:composite(name="unnamed") ":" TypeRef:reference(eType) ws(empty) Multiplicity;			
	 	
	TypeRef:element(EClassifier) -> IDENTIFIER:composite(name="unnamed");
	
	Multiplicity -> ("[" INTEGER:composite(lowerBound) ":" UNLIMITED_INTEGER:composite(upperBound) "]")?;
}