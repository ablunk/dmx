syntax(Model) "resources/dbl.ecore" {

	Model:element(Model) -> (Import:composite(imports))* (Module:composite(modules))*;

	Import:element(Import) -> "#import" STRINGDEF:composite(file);

	Module:element(Module) -> "module" IDENTIFIER:composite(name) "{" (ModuleContent)* "}";
	
	ModuleContent -> Variable:composite(variables) ";";
	ModuleContent -> Procedure:composite(procedures);
	ModuleContent -> Classifier:composite(classifiers);
	ModuleContent -> ClassAugment:composite(classAugments);
	ModuleContent -> extensionDef:composite(extensionDefs);
	ModuleContent -> ModuleContentExtension:composite(extensions);
	
	Classifier:element(Clazz) -> ClazzWithPredefinedModifiers;
	
	ClazzWithPredefinedModifiers -> IsActiveClass:composite(active) ClazzWithExtendedModifiers;
	ClazzWithPredefinedModifiers -> ClazzWithExtendedModifiers;
	
	ClazzWithExtendedModifiers -> ClazzModifier:composite(modifierExtensions) ClazzWithExtendedModifiers;
	ClazzWithExtendedModifiers -> ClazzTail;
	
	ClazzModifier -> EmptyClazzModifier;
	EmptyClazzModifier:element(ExtensibleElement) -> "void743859743453";
	
	ClazzTail ->
		"class" ws(space) NamedElementName ws(empty)
			(Constructor:composite(constructor))?
			(ws(space) "extends" ws(space) SuperClass:composite(superClasses) ("," SuperClass:composite(superClasses) )*)? ws(space)
			"{"
				(ClassContent)*
			"}";
		
	SuperClass:element(SuperClassSpecification) -> ClassRef:reference(clazz)
					("(" Expression:composite(constructorArguments)	("," Expression:composite(constructorArguments))* ")")?;
	
	NamedElementName -> IDENTIFIER:composite(name) ;
		
	Constructor:element(Constructor) -> "(" (Parameter:composite(parameters) ("," Parameter:composite(parameters))*)? ")";
	
	IsActiveClass:constant("true":EBoolean) -> "active";

	ClassContent ->	Variable:composite(attributes) ";";
	ClassContent ->	BindingsPart;
	ClassContent ->	InitialPart;
	ClassContent ->	FinalPart;
	ClassContent ->	ActionsPart;
	ClassContent ->	ReportPart;
	ClassContent ->	ClearPart;
	ClassContent -> Procedure:composite(methods);
	ClassContent -> ClassContentExtension:composite(extensions);
	
	InitialPart -> "initial" ClassPart:composite(initialBlock);
	FinalPart -> "final" ClassPart:composite(finalBlock);
	ActionsPart -> "actions" ClassPart:composite(actionsBlock);
	ReportPart -> "report" ClassPart:composite(reportBlock);
	ClearPart -> "clear" ClassPart:composite(clearBlock);
	
	ClassPart:element(ClassPart) -> "{" (Statement:composite(statements))* "}";
	
	BindingsPart -> "bindings" "{" NativeBinding:composite(bindings) ("," NativeBinding:composite(bindings))* "}";
	NativeBinding:element(NativeBinding) -> STRINGDEF:composite(targetLanguage) "->" STRINGDEF:composite(targetType);
	
	ModuleContentExtension -> EmptyExtension;
	ClassContentExtension -> EmptyExtension;
	EmptyExtension:element(ExtensibleElement) -> "void743859743451";
	
	ClassAugment:element(ClassAugment) -> "augment" ClassRef:reference(augmentedClass)
		ws(space) "{"
			(ClassContent)*
		"}";
	
	Procedure:element(Procedure) -> TypedElementParts NamedElementName
		"(" (Parameter:composite(parameters) ("," Parameter:composite(parameters))*)? ")"
		(ClassElement:composite(clazz))?
		ProcedureBody;
	ProcedureBody -> AbstractProcedure:composite(abstract) ";";
	ProcedureBody -> "{" (Statement:composite(statements))* "}";
	
	AbstractProcedure:constant("true":EBoolean) -> "abstract";

	Parameter:element(Parameter) -> TypedElementParts ws(space) IDENTIFIER:composite(name);

	Variable:element(Variable) -> Variable1;
	
	Variable1 -> ClassElement:composite(clazz) Variable2 ;
	Variable1 -> Variable2;

	Variable2 -> ControlVariable:composite(control) Variable3;
	Variable2 -> Variable3;
	
	Variable3 -> VariableModifier:composite(modifierExtensions) Variable3;
	Variable3 -> VariableTail;
		
	VariableModifier -> EmptyVariableModifier;
	EmptyVariableModifier:element(ExtensibleElement) -> "void743859743452";
		
	VariableTail -> TypedElementParts ws(space) IDENTIFIER:composite(name) ws(space)
		("=" Expression:composite(initialValue))? ;

	ControlVariable:constant("true":EBoolean) -> "control";
	ClassElement:constant("true":EBoolean) -> "static";
	
	TypedElementParts -> IdExpr:composite(classifierType) (ArrayDimensions)?;
	TypedElementParts -> PrimitiveType:composite(primitiveType) (ArrayDimensions)?;

	ArrayDimensions -> "array" (ArrayDimensionEmptyOptional:composite(typeArrayDimensions))*;

//	Type -> BareIdExpr:composite(classifierType);
//	Type -> PrimitiveType:composite(primitiveType);

	//ArrayDimension:element(ArrayDimension) -> "[" Expression:composite(size) "]";
	//ArrayDimensionEmpty:element(ArrayDimension) -> "[" "]";
	ArrayDimensionEmptyOptional:element(ArrayDimension) -> "[" (Expression:composite(size))? "]";
	
	ClassRef:element(Clazz) -> IDENTIFIER:composite(name);
	//ClassifierRef:element(Classifier) -> IDENTIFIER:composite(name);

	PrimitiveType:element(VoidType) -> "void";
	PrimitiveType:element(IntType) -> "int";
	PrimitiveType:element(BoolType) -> "boolean";
	PrimitiveType:element(DoubleType) -> "double";	
	PrimitiveType:element(StringType) -> "string";
	
	// test
	//Statement -> Unless2_extension;
	//Unless2_extension:element(Unless2) -> "unless2" "(" Expression:composite(condition) ")" CodeBlock:composite(codeBlock);

	SimpleStatement -> ProcedureCall ";";
	SimpleStatement -> Assignment ";";
	SimpleStatement -> Variable ";";
	SimpleStatement -> Return ";";
	SimpleStatement -> Print ";";
	SimpleStatement -> BreakStatement ";";
	SimpleStatement -> ContinueStatement ";";
	SimpleStatement -> LocalScopeStatement;
	SimpleStatement -> SwitchStatement;

	SimpleStatement -> Advance ";";
	SimpleStatement -> Terminate ";";
	SimpleStatement -> Yield ";";
	SimpleStatement -> Wait ";";
	SimpleStatement -> Reactivate ";";
	SimpleStatement -> ActivateObject ";";
	SimpleStatement -> WaitUntil ";";

	LocalScopeStatement:element(LocalScopeStatement) -> "{" (Statement:composite(statements))* "}";

	Assignment:element(Assignment) -> VariableAccess:composite(variable) "=" Expression:composite(value);
	Return:element(Return) -> "return" Expression:composite(value);
	Print:element(Print) -> "print" Expression:composite(outputs) ("," Expression:composite(outputs))*;
	BreakStatement:element(BreakStatement) -> "break";
	ContinueStatement:element(ContinueStatement) -> "continue";

	Advance:element(Advance) -> "advance" Expression:composite(time);
	Terminate:element(Terminate) -> "terminate";
	Yield:element(Yield) -> "yield";
	Wait:element(Wait) -> "wait";
	Reactivate:element(Reactivate) -> "reactivate" Expression:composite(objectAccess);
	ActivateObject:element(ActivateObject) -> "activate" Expression:composite(objectAccess) ("priority" INTEGER:composite(priority))?;
	WaitUntil:element(WaitUntil) -> "wait" "until" Expression:composite(condition);
	
	// the following rules solve the dangling-else ambiguity.
	// an "open statement" contains at least one if which is not paired with a following else.
	// a "closed statement" either does not contain an if at all or the if is paired with a following else.
	// see http://www.parsifalsoft.com/ifelse.html
	Statement -> Statement_open;
	Statement -> Statement_closed;
	
	Loop_open -> While_open;
	Loop_open -> For_open;
	Loop_closed -> While_closed;
	Loop_closed -> For_closed;
	
	Statement_open -> If_open;
	Statement_open -> If_closed_open;
	Statement_open -> Loop_open;
	
	Statement_closed -> SimpleStatement;
	Statement_closed -> If_closed_closed;
	Statement_closed -> Loop_closed;

	If_open:element(IfStatement) -> IfHeader Statement:composite(trueCase);
	IfHeader -> "if" "(" Expression:composite(condition) ")";
	
	If_closed_open:element(IfStatement) -> IfHeader Statement_closed:composite(trueCase)
		"else" Statement_open:composite(falseCase);

	If_closed_closed:element(IfStatement) -> IfHeader Statement_closed:composite(trueCase)
		"else" Statement_closed:composite(falseCase);
	
	SwitchStatement:element(SwitchStatement) -> "switch" "(" VariableAccess:composite(variable) ")"
		"{"
			(SwitchCase:composite(cases))*
			(DefaultSwitchCase:composite(defaultCase))?
		"}";
	
	SwitchCase:element(SwitchCase) -> "case" Expression:composite(value) ":"
		(Statement:composite(body))*;
		
	DefaultSwitchCase:element(SwitchCase) -> "default" ":"
		(Statement:composite(body))*;

	While_open:element(WhileStatement) -> WhileHead Statement_open:composite(body);
	While_closed:element(WhileStatement) -> WhileHead Statement_closed:composite(body);
	WhileHead -> "while" "(" Expression:composite(condition) ")";

	For_open:element(ForStatement) -> ForHead Statement_open:composite(body);
	For_closed:element(ForStatement) -> ForHead Statement_closed:composite(body);
	ForHead -> "for" "("
			(VariableDefOrReference)? ";"
			Expression:composite(termination) ";"
			Assignment:composite(increment)
		")";
		
	//VariableDefOrReference -> Variable:composite(countVariableDefinition);
	//VariableDefOrReference -> Assignment:composite(countVariableReference);
	VariableDefOrReference -> Variable:composite(statements);
	VariableDefOrReference -> Assignment:composite(statements);

	Expression -> L9Expr;
	
	L9Expr -> LogicalOr;
	
	LogicalOr -> L8Expr;
	L8Expr -> Or;
	L8Expr -> LogicalAnd;

	LogicalAnd -> L7Expr;
	L7Expr -> And;
	L7Expr -> Equality;
	
	Equality -> L6Expr;
	L6Expr -> Equal;
	L6Expr -> NotEqual;
	L6Expr -> Relational;

	Relational -> L5Expr;
	L5Expr -> Greater;
	L5Expr -> GreaterEqual;
	L5Expr -> Less;
	L5Expr -> LessEqual;
	L5Expr -> InstanceOf;
	L5Expr -> Additive;
	
	Additive -> L4Expr;
	L4Expr -> Plus;
	L4Expr -> Minus;
	L4Expr -> Multiplicative;
	
	Multiplicative -> L3Expr;
	L3Expr -> Mul;
	L3Expr -> Div;
	L3Expr -> Mod;
	L3Expr -> Unary;
	
	Unary -> L2Expr;
	L2Expr -> Neg;
	L2Expr -> Not;
	L2Expr -> Cast;
	L2Expr -> Factor;
	
	Factor -> L1Expr;
	L1Expr -> IdExpr;
	L1Expr -> IntLiteral;
	L1Expr -> StringLiteral;
	L1Expr -> TrueLiteral;
	L1Expr -> FalseLiteral;
	L1Expr -> DoubleLiteral;
	L1Expr -> NullLiteral;
	L1Expr -> CreateObject;
	L1Expr -> TimeLiteral;
	L1Expr -> ActiveLiteral;
	L1Expr -> "(" ws(empty) Expression ws(empty) ")";
	
	Or:element(Or)   -> LogicalOr:composite(op1) ws(space) "or" ws(space) LogicalAnd:composite(op2);
	And:element(And)   -> LogicalAnd:composite(op1) ws(space) "and" ws(space) Equality:composite(op2);
	
	Equal:element(Equal)   -> Equality:composite(op1) ws(space) "==" ws(space) Relational:composite(op2);
	NotEqual:element(NotEqual)   -> Equality:composite(op1) ws(space) "!=" ws(space) Relational:composite(op2);

	Greater:element(Greater)   -> Relational:composite(op1) ws(space) ">" ws(space) Additive:composite(op2);
	GreaterEqual:element(GreaterEqual)   -> Relational:composite(op1) ws(space) ">=" ws(space) Additive:composite(op2);
	Less:element(Less)   -> Relational:composite(op1) ws(space) "<" ws(space) Additive:composite(op2);
	LessEqual:element(LessEqual)   -> Relational:composite(op1) ws(space) "<=" ws(space) Additive:composite(op2);
	InstanceOf:element(InstanceOf) -> Relational:composite(op1) ws(space) "instanceof" ws(space) TypeAccess:composite(op2);
	
	Plus:element(Plus)   -> Additive:composite(op1) ws(space) "+" ws(space) Multiplicative:composite(op2);
	Minus:element(Minus) -> Additive:composite(op1) ws(space) "-" ws(space) Multiplicative:composite(op2);
	
	Mul:element(Mul)     -> Multiplicative:composite(op1) ws(space) "*" ws(space) Unary:composite(op2);
	Div:element(Div)     -> Multiplicative:composite(op1) ws(space) "/" ws(space) Unary:composite(op2);
	Mod:element(Mod)     -> Multiplicative:composite(op1) ws(space) "%" ws(space) Unary:composite(op2);
	
	Neg:element(Neg)     -> "-" ws(space) Unary:composite(op);
	Not:element(Not)     -> "!" ws(space) Unary:composite(op);
	Cast:element(Cast) -> Factor:composite(op) ws(space) "as" ws(space) TypedElementParts;

	IntLiteral:element(IntLiteral) -> INTEGER:composite(value);
	StringLiteral:element(StringLiteral) -> STRINGDEF:composite(value);
	TrueLiteral:element(TrueLiteral) -> "true";
	FalseLiteral:element(FalseLiteral) -> "false";
	DoubleLiteral:element(DoubleLiteral) -> FLOAT:composite(value); // TODO
	NullLiteral:element(NullLiteral) -> "null";
	TimeLiteral:element(TimeLiteral) -> "time";
	ActiveLiteral:element(ActiveLiteral) -> "active";
	
	//CreateObject:element(CreateObject) -> "new" ws(space) TypeRule
	//	("(" Expression:composite(arguments) ("," Expression:composite(arguments))* ")")?;
	CreateObject:element(CreateObject) -> "new" ws(space) TypedElementParts;
//		("(" ArgumentExpression:composite(arguments) ")")?;

	//CreateObjectType -> IdExpr:composite(classifierTypeExpr) (ArrayDimension:composite(arrayDimensions))*;
	//CreateObjectType -> PrimitiveType:composite(primitiveType) (ArrayDimension:composite(arrayDimensions))*;	
		
	//IdExpr:element(IdExpr) -> IdExpr:composite(parentIdExpr) "." SimpleIdExpr;
	//IdExpr:element(IdExpr) -> SimpleIdExpr;

	IdExpr:element(IdExpr) -> IdExpr:composite(parentIdExpr) "." SimpleIdExpr;
	IdExpr:element(IdExpr) -> SimpleIdExpr;

//	UnqualifiedIdExpr:element(IdExpr) -> BareSimpleIdExpr;
//	BareSimpleIdExpr -> NamedElementRef:reference(referencedElement);
	
	SimpleIdExpr -> NamedElementRef:reference(referencedElement) (IdExprArgs)? (IdExprIndexAt)*;
	SimpleIdExpr -> PredefinedId:composite(predefinedId) (IdExprArgs)? (IdExprIndexAt)*;

	IdExprArgs -> "(" CallPart:composite(callPart) ")";
	CallPart:element(CallPart) -> (Expression:composite(callArguments) ("," Expression:composite(callArguments))* )?;
	
	IdExprIndexAt -> "[" Expression:composite(arrayIndex) "]";
	
	VariableAccess:element(VariableAccess) -> IdExpr:composite(idExpr);
	
	TypeAccess:element(TypeAccess) -> IdExpr:composite(idExpr);
		
	// it is difficult to distinguish a procedure call syntactically from a variable access.
	// therefore, variable access should be disallowed by a constraint.
	ProcedureCall:element(ProcedureCall) -> IdExpr:composite(callIdExpr);
	
	PredefinedId:element(MeLiteral) -> "self";
	PredefinedId:element(SuperLiteral) -> "super";
	PredefinedId:element(MetaLiteral) -> "meta";
	PredefinedId:element(TypeLiteral) -> "type";
	//PredefinedId:element(SizeOfArray) -> "size";
	
	NamedElementRef:element(NamedElement) -> IDENTIFIER:composite(name);
	
	// EXTENSIONS
	
	extensionDef:element(ExtensionDefinition) -> "extension" IDENTIFIER:composite(name)
		"extends" ExtendedConstruct
		TextualSyntaxDef:composite(textualSyntaxDef)
		("semantics" "{" Mapping:composite(mappingDef) "}")?;
	
	TextualSyntaxDef:element(TextualSyntaxDef) -> ("textual")? "{"
		"start" TsRuleRef:reference(startRule) ";" (TsRule:composite(rules))* "}";
	
	ExtendedConstruct -> ExtendedDblConcept;
	ExtendedConstruct -> ExtendedExtension;
	
	ExtendedDblConcept -> "dbl" ClassRef:reference(extendedConcept);
	ExtendedExtension -> "extension" ExtensionDefinitionRef:reference(extendedConcept);
	
	ExtensionDefinitionRef:element(ExtensionDefinition) -> IDENTIFIER:composite(name);
	
	TsRule:element(TsRule) -> IDENTIFIER:composite(name) "->" RhsExpression:composite(rhs) ";";
	
	// EXTENSION MAPPING
	
	Mapping:element(Mapping) -> (Statement:composite(statements))*;
	//Mapping:element(Mapping) -> Expression:composite(metaObject);
	
	SimpleStatement -> MappingStatement ";";
	SimpleStatement -> SetGenContextStatement ";";
	SimpleStatement -> ResetGenContextStatement ";";
	SimpleStatement -> SaveGenStatement ";";
	SimpleStatement -> ResumeGenStatement ";";
	
//	MappingStatement:element(MappingStatement) -> "expand" FixedMappingPartMiddle:composite(parts)
//		(ws(space) DynamicMappingPart:composite(parts) ws(space) FixedMappingPartMiddle:composite(parts))*;
	
	MappingStatement:element(MappingStatement) -> "expand" MappingPart:composite(parts)
		(ws(space) MappingPart:composite(parts))*;
	
	MappingPart -> FixedMappingPartMiddle;
	MappingPart -> DynamicMappingPart;

	FixedMappingPartMiddle:element(FixedMappingPart) -> CODE:composite(code);
	FixedMappingPartMiddle:element(FixedMappingPart) -> STRINGDEF:composite(code);
	DynamicMappingPart:element(DynamicMappingPart) -> IdExpr:composite(expr);
	
	SetGenContextStatement:element(SetGenContextStatement) -> "setExpansionContext" AddBeforeOrAfterContext;
	AddBeforeOrAfterContext -> IsAddBeforeOrAfter:composite(addAfterContext) Expression:composite(context);
	IsAddBeforeOrAfter:constant("true":EBoolean) -> "after";
	IsAddBeforeOrAfter:constant("false":EBoolean) -> "before";
	ResetGenContextStatement:element(ResetGenContextStatement) -> "resetExpansionContext";
	SaveGenStatement:element(SaveGenStatement) -> "saveGen" Expression:composite(variable);
	ResumeGenStatement:element(ResumeGenStatement) -> "resumeGen" Expression:composite(variable);
		
//	ExpandExpression:element(ExpandExpression) -> "?" "(" Expression:composite(metaObject) ")";
//	CodeQuote:element(CodeQuoteExpression) -> "{" "#" QuotedCode:composite(quotedCode) "}";
	
//	ExpandStatement:element(ExpandStatement) -> "expand" Expression:composite(metaObject) ("after" Expression:composite(location))?;
	//ExpandStatement:element(ExpandStatement) -> "expand" Expression:composite(metaObject);
//	ExpandStatement:element(ExpandStatement) -> "{" "=" ">" Expression:composite(metaObject) "}";
	
//	QuotedCode:element(QuotedExpression) -> "E" ":" Expression:composite(expression);
//	QuotedCode:element(QuotedStatements) -> "S" ":" (Statement:composite(statements))*;
//	QuotedCode:element(QuotedClassContent) -> "CC" ":" (ClassContent)*;
//	QuotedCode:element(QuotedModuleContent) -> "MC" ":" (ModuleContent)*;

//	ExpandSection:element(ExpandSection) -> ExpandSectionCodeBlock:composite(codeBlock);
//	ExpandSectionCodeBlock:element(CodeBlock) -> "{" "+" (Statement:composite(statements))* "}";	

	// EXTENSION SYNTAX
	
	//RhsExpression -> AlternativeExpr;
	RhsExpression -> Sequence;
	
	Sequence -> SequenceExpr;
	
	Terminal -> TerminalExpr;
	Terminal -> "(" RhsExpression ")";
	//Terminal -> "(" OptionalExpr ")?";
	//Terminal -> "(" AtLeastOneExpr ")+";
	//Terminal -> "(" ArbitraryExpr ")*";
	Terminal -> PropertyBindingExpr;
	Terminal -> RhsClassifierExpr;
		
	//OptionalExpr:element(OptionalExpr) -> RhsExpression:composite(expression);
	//AtLeastOneExpr:element(AtLeastOneExpr) -> RhsExpression:composite(expression);
	//ArbitraryExpr:element(ArbitraryExpr) -> RhsExpression:composite(expression);
	
	//AlternativeExpr:element(AlternativeExpr) -> RhsExpression:composite(left) "|" Sequence:composite(right);
	SequenceExpr:element(SequenceExpr) -> (Terminal:composite(sequence))*;
	TerminalExpr:element(TerminalExpr) -> STRINGDEF:composite(terminal);
	PropertyBindingExpr:element(PropertyBindingExpr) -> IDENTIFIER:composite(name) ":" PropertyType:composite(propertyType);
	
	RhsClassifierExpr:element(RhsClassifierExpr) -> LanguageConstructClassifierRef:reference(classifier);
	
	//BindingExprOperator:constant("ASSIGN":BindingExprOpKind) -> "=";
	//BindingExprOperator:constant("ADD":BindingExprOpKind) -> "+=";
	//BindingExprOperator:constant("BOOL":BindingExprOpKind) -> "?=";
	
	PropertyType -> IdPropertyType;
	PropertyType -> IntPropertyType;
	PropertyType -> StringPropertyType;
	PropertyType -> BooleanPropertyType;
	PropertyType -> CompositeOrReferencePropertyType;
	
	CompositeOrReferencePropertyType[0] -> ReferencePropertyType;
	CompositeOrReferencePropertyType[1] -> CompositePropertyType;
	
	IdPropertyType:element(IdPropertyType) -> "ID";
	IntPropertyType:element(IntPropertyType) -> "INT";
	StringPropertyType:element(StringPropertyType) -> "STRING";
	BooleanPropertyType:element(BooleanPropertyType) -> STRINGDEF:composite(terminal);

	// raw -> variable=$$Variable	
	ReferencePropertyType:element(ReferencePropertyType) -> "$" (IsRawReference:composite(rawReference))? LanguageConstructClassifierRef:reference(type);
	CompositePropertyType:element(CompositePropertyType) -> IsListType:composite(list) "(" LanguageConstructClassifierRef:reference(type) ")";
	CompositePropertyType:element(CompositePropertyType) -> LanguageConstructClassifierRef:reference(type);

	IsListType:constant("true":EBoolean) -> "list";
	IsRawReference:constant("true":EBoolean) -> "$";
	
	LanguageConstructClassifierRef:element(LanguageConstructClassifier) -> IDENTIFIER:composite(name);
	TsRuleRef:element(TsRule) -> IDENTIFIER:composite(name);

	Statement -> Test7349549;
	Test7349549:element(TestStatement) -> "Test7349549" INTEGER:composite(value) ";";
	// the above is needed for extensions defining variables of type INT, dont know why just leave it here ...
	
	token () {
		"`cstylecomment`";
	}

}