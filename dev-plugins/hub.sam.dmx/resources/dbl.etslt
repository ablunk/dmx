syntax(Model) "resources/dbl.ecore" {

	Model:element(Model) -> (Import:composite(imports))* Module:composite(module);

	Static:constant("true":EBoolean) -> "static";

	Import:element(Import) -> "#import" STRINGDEF:composite(file);
	Module:element(Module) -> "module" IDENTIFIER:composite(name) ";" (ModuleElement)*;
	
	ModuleElement -> Variable:composite(variables) ";";
	ModuleElement -> Function:composite(functions);
	ModuleElement -> Class:composite(classes);
	ModuleElement -> Extension:composite(extensions);
	ModuleElement -> ExtensionSemantics:composite(extensionSemantics);
	ModuleElement -> ModuleContentExtension:composite(contentExtensions);
	ModuleContentExtension:element(ModuleContentExtension) -> "moduleContent39758";
	
	Class -> ClassOrSpecial;
	ClassRef:element(Class) -> IDENTIFIER:composite(name);
	
	ClassOrSpecial[1] -> ActiveClass;
	ClassOrSpecial[0] -> PassiveClass;
	
	ActiveClass -> ActiveClassBound;
	PassiveClass -> PassiveClassBound;
	
	PassiveClassBound:element(Class) -> ClassDefinition PassiveClassBody;
	ActiveClassBound:element(ActiveClass) -> "active" ClassDefinition ActiveClassBody;
		
	ClassDefinition -> "class" ws(space) NamedElementName ws(empty)
			(ws(space) "extends" ws(space) ClassRef:reference(superClasses) ("," ClassRef:reference(superClasses))*)? ws(space)
			(Annotations)?;
		
	PassiveClassBody -> "{" (ClassElement)* "}";
	ActiveClassBody -> "{" (ActiveClassElement)* "}";
	
	ActiveClassElement -> ClassElement;
	ActiveClassElement -> ActionsPart;

	NamedElementName -> IDENTIFIER:composite(name);
	NamedElementName -> ExpandExpr:composite(expandExpr);
		
	Constructor:element(Constructor) -> "new" "(" (Parameter:composite(parameters) ("," Parameter:composite(parameters))*)? ")"
		(":" SuperObjectInitializer:composite(initializers) ("," SuperObjectInitializer:composite(initializers))*)?
		"{" (Statement:composite(statements))* "}";

	SuperObjectInitializer:element(SuperObjectInitializer) -> ClassRef:reference(class)
		"(" (Expression:composite(arguments) ("," Expression:composite(arguments))*)? ")";
	
	ClassElement ->	Variable:composite(attributes) ";";
	ClassElement -> Constructor:composite(constructors);
	ClassElement ->	BindingsPart;
	ClassElement -> Function:composite(methods);
	ClassElement -> ClassContent:composite(contentExtensions);
	ClassContent -> ClassContentExtension;
	ClassContentExtension:element(ClassContentExtension) -> "classContent39758";
	
	ActionsPart -> "actions" LocalScope:composite(actionsBlock);
	LocalScope:element(LocalScope) -> "{" (Statement:composite(statements))* "}";
	
	BindingsPart -> "bindings" "{" NativeBinding:composite(bindings) ("," NativeBinding:composite(bindings))* "}";
	NativeBinding:element(NativeBinding) -> STRINGDEF:composite(targetLanguage) "->" STRINGDEF:composite(targetType);
	
	Function -> BoundFunction;
	BoundFunction:element(Function) -> BoundFunctionModifierPriority;
	
	//BoundFunctionModifierPriority[1] -> FunctionAbstract;
	BoundFunctionModifierPriority[1] -> FunctionStatic;
	BoundFunctionModifierPriority[0] -> FunctionAfterModifiers;
	
	//FunctionAbstract -> Abstract:composite(abstract) FunctionAfterModifiers;
	//FunctionAbstract -> Abstract:composite(abstract) FunctionStatic;
	FunctionStatic -> Static:composite(class) FunctionAfterModifiers;
	
	FunctionAfterModifiers -> TypedElementParts NamedElementName
		"(" (Parameter:composite(parameters) ("," Parameter:composite(parameters))*)? ")"
		FunctionBody;
	FunctionBody -> "{" (Statement:composite(statements))* "}";
	FunctionBody -> ";";

	Parameter:element(Parameter) -> TypedElementParts ws(space) IDENTIFIER:composite(name);

	Variable -> VariableOrSpecial;
	
	VariableOrSpecial[1] -> ControlVariable;
	VariableOrSpecial[0] -> BasicVariable;

	ControlVariable:element(ControlVariable) -> "control" StaticOrNonStaticVariable;
	BasicVariable:element(Variable) -> StaticOrNonStaticVariable;
	
	StaticOrNonStaticVariable -> Static:composite(class) VariableTail;
	StaticOrNonStaticVariable -> VariableTail;
		
	VariableTail -> TypedElementParts ws(space) IDENTIFIER:composite(name) ws(space)
		("=" Expression:composite(initialValue))? (Annotations)?;
	
	TypedElementParts -> IdExpr:composite(classifierType) (ArrayDimensionsEmptySizePart)?;
	TypedElementParts -> PrimitiveType:composite(primitiveType) (ArrayDimensionsEmptySizePart)?;

	ArrayDimensionsEmptySizePart -> "array" (ArrayDimensionsEmptySize:composite(typeArrayDimensions))+;
	ArrayDimensionsEmptySize:element(ArrayDimension) -> "[" "]";

	PrimitiveType:element(VoidType) -> "void";
	PrimitiveType:element(IntType) -> "int";
	PrimitiveType:element(BoolType) -> "boolean";
	PrimitiveType:element(DoubleType) -> "double";	
	PrimitiveType:element(StringType) -> "string";
	
	SimpleStatement -> FunctionCall ";";
	SimpleStatement -> Assignment ";";
	SimpleStatement -> Variable ";";
	SimpleStatement -> Return ";";
	SimpleStatement -> Print ";";
	SimpleStatement -> BreakStatement ";";
	SimpleStatement -> ContinueStatement ";";
	SimpleStatement -> LocalScopeStatement;
	SimpleStatement -> SwitchStatement;

	SimpleStatement -> Advance ";";
	SimpleStatement -> Yield ";";
	SimpleStatement -> YieldTo ";";
	SimpleStatement -> Wait ";";
	SimpleStatement -> Reactivate ";";
	SimpleStatement -> ActivateObject ";";
	SimpleStatement -> WaitUntil ";";

	LocalScopeStatement:element(LocalScopeStatement) -> "{" (Statement:composite(statements))* "}";

	Assignment:element(Assignment) -> VariableAccess:composite(variable) "=" Expression:composite(value) (Annotations)?;
	Return:element(Return) -> "return" Expression:composite(value);
	Print:element(Print) -> "print" Expression:composite(outputs) ("," Expression:composite(outputs))*;
	BreakStatement:element(BreakStatement) -> "break";
	ContinueStatement:element(ContinueStatement) -> "continue";

	Advance:element(Advance) -> "advance" Expression:composite(time);
	Yield:element(Yield) -> "yield";
	YieldTo:element(Reactivate) -> "yield" "to" Expression:composite(objectAccess);
	Wait:element(Wait) -> "wait";
	Reactivate:element(Reactivate) -> "reactivate" Expression:composite(objectAccess);
	ActivateObject:element(ActivateObject) -> "activate" Expression:composite(objectAccess) ("priority" INTEGER:composite(priority))?;
	WaitUntil:element(WaitUntil) -> "wait" "until" Expression:composite(condition);
	
	Annotations -> Annotation:composite(annotations) ("," Annotation:composite(annotations))*;
	Annotation:element(Annotation) -> "@" IDENTIFIER:composite(name)
		"(" (AnnotationItem:composite(items))? ("," AnnotationItem:composite(items))* ")";
	
	AnnotationItem:element(AnnotationItem) -> IDENTIFIER:composite(key) "=" STRINGDEF:composite(value);

	// the following rules solve the dangling-else ambiguity.
	// an "open statement" contains at least one if which is not paired with a following else.
	// a "closed statement" either does not contain an if at all or the if is paired with a following else.
	// see http://www.parsifalsoft.com/ifelse.html
	Statement -> Statement_open;
	Statement -> Statement_closed;	

	Loop_open -> While_open;
	Loop_open -> For_open;
	Loop_closed -> While_closed;
	Loop_closed -> For_closed;
	
	Statement_open -> If_open;
	Statement_open -> If_closed_open;
	Statement_open -> Loop_open;
	
	Statement_closed -> SimpleStatement;
	Statement_closed -> If_closed_closed;
	Statement_closed -> Loop_closed;

	If_open:element(IfStatement) -> IfHeader Statement:composite(trueCase);
	IfHeader -> "if" "(" Expression:composite(condition) ")";
	
	If_closed_open:element(IfStatement) -> IfHeader Statement_closed:composite(trueCase)
		"else" Statement_open:composite(falseCase);

	If_closed_closed:element(IfStatement) -> IfHeader Statement_closed:composite(trueCase)
		"else" Statement_closed:composite(falseCase);
	
	SwitchStatement:element(SwitchStatement) -> "switch" "(" VariableAccess:composite(variable) ")"
		"{"
			(SwitchCase:composite(cases))*
			(DefaultSwitchCase:composite(defaultCase))?
		"}";
	
	SwitchCase:element(SwitchCase) -> "case" Expression:composite(value) ":"
		(Statement:composite(body))*;
		
	DefaultSwitchCase:element(SwitchCase) -> "default" ":"
		(Statement:composite(body))*;

	While_open:element(WhileStatement) -> WhileHead Statement_open:composite(body);
	While_closed:element(WhileStatement) -> WhileHead Statement_closed:composite(body);
	WhileHead -> "while" "(" Expression:composite(condition) ")";

	For_open:element(ForStatement) -> ForHead Statement_open:composite(body);
	For_closed:element(ForStatement) -> ForHead Statement_closed:composite(body);
	ForHead -> "for" "("
			(VariableDefOrReference)? ";"
			Expression:composite(termination) ";"
			Assignment:composite(increment)
		")";
		
	//VariableDefOrReference -> Variable:composite(countVariableDefinition);
	//VariableDefOrReference -> Assignment:composite(countVariableReference);
	VariableDefOrReference -> Variable:composite(statements);
	VariableDefOrReference -> Assignment:composite(statements);

	Expression -> L9Expr;
	
	// Expression -> L10Expr;
	// L10Expr -> L9Expr;
		
	L9Expr -> LogicalOr;
	
	LogicalOr -> L8Expr;
	L8Expr -> Or;
	L8Expr -> LogicalAnd;

	LogicalAnd -> L7Expr;
	L7Expr -> And;
	L7Expr -> Equality;
	
	Equality -> L6Expr;
	L6Expr -> Equal;
	L6Expr -> NotEqual;
	L6Expr -> Relational;

	Relational -> L5Expr;
	L5Expr -> Greater;
	L5Expr -> GreaterEqual;
	L5Expr -> Less;
	L5Expr -> LessEqual;
	L5Expr -> InstanceOf;
	L5Expr -> Additive;
	
	Additive -> L4Expr;
	L4Expr -> Plus;
	L4Expr -> Minus;
	L4Expr -> Multiplicative;
	
	Multiplicative -> L3Expr;
	L3Expr -> Mul;
	L3Expr -> Div;
	L3Expr -> Mod;
	L3Expr -> Unary;
	
	Unary -> L2Expr;
	L2Expr -> Neg;
	L2Expr -> Not;
	L2Expr -> Cast;
	L2Expr -> Factor;
	
	Factor -> L1Expr;
	L1Expr -> IdExpr;
	L1Expr -> IntLiteral;
	L1Expr -> StringLiteral;
	L1Expr -> TrueLiteral;
	L1Expr -> FalseLiteral;
	L1Expr -> DoubleLiteral;
	L1Expr -> NullLiteral;
	L1Expr -> CreateObject;
	L1Expr -> TimeLiteral;
	L1Expr -> "(" ws(empty) Expression ws(empty) ")";
	
	Or:element(Or)   -> LogicalOr:composite(op1) ws(space) "or" ws(space) LogicalAnd:composite(op2);
	And:element(And)   -> LogicalAnd:composite(op1) ws(space) "and" ws(space) Equality:composite(op2);
	
	Equal:element(Equal)   -> Equality:composite(op1) ws(space) "==" ws(space) Relational:composite(op2);
	NotEqual:element(NotEqual)   -> Equality:composite(op1) ws(space) "!=" ws(space) Relational:composite(op2);

	Greater:element(Greater)   -> Relational:composite(op1) ws(space) ">" ws(space) Additive:composite(op2);
	GreaterEqual:element(GreaterEqual)   -> Relational:composite(op1) ws(space) ">=" ws(space) Additive:composite(op2);
	Less:element(Less)   -> Relational:composite(op1) ws(space) "<" ws(space) Additive:composite(op2);
	LessEqual:element(LessEqual)   -> Relational:composite(op1) ws(space) "<=" ws(space) Additive:composite(op2);
	InstanceOf:element(InstanceOf) -> Relational:composite(op1) ws(space) "instanceof" ws(space) TypeAccess:composite(op2);
	
	Plus:element(Plus)   -> Additive:composite(op1) ws(space) "+" ws(space) Multiplicative:composite(op2);
	Minus:element(Minus) -> Additive:composite(op1) ws(space) "-" ws(space) Multiplicative:composite(op2);
	
	Mul:element(Mul)     -> Multiplicative:composite(op1) ws(space) "*" ws(space) Unary:composite(op2);
	Div:element(Div)     -> Multiplicative:composite(op1) ws(space) "/" ws(space) Unary:composite(op2);
	Mod:element(Mod)     -> Multiplicative:composite(op1) ws(space) "%" ws(space) Unary:composite(op2);
	
	Neg:element(Neg)     -> "-" ws(space) Unary:composite(op);
	Not:element(Not)     -> "!" ws(space) Unary:composite(op);
	Cast:element(Cast) -> Factor:composite(op) ws(space) "as" ws(space) TypedElementParts;

	IntLiteral:element(IntLiteral) -> INTEGER:composite(value);
	StringLiteral:element(StringLiteral) -> STRINGDEF:composite(value);
	TrueLiteral:element(TrueLiteral) -> "true";
	FalseLiteral:element(FalseLiteral) -> "false";
	DoubleLiteral:element(DoubleLiteral) -> FLOAT:composite(value);
	NullLiteral:element(NullLiteral) -> "null";
	TimeLiteral:element(TimeLiteral) -> "time";
	
	CreateObject:element(CreateObject) -> "new" ws(space) TypedElementPartsWithArrayDimensionSize;

	TypedElementPartsWithArrayDimensionSize -> IdExpr:composite(classifierType) (ArrayDimensionsSizePart)?;
	TypedElementPartsWithArrayDimensionSize -> PrimitiveType:composite(primitiveType) (ArrayDimensionsSizePart)?;

	ArrayDimensionsSizePart -> "array" (ArrayDimensionsSize:composite(typeArrayDimensions))+;
	ArrayDimensionsSize:element(ArrayDimension) -> "[" (Expression:composite(size))? "]";

	IdExpr:element(IdExpr) -> IdExpr:composite(parentIdExpr) "." SimpleIdExpr;
	IdExpr:element(IdExpr) -> SimpleIdExpr;

//	UnqualifiedIdExpr:element(IdExpr) -> BareSimpleIdExpr;
//	BareSimpleIdExpr -> NamedElementRef:reference(referencedElement);
	
	SimpleIdExpr -> NamedElementRef:reference(referencedElement) (IdExprArgs)? (IdExprIndexAt)*;
	SimpleIdExpr -> PredefinedId:composite(predefinedId) (IdExprArgs)? (IdExprIndexAt)*;

	IdExprArgs -> "(" CallPart:composite(callPart) ")";
	CallPart:element(CallPart) -> (Expression:composite(callArguments) ("," Expression:composite(callArguments))* )?;
	
	IdExprIndexAt -> "[" Expression:composite(arrayIndex) "]";
	
	VariableAccess:element(VariableAccess) -> IdExpr:composite(idExpr);
	
	TypeAccess:element(TypeAccess) -> IdExpr:composite(idExpr);
		
	// it is difficult to distinguish a procedure call syntactically from a variable access.
	// therefore, variable access should be disallowed by a constraint.
	FunctionCall:element(FunctionCall) -> IdExpr:composite(callIdExpr);
	
	PredefinedId:element(MeLiteral) -> "self";
	PredefinedId:element(SuperLiteral) -> "super";
	PredefinedId:element(SizeOfArray) -> "length";

	PredefinedId:element(MetaLiteral) -> "meta";
	PredefinedId:element(TypeLiteral) -> "type";
	PredefinedId:element(AnnotationLiteral) -> "@" IDENTIFIER:composite(name);
	
	NamedElementRef:element(NamedElement) -> IDENTIFIER:composite(name);
	
	// EXTENSIONS
	
	Extension -> Extension_actual;

	Extension_actual:element(Extension) -> "extension" IDENTIFIER:composite(name)
		"extends" ExtendedConstruct
		SyntaxDefinition:composite(syntaxDefinition)
	;
		
	ExtensionSemantics:element(ExtensionSemantics) -> "semantics" "for" ExtensionRef:reference(syntaxDefinition)
		"{" (Statement:composite(statements))* "}";
	
	SyntaxDefinition:element(SyntaxDefinition) -> "{"
		"start" MetaSymbolRef:reference(startSymbol) ";" (MetaSymbol:composite(symbols))* "}";
	
	ExtendedConstruct -> ExtendedDblConcept;
	ExtendedConstruct -> ExtendedExtension;
	
	ExtendedDblConcept -> "dbl" ClassRef:reference(extensionPoint);
	ExtendedExtension -> "extension" ExtensionRef:reference(extensionPoint);
	
	ExtensionRef:element(Extension) -> IDENTIFIER:composite(name);
	
	MetaSymbol:element(MetaSymbol) -> IDENTIFIER:composite(name) "->" SyntaxExpression:composite(possibleSyntax) ";";
	
	// EXTENSION MAPPING
	
	SimpleStatement -> ExpansionStatement ";";
	SimpleStatement -> CreateIdStatement ";";
	
//	MappingStatement:element(MappingStatement) -> "expand" FixedMappingPartMiddle:composite(parts)
//		(ws(space) DynamicMappingPart:composite(parts) ws(space) FixedMappingPartMiddle:composite(parts))*;

	CreateIdStatement:element(CreateIdStatement) -> "ID" IDENTIFIER:composite(name);

	ExpansionStatement:element(ExpansionStatement) -> "expand" ExpansionPart:composite(parts)
		(ws(space) ExpansionPart:composite(parts))* (DifferingContext)?;
	
	ExpansionPart -> ExpandTextPart;
	ExpansionPart -> ExpandVariablePart;
	
	DifferingContext -> "after" Expression:composite(differingContext);

	//ExpandTextPart:element(ExpandTextPart) -> CODE:composite(text);
	ExpandTextPart:element(ExpandTextPart) -> STRINGDEF:composite(text);
	ExpandVariablePart:element(ExpandVariablePart) -> IdExpr:composite(expr);
	
	L1Expr -> ParseExpr;
	
	ParseExpr:element(ParseExpr) -> "!(" AssignmentParseExpr ")";
	AssignmentParseExpr -> "Assignment" ":" Assignment:composite(astPart);
	AssignmentParseExpr -> "Expression" ":" Expression:composite(astPart);
	AssignmentParseExpr -> "Class" ":" Class:composite(astPart);
	AssignmentParseExpr -> "LocalScopeStatement" ":" LocalScopeStatement:composite(astPart);
	
	L1Expr -> ExpandExpr;
	ExpandExpr:element(ExpandExpr) -> "?(" Expression:composite(expr) ")";

//	ExpandExpression:element(ExpandExpression) -> "?" "(" Expression:composite(metaObject) ")";
//	CodeQuote:element(CodeQuoteExpression) -> "{" "#" QuotedCode:composite(quotedCode) "}";
	
//	ExpandStatement:element(ExpandStatement) -> "expand" Expression:composite(metaObject) ("after" Expression:composite(location))?;
	//ExpandStatement:element(ExpandStatement) -> "expand" Expression:composite(metaObject);
//	ExpandStatement:element(ExpandStatement) -> "{" "=" ">" Expression:composite(metaObject) "}";
	
//	QuotedCode:element(QuotedExpression) -> "E" ":" Expression:composite(expression);
//	QuotedCode:element(QuotedStatements) -> "S" ":" (Statement:composite(statements))*;
//	QuotedCode:element(QuotedClassContent) -> "CC" ":" (ClassContent)*;
//	QuotedCode:element(QuotedModuleContent) -> "MC" ":" (ModuleContent)*;

//	ExpandSection:element(ExpandSection) -> ExpandSectionCodeBlock:composite(codeBlock);
//	ExpandSectionCodeBlock:element(CodeBlock) -> "{" "+" (Statement:composite(statements))* "}";	

	// EXTENSION SYNTAX

	SyntaxExpression -> L3RhsExpr;
	
	L3RhsExpr -> L2RhsExpr;
	
	L2RhsExpr -> SymbolSequence;		
	
	SymbolSequence:element(SymbolSequence) -> (L1RhsExpr:composite(sequence))*;
	
	L1RhsExpr -> "(" SyntaxExpression ")";
	L1RhsExpr -> StructuralSymbolReference;
	L1RhsExpr -> PlainSymbolReference;
	
	StructuralSymbolReference:element(StructuralSymbolReference) -> IDENTIFIER:composite(name) ":" 
		(IsListType:composite(list))? (ReferenceSemanticsOptional)? SyntaxSymbolClassifier;
	
	SyntaxSymbolClassifier -> ElementarySymbol:composite(ownedClassifier);
	SyntaxSymbolClassifier -> SyntaxSymbolClassifierRef:reference(referencedClassifier);
	
	PlainSymbolReference:element(PlainSymbolReference) -> SyntaxSymbolClassifier;
	
	ReferenceSemanticsOptional -> IsLocalReference:composite(localScopedReference);
	ReferenceSemanticsOptional -> IsGlobalReference:composite(globalScopedReference);
	
	ElementarySymbol -> IdSymbol;
	ElementarySymbol -> IntSymbol;
	ElementarySymbol -> StringSymbol;
	ElementarySymbol -> Keyword;
	
	//CompositeOrReferencePropertyType -> ReferencePropertyType;
	//CompositeOrReferencePropertyType -> CompositePropertyType;
//	CompositeOrReferencePropertyType[0] -> ReferencePropertyType;
//	CompositeOrReferencePropertyType[1] -> CompositePropertyType;
	
	IdSymbol:element(IdSymbol) -> "ID";
	IntSymbol:element(IntSymbol) -> "INT";
	StringSymbol:element(StringSymbol) -> "STRING";
	Keyword:element(Keyword) -> STRINGDEF:composite(keyword);

	// raw (global) -> variable=$$Variable	
	//ReferencePropertyType:element(ReferencePropertyType) -> "$" (IsRawReference:composite(rawReference))? SyntaxSymbolClassifierRef:reference(type);
	//CompositePropertyType:element(CompositePropertyType) -> IsListType:composite(list) "(" SyntaxSymbolClassifierRef:reference(type) ")";
	//CompositePropertyType:element(CompositePropertyType) -> SyntaxSymbolClassifierRef:reference(type);

	IsListType:constant("true":EBoolean) -> "list";
	IsLocalReference:constant("true":EBoolean) -> "$";
	IsGlobalReference:constant("true":EBoolean) -> "$$";
	
	SyntaxSymbolClassifierRef:element(ComplexSymbol) -> IDENTIFIER:composite(name);
	MetaSymbolRef:element(MetaSymbol) -> IDENTIFIER:composite(name);

	Statement -> Test7349549;
	Test7349549:element(TestStatement) -> "Test7349549" INTEGER:composite(value) ";";
	// the above is needed for extensions defining variables of type INT, dont know why just leave it here ...
	
	token () {
		"`cstylecomment`";
	}

}