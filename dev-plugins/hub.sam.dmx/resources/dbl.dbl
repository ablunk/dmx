	module dbl {
		interface EObject {
			EObject eContainer();
		}
		interface Construct extends EObject, NamedExtension {
				string
			 getConcreteSyntax();
		}
		interface Model extends EObject {
			list(Import)
			 getImports();
			list(Module)
			 getModules();
		}
		interface Import extends EObject {
				string
			 getFile();
				Model
			 getModel();
		}
		interface Module extends EObject, NamedElement, EmbeddableExtensionsContainer {
			list(Classifier)
			 getClassifiers();
			list(ClassAugment)
			 getClassAugments();
			list(ExtensionDefinition)
			 getExtensionDefs();
			list(Annotation)
			 getAnnotationDefs();
			list(Procedure)
			 getProcedures();
			list(Variable)
			 getVariables();
				IdResolution
			 getIdRes();
		}
		interface EmbeddableExtensionsContainer extends EObject {
			list(Extension)
			 getExtensions();
		}
		interface ModifierExtensionsContainer extends EObject {
			list(Extension)
			 getModifierExtensions();
		}
		interface Type extends EObject {
		}
		interface TypedElement extends EObject {
				PrimitiveType
			 getPrimitiveType();
				boolean
			 isIsList();
				IdExpr
			 getClassifierTypeExpr();
		}
		interface PrimitiveType extends EObject, Type {
		}
		interface VoidType extends EObject, PrimitiveType {
		}
		interface IntType extends EObject, PrimitiveType {
		}
		interface BoolType extends EObject, PrimitiveType {
		}
		interface DoubleType extends EObject, PrimitiveType {
		}
		interface StringType extends EObject, PrimitiveType {
		}
		interface Procedure extends EObject, NamedElement, TypedElement, CodeBlock, AnnotatableElement {
			list(Parameter)
			 getParameters();
				boolean
			 isClazz();
		}
		interface SimpleAnnotation extends EObject, NamedElement {
				string
			 getValue();
		}
		interface Annotation extends EObject, NamedElement {
			list(Variable)
			 getKeys();
		}
		interface AnnotationApplication extends EObject {
				Annotation
			 getAnnotationDef();
			list(KeyValuePair)
			 getKeyValuePairs();
		}
		interface KeyValuePair extends EObject {
				VariableAccess
			 getKey();
				Expression
			 getValue();
		}
		interface AnnotatableElement extends EObject {
			list(AnnotationApplication)
			 getAnnotationApplications();
			list(SimpleAnnotation)
			 getSimpleAnnotations();
		}
		interface Classifier extends EObject, Type, NamedElement, ReferableRhsType {
			list(NativeBinding)
			 getBindings();
		}
		interface NativeBinding extends EObject {
				string
			 getTargetLanguage();
				string
			 getTargetType();
		}
		interface ClassSimilar extends EObject, EmbeddableExtensionsContainer, ModifierExtensionsContainer {
			list(Variable)
			 getAttributes();
			list(Procedure)
			 getMethods();
				Clazz
			 getSuperClass();
			list(Interface)
			 getImplementedInterfaces();
				StartCodeBlock
			 getInitialBlock();
				StartCodeBlock
			 getFinalBlock();
				StartCodeBlock
			 getActionsBlock();
				StartCodeBlock
			 getReportBlock();
				StartCodeBlock
			 getClearBlock();
		}
		interface StartCodeBlock extends EObject, CodeBlock {
		}
		interface Clazz extends EObject, Classifier, ClassSimilar {
				boolean
			 isActive();
				Constructor
			 getConstructor();
			list(Expression)
			 getBaseConstructorArguments();
		}
		interface Constructor extends EObject {
			list(Parameter)
			 getParameters();
		}
		interface ClassAugment extends EObject, ClassSimilar {
				Clazz
			 getAugmentedClass();
		}
		interface Interface extends EObject, Classifier {
			list(Procedure)
			 getMethods();
			list(Interface)
			 getSuperInterfaces();
		}
		interface AbstractVariable extends EObject, NamedElement, TypedElement {
		}
		interface Variable extends EObject, AbstractVariable, Statement, ModifierExtensionsContainer {
				boolean
			 isControl();
				boolean
			 isClazz();
				Expression
			 getInitialValue();
		}
		interface Parameter extends EObject, AbstractVariable {
		}
		interface NamedElement extends EObject, ExpandableElement {
				string
			 getName();
		}
		interface CodeBlock extends EObject, Construct {
			list(Statement)
			 getStatements();
		}
		interface Statement extends EObject, Construct {
		}
		interface CompositeStatement extends EObject, Statement {
		}
		interface SimpleStatement extends EObject, Statement {
		}
		interface ExpressionStatement extends EObject, SimpleStatement {
				StatementExpression
			 getExpression();
		}
		interface StatementExpression extends EObject {
		}
		interface Assignment extends EObject, SimpleStatement {
				VariableAccess
			 getVariable();
				Expression
			 getValue();
		}
		interface DeprecatedProcedureCallStatement extends EObject, ExpressionStatement {
				Expression
			 getProcedureCall();
		}
		interface ProcedureCall extends EObject, StatementExpression {
				Expression
			 getProcedureAccess();
		}
		interface Return extends EObject, SimpleStatement {
				Expression
			 getValue();
		}
		interface WaitUntil extends EObject, SimpleStatement {
				Expression
			 getCondition();
		}
		interface Terminate extends EObject, SimpleStatement {
		}
		interface Wait extends EObject, SimpleStatement {
		}
		interface Reactivate extends EObject, SimpleStatement {
				Expression
			 getObjectAccess();
		}
		interface ActivateObject extends EObject, SimpleStatement {
				Expression
			 getObjectAccess();
				int
			 getPriority();
		}
		interface Advance extends EObject, SimpleStatement {
				Expression
			 getTime();
		}
		interface Print extends EObject, SimpleStatement {
			list(Expression)
			 getOutputs();
		}
		interface SetStatement extends EObject, SimpleStatement {
				Expression
			 getObject();
				Expression
			 getSet();
		}
		interface RemoveFromSet extends EObject, SetStatement {
		}
		interface AddToSet extends EObject, SetStatement {
				Expression
			 getAtIndex();
		}
		interface EmptySet extends EObject, SetStatement {
		}
		interface IfStatement extends EObject, CompositeStatement {
				Expression
			 getCondition();
				CodeBlock
			 getIfCaseBlock();
			list(Expression)
			 getElifCondition();
			list(CodeBlock)
			 getElifCaseBlock();
				CodeBlock
			 getElseCaseBlock();
		}
		interface WhileStatement extends EObject, CompositeStatement {
				Expression
			 getCondition();
				CodeBlock
			 getWhileBlock();
		}
		interface BreakStatement extends EObject, SimpleStatement {
		}
		interface ContinueStatement extends EObject, SimpleStatement {
		}
		interface ForEachStatement extends EObject, CompositeStatement {
				Variable
			 getIteratorVariableDefinition();
				VariableAccess
			 getIteratorVariableReference();
				Expression
			 getIterableExpression();
				CodeBlock
			 getForBlock();
		}
		interface Expression extends EObject, Construct {
		}
		interface L1Expr extends EObject, Expression {
		}
		interface BinaryOperator extends EObject, Expression {
				Expression
			 getOp1();
				Expression
			 getOp2();
		}
		interface UnaryOperator extends EObject, Expression {
				Expression
			 getOp();
		}
		interface Plus extends EObject, BinaryOperator {
		}
		interface Minus extends EObject, BinaryOperator {
		}
		interface Mul extends EObject, BinaryOperator {
		}
		interface Mod extends EObject, BinaryOperator {
		}
		interface Div extends EObject, BinaryOperator {
		}
		interface Neg extends EObject, UnaryOperator {
		}
		interface And extends EObject, BinaryOperator {
		}
		interface Or extends EObject, BinaryOperator {
		}
		interface Greater extends EObject, BinaryOperator {
		}
		interface GreaterEqual extends EObject, BinaryOperator {
		}
		interface Less extends EObject, BinaryOperator {
		}
		interface LessEqual extends EObject, BinaryOperator {
		}
		interface NotEqual extends EObject, BinaryOperator {
		}
		interface Equal extends EObject, BinaryOperator {
		}
		interface InstanceOf extends EObject, BinaryOperator {
		}
		interface Not extends EObject, UnaryOperator {
		}
		interface CreateObject extends EObject, Expression, TypedElement {
		}
		interface Cast extends EObject, UnaryOperator, TypedElement {
		}
		interface NullLiteral extends EObject, Expression {
		}
		interface TimeLiteral extends EObject, Expression {
		}
		interface ActiveLiteral extends EObject, Expression {
		}
		interface EvalExpr extends EObject, Expression {
				Expression
			 getExpr();
		}
		interface MeLiteral extends EObject, PredefinedId {
		}
		interface SuperLiteral extends EObject, PredefinedId {
		}
		interface MetaLiteral extends EObject, PredefinedId {
		}
		interface TypeLiteral extends EObject, PredefinedId {
		}
		interface SetOp extends EObject, PredefinedId {
				Expression
			 getSet();
		}
		interface SizeOfSet extends EObject, SetOp {
		}
		interface FirstInSet extends EObject, SetOp {
		}
		interface LastInSet extends EObject, SetOp {
		}
		interface Contains extends EObject, SetOp {
		}
		interface IndexOf extends EObject, SetOp {
		}
		interface ObjectAt extends EObject, SetOp {
		}
		interface BeforeInSet extends EObject, SetOp {
		}
		interface AfterInSet extends EObject, SetOp {
		}
		interface StringLiteral extends EObject, Expression {
				string
			 getValue();
		}
		interface IntLiteral extends EObject, Expression {
				int
			 getValue();
		}
		interface TrueLiteral extends EObject, Expression {
		}
		interface FalseLiteral extends EObject, Expression {
		}
		interface DoubleLiteral extends EObject, Expression {
				double
			 getValue();
		}
		interface DepIdentifiableElement extends EObject {
		}
		interface PredefinedId extends EObject {
		}
		interface IdExpr extends EObject, Expression {
				IdExpr
			 getParentIdExpr();
				NamedElement
			 getReferencedElement();
				PredefinedId
			 getPredefinedId();
				ArgumentExpression
			 getArguments();
		}
		interface ArgumentExpression extends EObject {
			list(Expression)
			 getArguments();
		}
		interface ElementAccess extends EObject, Expression {
				IdExpr
			 getIdExpr();
		}
		interface VariableAccess extends EObject, ElementAccess, ExpandableElement {
		}
		interface MetaAccess extends EObject, VariableAccess {
		}
		interface TypeAccess extends EObject, ElementAccess, ExpandableElement {
		}
		interface Extension extends EObject {
		}
		interface NamedExtension extends EObject, Extension, NamedElement {
		}
		interface ClassContentExtension extends EObject, NamedExtension {
		}
		interface ModuleContentExtension extends EObject, NamedExtension {
		}
		interface ExtensionDefinition extends EObject, NamedElement {
			list(Classifier)
			 getAbstractSyntaxDef();
				TextualSyntaxDef
			 getTextualSyntaxDef();
				Mapping
			 getMappingDef();
		}
		interface TextualSyntaxDef extends EObject {
				ExtensionRule
			 getExtensionRule();
			list(TsRule)
			 getNewRules();
		}
		interface ReferableRhsType extends EObject, NamedElement {
		}
		interface TsRule extends EObject, NamedElement, ReferableRhsType {
				string
			 getMetaClassName();
				RhsExpression
			 getRhs();
		}
		interface ExtensionRule extends EObject, NamedElement {
				Classifier
			 getInstantiableMetaClass();
				RuleExpr
			 getFirstNewRule();
		}
		interface RhsExpression extends EObject {
		}
		interface SequenceExpr extends EObject, RhsExpression {
			list(RhsExpression)
			 getSequence();
		}
		interface OptionalExpr extends EObject, RhsExpression {
				RhsExpression
			 getExpression();
		}
		interface RuntimeExpr extends EObject, RhsExpression {
				RhsExpression
			 getExpression();
		}
		interface AtLeastOneExpr extends EObject, RhsExpression {
				RhsExpression
			 getExpression();
		}
		interface ArbitraryExpr extends EObject, RhsExpression {
				RhsExpression
			 getExpression();
		}
		interface AlternativeExpr extends EObject, RhsExpression {
				RhsExpression
			 getLeft();
				RhsExpression
			 getRight();
		}
		interface TerminalExpr extends EObject, RhsExpression {
				string
			 getTerminal();
		}
		interface PropertyBindingExpr extends EObject, NamedElement, RhsExpression {
				PropertyType
			 getPropertyType();
				BindingExprOpKind
			 getOperator();
		}
		interface RuleExpr extends EObject, RhsExpression {
				TsRule
			 getRule();
		}
		interface PropertyType extends EObject {
		}
		interface IdPropertyType extends EObject, PropertyType {
		}
		interface IntPropertyType extends EObject, PropertyType {
		}
		interface StringPropertyType extends EObject, PropertyType {
		}
		interface BooleanPropertyType extends EObject, PropertyType {
				string
			 getTerminal();
		}
		interface StructuredPropertyType extends EObject, PropertyType {
				ReferableRhsType
			 getType();
		}
		interface CompositePropertyType extends EObject, StructuredPropertyType {
				boolean
			 isList();
		}
		interface ReferencePropertyType extends EObject, StructuredPropertyType {
				Pattern
			 getIdResolutionPattern();
				boolean
			 isRawReference();
		}
		interface Mapping extends EObject, CodeBlock {
			list(MappingPart)
			 getParts();
				Expression
			 getMetaObject();
		}
		interface MappingPart extends EObject {
		}
		interface MetaExpr extends EObject, Expression {
				Expression
			 getExpr();
		}
		interface TargetStatement extends EObject, Statement {
				CodeBlock
			 getCodeBlock();
		}
		interface MappingStatement extends EObject, Statement {
			list(MappingPart)
			 getParts();
			list(Expression)
			 getExprs();
		}
		interface SetGenContextStatement extends EObject, SimpleStatement {
				Expression
			 getContext();
				boolean
			 isAddAfterContext();
		}
		interface ResetGenContextStatement extends EObject, SimpleStatement {
		}
		interface SaveGenStatement extends EObject, SimpleStatement {
				Expression
			 getVariable();
		}
		interface ResumeGenStatement extends EObject, SimpleStatement {
				Expression
			 getVariable();
		}
		interface FixedMappingPart extends EObject, MappingPart {
				string
			 getCode();
		}
		interface DynamicMappingPart extends EObject, MappingPart {
				Expression
			 getExpr();
		}
		interface ExpandExpression extends EObject, StatementExpression, Expression {
				Expression
			 getMetaObject();
		}
		interface ExpandStatement extends EObject, Statement {
				Expression
			 getMetaObject();
				Expression
			 getLocation();
		}
		interface ExpandSection extends EObject, CompositeStatement {
				CodeBlock
			 getCodeBlock();
		}
		interface CodeQuoteExpression extends EObject, Expression {
				QuotedCode
			 getQuotedCode();
		}
		interface QuotedCode extends EObject {
		}
		interface QuotedExpression extends EObject, QuotedCode {
				Expression
			 getExpression();
		}
		interface QuotedStatements extends EObject, QuotedCode {
			list(Statement)
			 getStatements();
		}
		interface QuotedClassContent extends EObject, QuotedCode, ClassSimilar {
		}
		interface QuotedModuleContent extends EObject, QuotedCode, Module {
		}
		interface ExpandableElement extends EObject {
				ExpandExpression
			 getExpandExpression();
		}
		interface TestStatement extends EObject, Statement {
				int
			 getValue();
		}
		interface IdResolution extends EObject {
				string
			 getMetaModelPlatformURI();
			list(Pattern)
			 getPatterns();
		}
		interface Pattern extends EObject, NamedElement {
				boolean
			 isTop();
				Parameter
			 getContext();
				CodeBlock
			 getCodeBlock();
		}
		interface PotentiallyHiddenIdElements extends EObject, Statement {
				CodeBlock
			 getCodeBlock();
		}
		interface FindContainer extends EObject, Statement {
				Parameter
			 getVariableBinding();
				CodeBlock
			 getContainerBlock();
				CodeBlock
			 getElseBlock();
		}
		interface ConsiderIdElements extends EObject, Statement {
				Expression
			 getElementsQuery();
		}
		interface IncludePattern extends EObject, Statement {
				Pattern
			 getPattern();
				Expression
			 getContext();
		}
	}
