#import "ecore"

module dbl {

class ExtensibleElement
extends 
NamedElement
{
	bindings {
		"java" -> "hub.sam.dbl.ExtensibleElement"
	}
	
	string getConcreteSyntax() abstract;
	void setConcreteSyntax(string value) abstract;
	boolean isInstanceOfExtensionDefinition() abstract;
	void setInstanceOfExtensionDefinition(boolean value) abstract;
}
class Model
extends EObject
{
	bindings {
		"java" -> "hub.sam.dbl.Model"
	}
	
	List getImports() abstract;
	List getModules() abstract;
}
class Import
extends EObject
{
	bindings {
		"java" -> "hub.sam.dbl.Import"
	}
	
	string getFile() abstract;
	void setFile(string value) abstract;
	Model getModel() abstract;
	void setModel(Model value) abstract;
}
class Module
extends 
NamedElement,
EmbeddableExtensionsContainer
{
	bindings {
		"java" -> "hub.sam.dbl.Module"
	}
	
	List getClassifiers() abstract;
	List getClassAugments() abstract;
	List getExtensionDefs() abstract;
	List getProcedures() abstract;
	List getVariables() abstract;
}
class EmbeddableExtensionsContainer
extends EObject
{
	bindings {
		"java" -> "hub.sam.dbl.EmbeddableExtensionsContainer"
	}
	
	List getExtensions() abstract;
}
class ModifierExtensionsContainer
extends EObject
{
	bindings {
		"java" -> "hub.sam.dbl.ModifierExtensionsContainer"
	}
	
	List getModifierExtensions() abstract;
}
class Type
extends EObject
{
	bindings {
		"java" -> "hub.sam.dbl.Type"
	}
	
	List getArrayDimensions() abstract;
}
class TypedElement
extends EObject
{
	bindings {
		"java" -> "hub.sam.dbl.TypedElement"
	}
	
	PrimitiveType getPrimitiveType() abstract;
	void setPrimitiveType(PrimitiveType value) abstract;
	List getTypeArrayDimensions() abstract;
	IdExpr getClassifierType() abstract;
	void setClassifierType(IdExpr value) abstract;
}
class ArrayDimension
extends EObject
{
	bindings {
		"java" -> "hub.sam.dbl.ArrayDimension"
	}
	
	Expression getSize() abstract;
	void setSize(Expression value) abstract;
}
class PrimitiveType
extends 
Type
{
	bindings {
		"java" -> "hub.sam.dbl.PrimitiveType"
	}
	
}
class VoidType
extends 
PrimitiveType
{
	bindings {
		"java" -> "hub.sam.dbl.VoidType"
	}
	
}
class IntType
extends 
PrimitiveType
{
	bindings {
		"java" -> "hub.sam.dbl.IntType"
	}
	
}
class BoolType
extends 
PrimitiveType
{
	bindings {
		"java" -> "hub.sam.dbl.BoolType"
	}
	
}
class DoubleType
extends 
PrimitiveType
{
	bindings {
		"java" -> "hub.sam.dbl.DoubleType"
	}
	
}
class StringType
extends 
PrimitiveType
{
	bindings {
		"java" -> "hub.sam.dbl.StringType"
	}
	
}
class Procedure
extends 
NamedElement,
TypedElement,
LocalScope
{
	bindings {
		"java" -> "hub.sam.dbl.Procedure"
	}
	
	List getParameters() abstract;
	boolean isClazz() abstract;
	void setClazz(boolean value) abstract;
	boolean isAbstract() abstract;
	void setAbstract(boolean value) abstract;
}
class Classifier
extends 
Type,
NamedElement,
ReferableRhsType
{
	bindings {
		"java" -> "hub.sam.dbl.Classifier"
	}
	
	List getBindings() abstract;
}
class NativeBinding
extends EObject
{
	bindings {
		"java" -> "hub.sam.dbl.NativeBinding"
	}
	
	string getTargetLanguage() abstract;
	void setTargetLanguage(string value) abstract;
	string getTargetType() abstract;
	void setTargetType(string value) abstract;
}
class ClassSimilar
extends 
EmbeddableExtensionsContainer,
ModifierExtensionsContainer
{
	bindings {
		"java" -> "hub.sam.dbl.ClassSimilar"
	}
	
	List getAttributes() abstract;
	List getMethods() abstract;
	List getSuperClasses() abstract;
	ClassPart getInitialBlock() abstract;
	void setInitialBlock(ClassPart value) abstract;
	ClassPart getFinalBlock() abstract;
	void setFinalBlock(ClassPart value) abstract;
	ClassPart getActionsBlock() abstract;
	void setActionsBlock(ClassPart value) abstract;
	ClassPart getReportBlock() abstract;
	void setReportBlock(ClassPart value) abstract;
	ClassPart getClearBlock() abstract;
	void setClearBlock(ClassPart value) abstract;
}
class ClassPart
extends 
LocalScope
{
	bindings {
		"java" -> "hub.sam.dbl.ClassPart"
	}
	
}
class SuperClassSpecification
extends EObject
{
	bindings {
		"java" -> "hub.sam.dbl.SuperClassSpecification"
	}
	
	Clazz getClazz() abstract;
	void setClazz(Clazz value) abstract;
	List getConstructorArguments() abstract;
}
class Clazz
extends 
Classifier,
ClassSimilar
{
	bindings {
		"java" -> "hub.sam.dbl.Clazz"
	}
	
	boolean isActive() abstract;
	void setActive(boolean value) abstract;
	Constructor getConstructor() abstract;
	void setConstructor(Constructor value) abstract;
}
class Constructor
extends EObject
{
	bindings {
		"java" -> "hub.sam.dbl.Constructor"
	}
	
	List getParameters() abstract;
}
class ClassAugment
extends 
ClassSimilar
{
	bindings {
		"java" -> "hub.sam.dbl.ClassAugment"
	}
	
	Clazz getAugmentedClass() abstract;
	void setAugmentedClass(Clazz value) abstract;
}
class AbstractVariable
extends 
NamedElement,
TypedElement
{
	bindings {
		"java" -> "hub.sam.dbl.AbstractVariable"
	}
	
}
class Variable
extends 
AbstractVariable,
Statement,
ModifierExtensionsContainer
{
	bindings {
		"java" -> "hub.sam.dbl.Variable"
	}
	
	boolean isControl() abstract;
	void setControl(boolean value) abstract;
	boolean isClazz() abstract;
	void setClazz(boolean value) abstract;
	Expression getInitialValue() abstract;
	void setInitialValue(Expression value) abstract;
}
class Parameter
extends 
AbstractVariable
{
	bindings {
		"java" -> "hub.sam.dbl.Parameter"
	}
	
}
class NamedElement
extends EObject
{
	bindings {
		"java" -> "hub.sam.dbl.NamedElement"
	}
	
	string getName() abstract;
	void setName(string value) abstract;
}
class deprecated_CodeBlock
extends 
ExtensibleElement
{
	bindings {
		"java" -> "hub.sam.dbl.deprecated_CodeBlock"
	}
	
	List getStatements() abstract;
}
class Statement
extends 
ExtensibleElement
{
	bindings {
		"java" -> "hub.sam.dbl.Statement"
	}
	
}
class LoopStatement
extends 
Statement
{
	bindings {
		"java" -> "hub.sam.dbl.LoopStatement"
	}
	
}
class SimpleStatement
extends 
Statement
{
	bindings {
		"java" -> "hub.sam.dbl.SimpleStatement"
	}
	
}
class Assignment
extends 
SimpleStatement
{
	bindings {
		"java" -> "hub.sam.dbl.Assignment"
	}
	
	VariableAccess getVariable() abstract;
	void setVariable(VariableAccess value) abstract;
	Expression getValue() abstract;
	void setValue(Expression value) abstract;
}
class ProcedureCall
extends 
SimpleStatement
{
	bindings {
		"java" -> "hub.sam.dbl.ProcedureCall"
	}
	
	IdExpr getCallIdExpr() abstract;
	void setCallIdExpr(IdExpr value) abstract;
}
class Return
extends 
SimpleStatement
{
	bindings {
		"java" -> "hub.sam.dbl.Return"
	}
	
	Expression getValue() abstract;
	void setValue(Expression value) abstract;
}
class WaitUntil
extends 
SimpleStatement
{
	bindings {
		"java" -> "hub.sam.dbl.WaitUntil"
	}
	
	Expression getCondition() abstract;
	void setCondition(Expression value) abstract;
}
class Terminate
extends 
SimpleStatement
{
	bindings {
		"java" -> "hub.sam.dbl.Terminate"
	}
	
}
class Yield
extends 
SimpleStatement
{
	bindings {
		"java" -> "hub.sam.dbl.Yield"
	}
	
}
class Wait
extends 
SimpleStatement
{
	bindings {
		"java" -> "hub.sam.dbl.Wait"
	}
	
}
class Reactivate
extends 
SimpleStatement
{
	bindings {
		"java" -> "hub.sam.dbl.Reactivate"
	}
	
	Expression getObjectAccess() abstract;
	void setObjectAccess(Expression value) abstract;
}
class ActivateObject
extends 
SimpleStatement
{
	bindings {
		"java" -> "hub.sam.dbl.ActivateObject"
	}
	
	Expression getObjectAccess() abstract;
	void setObjectAccess(Expression value) abstract;
	int getPriority() abstract;
	void setPriority(int value) abstract;
}
class Advance
extends 
SimpleStatement
{
	bindings {
		"java" -> "hub.sam.dbl.Advance"
	}
	
	Expression getTime() abstract;
	void setTime(Expression value) abstract;
}
class Print
extends 
SimpleStatement
{
	bindings {
		"java" -> "hub.sam.dbl.Print"
	}
	
	List getOutputs() abstract;
}
class IfStatement
extends 
Statement
{
	bindings {
		"java" -> "hub.sam.dbl.IfStatement"
	}
	
	Expression getCondition() abstract;
	void setCondition(Expression value) abstract;
	Statement getTrueCase() abstract;
	void setTrueCase(Statement value) abstract;
	Statement getFalseCase() abstract;
	void setFalseCase(Statement value) abstract;
}
class LocalScope
extends EObject
{
	bindings {
		"java" -> "hub.sam.dbl.LocalScope"
	}
	
	List getStatements() abstract;
}
class LocalScopeStatement
extends 
SimpleStatement,
LocalScope
{
	bindings {
		"java" -> "hub.sam.dbl.LocalScopeStatement"
	}
	
}
class ForStatement
extends 
LoopStatement,
LocalScope
{
	bindings {
		"java" -> "hub.sam.dbl.ForStatement"
	}
	
	Expression getTermination() abstract;
	void setTermination(Expression value) abstract;
	Assignment getIncrement() abstract;
	void setIncrement(Assignment value) abstract;
	Statement getBody() abstract;
	void setBody(Statement value) abstract;
}
class WhileStatement
extends 
LoopStatement
{
	bindings {
		"java" -> "hub.sam.dbl.WhileStatement"
	}
	
	Expression getCondition() abstract;
	void setCondition(Expression value) abstract;
	Statement getBody() abstract;
	void setBody(Statement value) abstract;
}
class SwitchStatement
extends 
SimpleStatement
{
	bindings {
		"java" -> "hub.sam.dbl.SwitchStatement"
	}
	
	VariableAccess getVariable() abstract;
	void setVariable(VariableAccess value) abstract;
	List getCases() abstract;
	SwitchCase getDefaultCase() abstract;
	void setDefaultCase(SwitchCase value) abstract;
}
class SwitchCase
extends EObject
{
	bindings {
		"java" -> "hub.sam.dbl.SwitchCase"
	}
	
	Expression getValue() abstract;
	void setValue(Expression value) abstract;
	List getBody() abstract;
}
class BreakStatement
extends 
SimpleStatement
{
	bindings {
		"java" -> "hub.sam.dbl.BreakStatement"
	}
	
}
class ContinueStatement
extends 
SimpleStatement
{
	bindings {
		"java" -> "hub.sam.dbl.ContinueStatement"
	}
	
}
class Expression
extends 
TypedElement,
ExtensibleElement
{
	bindings {
		"java" -> "hub.sam.dbl.Expression"
	}
	
}
class L1Expr
extends 
Expression
{
	bindings {
		"java" -> "hub.sam.dbl.L1Expr"
	}
	
}
class BinaryOperator
extends 
Expression
{
	bindings {
		"java" -> "hub.sam.dbl.BinaryOperator"
	}
	
	Expression getOp1() abstract;
	void setOp1(Expression value) abstract;
	Expression getOp2() abstract;
	void setOp2(Expression value) abstract;
}
class UnaryOperator
extends 
Expression
{
	bindings {
		"java" -> "hub.sam.dbl.UnaryOperator"
	}
	
	Expression getOp() abstract;
	void setOp(Expression value) abstract;
}
class And
extends 
BinaryOperator
{
	bindings {
		"java" -> "hub.sam.dbl.And"
	}
	
}
class Or
extends 
BinaryOperator
{
	bindings {
		"java" -> "hub.sam.dbl.Or"
	}
	
}
class Greater
extends 
BinaryOperator
{
	bindings {
		"java" -> "hub.sam.dbl.Greater"
	}
	
}
class GreaterEqual
extends 
BinaryOperator
{
	bindings {
		"java" -> "hub.sam.dbl.GreaterEqual"
	}
	
}
class Less
extends 
BinaryOperator
{
	bindings {
		"java" -> "hub.sam.dbl.Less"
	}
	
}
class LessEqual
extends 
BinaryOperator
{
	bindings {
		"java" -> "hub.sam.dbl.LessEqual"
	}
	
}
class NotEqual
extends 
BinaryOperator
{
	bindings {
		"java" -> "hub.sam.dbl.NotEqual"
	}
	
}
class Equal
extends 
BinaryOperator
{
	bindings {
		"java" -> "hub.sam.dbl.Equal"
	}
	
}
class InstanceOf
extends 
BinaryOperator
{
	bindings {
		"java" -> "hub.sam.dbl.InstanceOf"
	}
	
}
class Plus
extends 
BinaryOperator
{
	bindings {
		"java" -> "hub.sam.dbl.Plus"
	}
	
}
class Minus
extends 
BinaryOperator
{
	bindings {
		"java" -> "hub.sam.dbl.Minus"
	}
	
}
class Mul
extends 
BinaryOperator
{
	bindings {
		"java" -> "hub.sam.dbl.Mul"
	}
	
}
class Mod
extends 
BinaryOperator
{
	bindings {
		"java" -> "hub.sam.dbl.Mod"
	}
	
}
class Div
extends 
BinaryOperator
{
	bindings {
		"java" -> "hub.sam.dbl.Div"
	}
	
}
class Neg
extends 
UnaryOperator
{
	bindings {
		"java" -> "hub.sam.dbl.Neg"
	}
	
}
class Not
extends 
UnaryOperator
{
	bindings {
		"java" -> "hub.sam.dbl.Not"
	}
	
}
class Cast
extends 
UnaryOperator,
TypedElement
{
	bindings {
		"java" -> "hub.sam.dbl.Cast"
	}
	
}
class CreateObject
extends 
L1Expr,
TypedElement
{
	bindings {
		"java" -> "hub.sam.dbl.CreateObject"
	}
	
}
class NullLiteral
extends 
L1Expr
{
	bindings {
		"java" -> "hub.sam.dbl.NullLiteral"
	}
	
}
class TimeLiteral
extends 
L1Expr
{
	bindings {
		"java" -> "hub.sam.dbl.TimeLiteral"
	}
	
}
class ActiveLiteral
extends 
L1Expr
{
	bindings {
		"java" -> "hub.sam.dbl.ActiveLiteral"
	}
	
}
class StringLiteral
extends 
L1Expr
{
	bindings {
		"java" -> "hub.sam.dbl.StringLiteral"
	}
	
	string getValue() abstract;
	void setValue(string value) abstract;
}
class IntLiteral
extends 
L1Expr
{
	bindings {
		"java" -> "hub.sam.dbl.IntLiteral"
	}
	
	int getValue() abstract;
	void setValue(int value) abstract;
}
class TrueLiteral
extends 
L1Expr
{
	bindings {
		"java" -> "hub.sam.dbl.TrueLiteral"
	}
	
}
class FalseLiteral
extends 
L1Expr
{
	bindings {
		"java" -> "hub.sam.dbl.FalseLiteral"
	}
	
}
class DoubleLiteral
extends 
L1Expr
{
	bindings {
		"java" -> "hub.sam.dbl.DoubleLiteral"
	}
	
	double getValue() abstract;
	void setValue(double value) abstract;
}
class EvalExpr
extends 
Expression
{
	bindings {
		"java" -> "hub.sam.dbl.EvalExpr"
	}
	
	Expression getExpr() abstract;
	void setExpr(Expression value) abstract;
}
class PredefinedId
extends EObject
{
	bindings {
		"java" -> "hub.sam.dbl.PredefinedId"
	}
	
}
class MeLiteral
extends 
PredefinedId
{
	bindings {
		"java" -> "hub.sam.dbl.MeLiteral"
	}
	
}
class SuperLiteral
extends 
PredefinedId
{
	bindings {
		"java" -> "hub.sam.dbl.SuperLiteral"
	}
	
}
class MetaLiteral
extends 
PredefinedId
{
	bindings {
		"java" -> "hub.sam.dbl.MetaLiteral"
	}
	
}
class TypeLiteral
extends 
PredefinedId
{
	bindings {
		"java" -> "hub.sam.dbl.TypeLiteral"
	}
	
}
class SizeOfArray
extends 
PredefinedId
{
	bindings {
		"java" -> "hub.sam.dbl.SizeOfArray"
	}
	
}
class IdExpr
extends 
L1Expr
{
	bindings {
		"java" -> "hub.sam.dbl.IdExpr"
	}
	
	IdExpr getParentIdExpr() abstract;
	void setParentIdExpr(IdExpr value) abstract;
	NamedElement getReferencedElement() abstract;
	void setReferencedElement(NamedElement value) abstract;
	PredefinedId getPredefinedId() abstract;
	void setPredefinedId(PredefinedId value) abstract;
	List getArrayIndex() abstract;
	CallPart getCallPart() abstract;
	void setCallPart(CallPart value) abstract;
}
class CallPart
extends EObject
{
	bindings {
		"java" -> "hub.sam.dbl.CallPart"
	}
	
	List getCallArguments() abstract;
}
class ElementAccess
extends 
Expression
{
	bindings {
		"java" -> "hub.sam.dbl.ElementAccess"
	}
	
	IdExpr getIdExpr() abstract;
	void setIdExpr(IdExpr value) abstract;
}
class VariableAccess
extends 
ElementAccess
{
	bindings {
		"java" -> "hub.sam.dbl.VariableAccess"
	}
	
}
class MetaAccess
extends 
VariableAccess
{
	bindings {
		"java" -> "hub.sam.dbl.MetaAccess"
	}
	
}
class TypeAccess
extends 
ElementAccess
{
	bindings {
		"java" -> "hub.sam.dbl.TypeAccess"
	}
	
}
class ClassContentExtension
extends 
ExtensibleElement
{
	bindings {
		"java" -> "hub.sam.dbl.ClassContentExtension"
	}
	
}
class ModuleContentExtension
extends 
ExtensibleElement
{
	bindings {
		"java" -> "hub.sam.dbl.ModuleContentExtension"
	}
	
}
class ExtensionDefinition
extends 
NamedElement
{
	bindings {
		"java" -> "hub.sam.dbl.ExtensionDefinition"
	}
	
	List getAbstractSyntaxDef() abstract;
	TextualSyntaxDef getTextualSyntaxDef() abstract;
	void setTextualSyntaxDef(TextualSyntaxDef value) abstract;
	Mapping getMappingDef() abstract;
	void setMappingDef(Mapping value) abstract;
}
class TextualSyntaxDef
extends EObject
{
	bindings {
		"java" -> "hub.sam.dbl.TextualSyntaxDef"
	}
	
	ExtensionRule getExtensionRule() abstract;
	void setExtensionRule(ExtensionRule value) abstract;
	List getNewRules() abstract;
}
class ReferableRhsType
extends 
NamedElement
{
	bindings {
		"java" -> "hub.sam.dbl.ReferableRhsType"
	}
	
}
class TsRule
extends 
NamedElement,
ReferableRhsType
{
	bindings {
		"java" -> "hub.sam.dbl.TsRule"
	}
	
	string getMetaClassName() abstract;
	void setMetaClassName(string value) abstract;
	RhsExpression getRhs() abstract;
	void setRhs(RhsExpression value) abstract;
}
class ExtensionRule
extends 
NamedElement
{
	bindings {
		"java" -> "hub.sam.dbl.ExtensionRule"
	}
	
	Classifier getInstantiableMetaClass() abstract;
	void setInstantiableMetaClass(Classifier value) abstract;
	RuleExpr getFirstNewRule() abstract;
	void setFirstNewRule(RuleExpr value) abstract;
}
class RhsExpression
extends EObject
{
	bindings {
		"java" -> "hub.sam.dbl.RhsExpression"
	}
	
}
class SequenceExpr
extends 
RhsExpression
{
	bindings {
		"java" -> "hub.sam.dbl.SequenceExpr"
	}
	
	List getSequence() abstract;
}
class OptionalExpr
extends 
RhsExpression
{
	bindings {
		"java" -> "hub.sam.dbl.OptionalExpr"
	}
	
	RhsExpression getExpression() abstract;
	void setExpression(RhsExpression value) abstract;
}
class RuntimeExpr
extends 
RhsExpression
{
	bindings {
		"java" -> "hub.sam.dbl.RuntimeExpr"
	}
	
	RhsExpression getExpression() abstract;
	void setExpression(RhsExpression value) abstract;
}
class AtLeastOneExpr
extends 
RhsExpression
{
	bindings {
		"java" -> "hub.sam.dbl.AtLeastOneExpr"
	}
	
	RhsExpression getExpression() abstract;
	void setExpression(RhsExpression value) abstract;
}
class ArbitraryExpr
extends 
RhsExpression
{
	bindings {
		"java" -> "hub.sam.dbl.ArbitraryExpr"
	}
	
	RhsExpression getExpression() abstract;
	void setExpression(RhsExpression value) abstract;
}
class AlternativeExpr
extends 
RhsExpression
{
	bindings {
		"java" -> "hub.sam.dbl.AlternativeExpr"
	}
	
	RhsExpression getLeft() abstract;
	void setLeft(RhsExpression value) abstract;
	RhsExpression getRight() abstract;
	void setRight(RhsExpression value) abstract;
}
class TerminalExpr
extends 
RhsExpression
{
	bindings {
		"java" -> "hub.sam.dbl.TerminalExpr"
	}
	
	string getTerminal() abstract;
	void setTerminal(string value) abstract;
}
class PropertyBindingExpr
extends 
NamedElement,
RhsExpression
{
	bindings {
		"java" -> "hub.sam.dbl.PropertyBindingExpr"
	}
	
	PropertyType getPropertyType() abstract;
	void setPropertyType(PropertyType value) abstract;
	//BindingExprOpKind getOperator() abstract;
	//void setOperator(BindingExprOpKind value) abstract;
}
class RuleExpr
extends 
RhsExpression
{
	bindings {
		"java" -> "hub.sam.dbl.RuleExpr"
	}
	
	TsRule getRule() abstract;
	void setRule(TsRule value) abstract;
}
class PropertyType
extends EObject
{
	bindings {
		"java" -> "hub.sam.dbl.PropertyType"
	}
	
}
class IdPropertyType
extends 
PropertyType
{
	bindings {
		"java" -> "hub.sam.dbl.IdPropertyType"
	}
	
}
class IntPropertyType
extends 
PropertyType
{
	bindings {
		"java" -> "hub.sam.dbl.IntPropertyType"
	}
	
}
class StringPropertyType
extends 
PropertyType
{
	bindings {
		"java" -> "hub.sam.dbl.StringPropertyType"
	}
	
}
class BooleanPropertyType
extends 
PropertyType
{
	bindings {
		"java" -> "hub.sam.dbl.BooleanPropertyType"
	}
	
	string getTerminal() abstract;
	void setTerminal(string value) abstract;
}
class StructuredPropertyType
extends 
PropertyType
{
	bindings {
		"java" -> "hub.sam.dbl.StructuredPropertyType"
	}
	
	ReferableRhsType getType() abstract;
	void setType(ReferableRhsType value) abstract;
}
class CompositePropertyType
extends 
StructuredPropertyType
{
	bindings {
		"java" -> "hub.sam.dbl.CompositePropertyType"
	}
	
	boolean isList() abstract;
	void setList(boolean value) abstract;
}
class ReferencePropertyType
extends 
StructuredPropertyType
{
	bindings {
		"java" -> "hub.sam.dbl.ReferencePropertyType"
	}
	
	Pattern getIdResolutionPattern() abstract;
	void setIdResolutionPattern(Pattern value) abstract;
	boolean isRawReference() abstract;
	void setRawReference(boolean value) abstract;
}
class Mapping
extends 
LocalScopeStatement
{
	bindings {
		"java" -> "hub.sam.dbl.Mapping"
	}
	
	List getParts() abstract;
	Expression getMetaObject() abstract;
	void setMetaObject(Expression value) abstract;
}
class MappingPart
extends EObject
{
	bindings {
		"java" -> "hub.sam.dbl.MappingPart"
	}
	
}
class MetaExpr
extends 
Expression
{
	bindings {
		"java" -> "hub.sam.dbl.MetaExpr"
	}
	
	Expression getExpr() abstract;
	void setExpr(Expression value) abstract;
}
class TargetStatement
extends 
Statement
{
	bindings {
		"java" -> "hub.sam.dbl.TargetStatement"
	}
	
	Statement getBody() abstract;
	void setBody(Statement value) abstract;
}
class MappingStatement
extends 
Statement
{
	bindings {
		"java" -> "hub.sam.dbl.MappingStatement"
	}
	
	List getParts() abstract;
	List getExprs() abstract;
}
class SetGenContextStatement
extends 
SimpleStatement
{
	bindings {
		"java" -> "hub.sam.dbl.SetGenContextStatement"
	}
	
	Expression getContext() abstract;
	void setContext(Expression value) abstract;
	boolean isAddAfterContext() abstract;
	void setAddAfterContext(boolean value) abstract;
}
class ResetGenContextStatement
extends 
SimpleStatement
{
	bindings {
		"java" -> "hub.sam.dbl.ResetGenContextStatement"
	}
	
}
class SaveGenStatement
extends 
SimpleStatement
{
	bindings {
		"java" -> "hub.sam.dbl.SaveGenStatement"
	}
	
	Expression getVariable() abstract;
	void setVariable(Expression value) abstract;
}
class ResumeGenStatement
extends 
SimpleStatement
{
	bindings {
		"java" -> "hub.sam.dbl.ResumeGenStatement"
	}
	
	Expression getVariable() abstract;
	void setVariable(Expression value) abstract;
}
class FixedMappingPart
extends 
MappingPart
{
	bindings {
		"java" -> "hub.sam.dbl.FixedMappingPart"
	}
	
	string getCode() abstract;
	void setCode(string value) abstract;
}
class DynamicMappingPart
extends 
MappingPart
{
	bindings {
		"java" -> "hub.sam.dbl.DynamicMappingPart"
	}
	
	Expression getExpr() abstract;
	void setExpr(Expression value) abstract;
}
class ExpandExpression
extends 
Expression
{
	bindings {
		"java" -> "hub.sam.dbl.ExpandExpression"
	}
	
	Expression getMetaObject() abstract;
	void setMetaObject(Expression value) abstract;
}
class ExpandStatement
extends 
Statement
{
	bindings {
		"java" -> "hub.sam.dbl.ExpandStatement"
	}
	
	Expression getMetaObject() abstract;
	void setMetaObject(Expression value) abstract;
	Expression getLocation() abstract;
	void setLocation(Expression value) abstract;
}
class CodeQuoteExpression
extends 
Expression
{
	bindings {
		"java" -> "hub.sam.dbl.CodeQuoteExpression"
	}
	
	QuotedCode getQuotedCode() abstract;
	void setQuotedCode(QuotedCode value) abstract;
}
class QuotedCode
extends EObject
{
	bindings {
		"java" -> "hub.sam.dbl.QuotedCode"
	}
	
}
class QuotedExpression
extends 
QuotedCode
{
	bindings {
		"java" -> "hub.sam.dbl.QuotedExpression"
	}
	
	Expression getExpression() abstract;
	void setExpression(Expression value) abstract;
}
class QuotedStatements
extends 
QuotedCode
{
	bindings {
		"java" -> "hub.sam.dbl.QuotedStatements"
	}
	
	List getStatements() abstract;
}
class QuotedClassContent
extends 
QuotedCode,
ClassSimilar
{
	bindings {
		"java" -> "hub.sam.dbl.QuotedClassContent"
	}
	
}
class QuotedModuleContent
extends 
QuotedCode,
Module
{
	bindings {
		"java" -> "hub.sam.dbl.QuotedModuleContent"
	}
	
}
class Pattern
extends 
NamedElement
{
	bindings {
		"java" -> "hub.sam.dbl.Pattern"
	}
	
	boolean isTop() abstract;
	void setTop(boolean value) abstract;
	Parameter getContext() abstract;
	void setContext(Parameter value) abstract;
	Statement getBody() abstract;
	void setBody(Statement value) abstract;
}
class TestStatement
extends 
Statement
{
	bindings {
		"java" -> "hub.sam.dbl.TestStatement"
	}
	
	int getValue() abstract;
	void setValue(int value) abstract;
}

}
