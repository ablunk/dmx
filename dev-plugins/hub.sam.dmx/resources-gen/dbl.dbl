#import "stdlib"
#import "ecore"

module dbl;

interface Construct extends EObject {
	bindings { "java" -> "hub.sam.dbl.Construct" }
	
	ExpandExpr getExpandExpr();
}

interface ExtensibleElement extends NamedElement, Construct {
	bindings { "java" -> "hub.sam.dbl.ExtensibleElement" }
	
	string getConcreteSyntax();
	boolean isInstanceOfExtensionDefinition();
}

interface Model extends EObject {
	bindings { "java" -> "hub.sam.dbl.Model" }
	
	EList getImports();
	Module getModule();
}

interface Import extends EObject {
	bindings { "java" -> "hub.sam.dbl.Import" }
	
	string getFile();
	Model getModel();
}

interface Module extends NamedElement, ConstructiveExtensionAtContentExtensionPoint, Construct {
	bindings { "java" -> "hub.sam.dbl.Module" }
	
	EList getClassifiers();
	EList getExtensions();
	EList getExtensionSemantics();
	EList getFunctions();
	EList getVariables();
}

interface Annotation extends NamedElement {
	bindings { "java" -> "hub.sam.dbl.Annotation" }
	
	EList getItems();
}

interface AnnotationItem extends EObject {
	bindings { "java" -> "hub.sam.dbl.AnnotationItem" }
	
	string getKey();
	string getValue();
}

interface AnnotateableElement extends EObject {
	bindings { "java" -> "hub.sam.dbl.AnnotateableElement" }
	
	EList getAnnotations();
}

interface ConstructiveExtension extends ExtensibleElement {
	bindings { "java" -> "hub.sam.dbl.ConstructiveExtension" }
	
}

interface ConstructiveExtensionAtContentExtensionPoint extends EObject {
	bindings { "java" -> "hub.sam.dbl.ConstructiveExtensionAtContentExtensionPoint" }
	
	EList getContentExtensions();
}

interface ModuleContentExtension extends ConstructiveExtension {
	bindings { "java" -> "hub.sam.dbl.ModuleContentExtension" }
	
}

interface ClassContentExtension extends ConstructiveExtension {
	bindings { "java" -> "hub.sam.dbl.ClassContentExtension" }
	
}

interface Type extends EObject {
	bindings { "java" -> "hub.sam.dbl.Type" }
	
	EList getArrayDimensions();
}

interface TypedElement extends EObject {
	bindings { "java" -> "hub.sam.dbl.TypedElement" }
	
	PrimitiveType getPrimitiveType();
	EList getTypeArrayDimensions();
	IdExpr getClassifierType();
}

interface ArrayDimension extends EObject {
	bindings { "java" -> "hub.sam.dbl.ArrayDimension" }
	
	Expression getSize();
}

interface PrimitiveType extends Type {
	bindings { "java" -> "hub.sam.dbl.PrimitiveType" }
	
}

interface VoidType extends PrimitiveType {
	bindings { "java" -> "hub.sam.dbl.VoidType" }
	
}

interface IntType extends PrimitiveType {
	bindings { "java" -> "hub.sam.dbl.IntType" }
	
}

interface BoolType extends PrimitiveType {
	bindings { "java" -> "hub.sam.dbl.BoolType" }
	
}

interface DoubleType extends PrimitiveType {
	bindings { "java" -> "hub.sam.dbl.DoubleType" }
	
}

interface StringType extends PrimitiveType {
	bindings { "java" -> "hub.sam.dbl.StringType" }
	
}

interface Function extends NamedElement, TypedElement, LocalScope {
	bindings { "java" -> "hub.sam.dbl.Function" }
	
	EList getParameters();
	boolean isClass();
	boolean isAbstract();
	boolean isDetached();
}

interface NativeBinding extends EObject {
	bindings { "java" -> "hub.sam.dbl.NativeBinding" }
	
	string getTargetLanguage();
	string getTargetType();
}

interface NativeType extends Type {
	bindings { "java" -> "hub.sam.dbl.NativeType" }
	
	EList getBindings();
}

interface Classifier extends NamedElement, ConstructiveExtensionAtContentExtensionPoint, Concept, Construct, AnnotateableElement {
	bindings { "java" -> "hub.sam.dbl.Classifier" }
	
	EList getSuperInterfaces();
	EList getAttributes();
	EList getConstructors();
	EList getMethods();
}

interface Interface extends Classifier, NativeType {
	bindings { "java" -> "hub.sam.dbl.Interface" }
	
}

interface Class extends Classifier {
	bindings { "java" -> "hub.sam.dbl.Class" }
	
	Class getSuperClass();
}

interface ActiveClass extends Class {
	bindings { "java" -> "hub.sam.dbl.ActiveClass" }
	
	LocalScope getActionsBlock();
}

interface Constructor extends LocalScope {
	bindings { "java" -> "hub.sam.dbl.Constructor" }
	
	EList getInitializers();
	EList getParameters();
	Classifier getOwningClass();
}

interface SuperObjectInitializer extends EObject {
	bindings { "java" -> "hub.sam.dbl.SuperObjectInitializer" }
	
	Class getClass();
	EList getArguments();
}

interface AbstractVariable extends NamedElement, TypedElement, AnnotateableElement {
	bindings { "java" -> "hub.sam.dbl.AbstractVariable" }
	
}

interface Variable extends AbstractVariable, SimpleStatement {
	bindings { "java" -> "hub.sam.dbl.Variable" }
	
	boolean isClass();
	Expression getInitialValue();
}

interface ControlVariable extends Variable {
	bindings { "java" -> "hub.sam.dbl.ControlVariable" }
	
}

interface Parameter extends AbstractVariable {
	bindings { "java" -> "hub.sam.dbl.Parameter" }
	
}

interface NamedElement extends EObject {
	bindings { "java" -> "hub.sam.dbl.NamedElement" }
	
	string getName();
}

interface Statement extends ExtensibleElement, AnnotateableElement {
	bindings { "java" -> "hub.sam.dbl.Statement" }
	
}

interface LoopStatement extends Statement {
	bindings { "java" -> "hub.sam.dbl.LoopStatement" }
	
}

interface SimpleStatement extends Statement {
	bindings { "java" -> "hub.sam.dbl.SimpleStatement" }
	
}

interface Assignment extends SimpleStatement {
	bindings { "java" -> "hub.sam.dbl.Assignment" }
	
	VariableAccess getVariable();
	Expression getValue();
}

interface FunctionCall extends SimpleStatement {
	bindings { "java" -> "hub.sam.dbl.FunctionCall" }
	
	IdExpr getCallIdExpr();
}

interface Return extends SimpleStatement {
	bindings { "java" -> "hub.sam.dbl.Return" }
	
	Expression getValue();
}

interface WaitUntil extends SimpleStatement {
	bindings { "java" -> "hub.sam.dbl.WaitUntil" }
	
	Expression getCondition();
}

interface Yield extends SimpleStatement {
	bindings { "java" -> "hub.sam.dbl.Yield" }
	
}

interface YieldTo extends SimpleStatement {
	bindings { "java" -> "hub.sam.dbl.YieldTo" }
	
	Expression getObjectAccess();
}

interface Wait extends SimpleStatement {
	bindings { "java" -> "hub.sam.dbl.Wait" }
	
}

interface Reactivate extends SimpleStatement {
	bindings { "java" -> "hub.sam.dbl.Reactivate" }
	
	Expression getObjectAccess();
}

interface ActivateObject extends SimpleStatement {
	bindings { "java" -> "hub.sam.dbl.ActivateObject" }
	
	Expression getObjectAccess();
	int getPriority_();
}

interface Advance extends SimpleStatement {
	bindings { "java" -> "hub.sam.dbl.Advance" }
	
	Expression getTime();
}

interface Print extends SimpleStatement {
	bindings { "java" -> "hub.sam.dbl.Print" }
	
	EList getOutputs();
}

interface IfStatement extends Statement {
	bindings { "java" -> "hub.sam.dbl.IfStatement" }
	
	Expression getCondition();
	Statement getTrueCase();
	Statement getFalseCase();
}

interface LocalScope extends EObject {
	bindings { "java" -> "hub.sam.dbl.LocalScope" }
	
	EList getStatements();
}

interface LocalScopeStatement extends SimpleStatement, LocalScope {
	bindings { "java" -> "hub.sam.dbl.LocalScopeStatement" }
	
}

interface ForStatement extends LoopStatement, LocalScope {
	bindings { "java" -> "hub.sam.dbl.ForStatement" }
	
	Expression getTermination();
	Assignment getIncrement();
	Statement getBody();
}

interface WhileStatement extends LoopStatement {
	bindings { "java" -> "hub.sam.dbl.WhileStatement" }
	
	Expression getCondition();
	Statement getBody();
}

interface SwitchStatement extends SimpleStatement {
	bindings { "java" -> "hub.sam.dbl.SwitchStatement" }
	
	VariableAccess getVariable();
	EList getCases();
	SwitchCase getDefaultCase();
}

interface SwitchCase extends EObject {
	bindings { "java" -> "hub.sam.dbl.SwitchCase" }
	
	Expression getValue();
	EList getBody();
}

interface BreakStatement extends SimpleStatement {
	bindings { "java" -> "hub.sam.dbl.BreakStatement" }
	
}

interface ContinueStatement extends SimpleStatement {
	bindings { "java" -> "hub.sam.dbl.ContinueStatement" }
	
}

interface Expression extends TypedElement, ExtensibleElement {
	bindings { "java" -> "hub.sam.dbl.Expression" }
	
}

interface L1Expr extends Expression {
	bindings { "java" -> "hub.sam.dbl.L1Expr" }
	
}

interface L2Expr extends Expression {
	bindings { "java" -> "hub.sam.dbl.L2Expr" }
	
}

interface L3Expr extends Expression {
	bindings { "java" -> "hub.sam.dbl.L3Expr" }
	
}

interface L4Expr extends Expression {
	bindings { "java" -> "hub.sam.dbl.L4Expr" }
	
}

interface L5Expr extends Expression {
	bindings { "java" -> "hub.sam.dbl.L5Expr" }
	
}

interface L6Expr extends Expression {
	bindings { "java" -> "hub.sam.dbl.L6Expr" }
	
}

interface L7Expr extends Expression {
	bindings { "java" -> "hub.sam.dbl.L7Expr" }
	
}

interface L8Expr extends Expression {
	bindings { "java" -> "hub.sam.dbl.L8Expr" }
	
}

interface L9Expr extends Expression {
	bindings { "java" -> "hub.sam.dbl.L9Expr" }
	
}

interface BinaryOperator extends Expression {
	bindings { "java" -> "hub.sam.dbl.BinaryOperator" }
	
	Expression getOp1();
	Expression getOp2();
}

interface UnaryOperator extends Expression {
	bindings { "java" -> "hub.sam.dbl.UnaryOperator" }
	
	Expression getOp();
}

interface Or extends BinaryOperator, L8Expr {
	bindings { "java" -> "hub.sam.dbl.Or" }
	
}

interface And extends BinaryOperator, L7Expr {
	bindings { "java" -> "hub.sam.dbl.And" }
	
}

interface NotEqual extends BinaryOperator, L6Expr {
	bindings { "java" -> "hub.sam.dbl.NotEqual" }
	
}

interface Equal extends BinaryOperator, L6Expr {
	bindings { "java" -> "hub.sam.dbl.Equal" }
	
}

interface Greater extends BinaryOperator, L5Expr {
	bindings { "java" -> "hub.sam.dbl.Greater" }
	
}

interface GreaterEqual extends BinaryOperator, L5Expr {
	bindings { "java" -> "hub.sam.dbl.GreaterEqual" }
	
}

interface Less extends BinaryOperator, L5Expr {
	bindings { "java" -> "hub.sam.dbl.Less" }
	
}

interface LessEqual extends BinaryOperator, L5Expr {
	bindings { "java" -> "hub.sam.dbl.LessEqual" }
	
}

interface InstanceOf extends BinaryOperator, L5Expr {
	bindings { "java" -> "hub.sam.dbl.InstanceOf" }
	
}

interface Plus extends BinaryOperator, L4Expr {
	bindings { "java" -> "hub.sam.dbl.Plus" }
	
}

interface Minus extends BinaryOperator, L4Expr {
	bindings { "java" -> "hub.sam.dbl.Minus" }
	
}

interface Mul extends BinaryOperator, L3Expr {
	bindings { "java" -> "hub.sam.dbl.Mul" }
	
}

interface Mod extends BinaryOperator, L3Expr {
	bindings { "java" -> "hub.sam.dbl.Mod" }
	
}

interface Div extends BinaryOperator, L3Expr {
	bindings { "java" -> "hub.sam.dbl.Div" }
	
}

interface Neg extends UnaryOperator, L2Expr {
	bindings { "java" -> "hub.sam.dbl.Neg" }
	
}

interface Not extends UnaryOperator, L2Expr {
	bindings { "java" -> "hub.sam.dbl.Not" }
	
}

interface Cast extends UnaryOperator, TypedElement, L2Expr {
	bindings { "java" -> "hub.sam.dbl.Cast" }
	
}

interface CreateObject extends L1Expr, TypedElement {
	bindings { "java" -> "hub.sam.dbl.CreateObject" }
	
}

interface NullLiteral extends L1Expr {
	bindings { "java" -> "hub.sam.dbl.NullLiteral" }
	
}

interface TimeLiteral extends L1Expr {
	bindings { "java" -> "hub.sam.dbl.TimeLiteral" }
	
}

interface StringLiteral extends L1Expr {
	bindings { "java" -> "hub.sam.dbl.StringLiteral" }
	
	string getValue();
}

interface IntLiteral extends L1Expr {
	bindings { "java" -> "hub.sam.dbl.IntLiteral" }
	
	int getValue();
}

interface TrueLiteral extends L1Expr {
	bindings { "java" -> "hub.sam.dbl.TrueLiteral" }
	
}

interface FalseLiteral extends L1Expr {
	bindings { "java" -> "hub.sam.dbl.FalseLiteral" }
	
}

interface DoubleLiteral extends L1Expr {
	bindings { "java" -> "hub.sam.dbl.DoubleLiteral" }
	
	double getValue();
}

interface ExpandExpr extends Expression {
	bindings { "java" -> "hub.sam.dbl.ExpandExpr" }
	
	Expression getExpr();
}

interface ParseExpr extends Expression {
	bindings { "java" -> "hub.sam.dbl.ParseExpr" }
	
	Construct getAstPart();
}

interface PredefinedId extends EObject {
	bindings { "java" -> "hub.sam.dbl.PredefinedId" }
	
}

interface MeLiteral extends PredefinedId {
	bindings { "java" -> "hub.sam.dbl.MeLiteral" }
	
}

interface SuperLiteral extends PredefinedId {
	bindings { "java" -> "hub.sam.dbl.SuperLiteral" }
	
}

interface MetaLiteral extends PredefinedId {
	bindings { "java" -> "hub.sam.dbl.MetaLiteral" }
	
}

interface TypeLiteral extends PredefinedId {
	bindings { "java" -> "hub.sam.dbl.TypeLiteral" }
	
}

interface SizeOfArray extends PredefinedId {
	bindings { "java" -> "hub.sam.dbl.SizeOfArray" }
	
}

interface AnnotationLiteral extends PredefinedId, Annotation {
	bindings { "java" -> "hub.sam.dbl.AnnotationLiteral" }
	
}

interface IdExpr extends L1Expr {
	bindings { "java" -> "hub.sam.dbl.IdExpr" }
	
	IdExpr getParentIdExpr();
	NamedElement getReferencedElement();
	PredefinedId getPredefinedId();
	EList getArrayIndex();
	CallPart getCallPart();
}

interface CallPart extends EObject {
	bindings { "java" -> "hub.sam.dbl.CallPart" }
	
	EList getCallArguments();
}

interface ElementAccess extends Expression {
	bindings { "java" -> "hub.sam.dbl.ElementAccess" }
	
	IdExpr getIdExpr();
}

interface VariableAccess extends ElementAccess {
	bindings { "java" -> "hub.sam.dbl.VariableAccess" }
	
}

interface MetaAccess extends VariableAccess {
	bindings { "java" -> "hub.sam.dbl.MetaAccess" }
	
}

interface TypeAccess extends ElementAccess {
	bindings { "java" -> "hub.sam.dbl.TypeAccess" }
	
}

interface Extension extends Concept, ExtensibleElement {
	bindings { "java" -> "hub.sam.dbl.Extension" }
	
	Concept getExtensionPoint();
	SyntaxDefinition getSyntaxDefinition();
}

interface ExtensionSemantics extends ExtensibleElement, LocalScope {
	bindings { "java" -> "hub.sam.dbl.ExtensionSemantics" }
	
	Extension getSyntaxDefinition();
}

interface SyntaxDefinition extends ExtensibleElement {
	bindings { "java" -> "hub.sam.dbl.SyntaxDefinition" }
	
	MetaSymbol getStartSymbol();
	EList getSymbols();
}

interface SyntaxSymbolClassifier extends NamedElement, ExtensibleElement {
	bindings { "java" -> "hub.sam.dbl.SyntaxSymbolClassifier" }
	
}

interface ComplexSymbol extends SyntaxSymbolClassifier {
	bindings { "java" -> "hub.sam.dbl.ComplexSymbol" }
	
}

interface Concept extends ComplexSymbol {
	bindings { "java" -> "hub.sam.dbl.Concept" }
	
}

interface MetaSymbol extends NamedElement, ComplexSymbol {
	bindings { "java" -> "hub.sam.dbl.MetaSymbol" }
	
	SyntaxExpression getPossibleSyntax();
}

interface SyntaxExpression extends EObject {
	bindings { "java" -> "hub.sam.dbl.SyntaxExpression" }
	
}

interface L3SyntaxExpression extends SyntaxExpression {
	bindings { "java" -> "hub.sam.dbl.L3SyntaxExpression" }
	
}

interface L2SyntaxExpression extends SyntaxExpression {
	bindings { "java" -> "hub.sam.dbl.L2SyntaxExpression" }
	
}

interface SymbolSequence extends L2SyntaxExpression {
	bindings { "java" -> "hub.sam.dbl.SymbolSequence" }
	
	EList getSequence();
}

interface L1SyntaxExpression extends SyntaxExpression {
	bindings { "java" -> "hub.sam.dbl.L1SyntaxExpression" }
	
}

interface StructuralSymbolReference extends NamedElement, PlainSymbolReference {
	bindings { "java" -> "hub.sam.dbl.StructuralSymbolReference" }
	
	boolean isList();
	boolean isComposite();
	boolean isLocalScopedReference();
	boolean isGlobalScopedReference();
}

interface PlainSymbolReference extends L1SyntaxExpression {
	bindings { "java" -> "hub.sam.dbl.PlainSymbolReference" }
	
	SyntaxSymbolClassifier getClassifier();
	SyntaxSymbolClassifier getOwnedClassifier();
	SyntaxSymbolClassifier getReferencedClassifier();
}

interface ElementarySymbol extends SyntaxSymbolClassifier {
	bindings { "java" -> "hub.sam.dbl.ElementarySymbol" }
	
}

interface IdSymbol extends ElementarySymbol {
	bindings { "java" -> "hub.sam.dbl.IdSymbol" }
	
}

interface IntSymbol extends ElementarySymbol {
	bindings { "java" -> "hub.sam.dbl.IntSymbol" }
	
}

interface StringSymbol extends ElementarySymbol {
	bindings { "java" -> "hub.sam.dbl.StringSymbol" }
	
}

interface Keyword extends ElementarySymbol {
	bindings { "java" -> "hub.sam.dbl.Keyword" }
	
	string getKeyword();
}

interface MetaExpr extends Expression {
	bindings { "java" -> "hub.sam.dbl.MetaExpr" }
	
	Expression getExpr();
}

interface TargetStatement extends SimpleStatement {
	bindings { "java" -> "hub.sam.dbl.TargetStatement" }
	
	Statement getBody();
}

interface CreateIdStatement extends Variable {
	bindings { "java" -> "hub.sam.dbl.CreateIdStatement" }
	
}

interface ExpansionStatement extends SimpleStatement {
	bindings { "java" -> "hub.sam.dbl.ExpansionStatement" }
	
	Expression getDifferingContext();
	EList getParts();
	EList getExprs();
}

interface ExpansionPart extends EObject {
	bindings { "java" -> "hub.sam.dbl.ExpansionPart" }
	
}

interface ExpandTextPart extends ExpansionPart {
	bindings { "java" -> "hub.sam.dbl.ExpandTextPart" }
	
	string getText();
}

interface ExpandVariablePart extends ExpansionPart {
	bindings { "java" -> "hub.sam.dbl.ExpandVariablePart" }
	
	Expression getExpr();
}

interface ExpandExpression extends Expression {
	bindings { "java" -> "hub.sam.dbl.ExpandExpression" }
	
	Expression getMetaObject();
}

interface ExpandStatement extends Statement {
	bindings { "java" -> "hub.sam.dbl.ExpandStatement" }
	
	Expression getMetaObject();
	Expression getLocation();
}

interface CodeQuoteExpression extends Expression {
	bindings { "java" -> "hub.sam.dbl.CodeQuoteExpression" }
	
	QuotedCode getQuotedCode();
}

interface QuotedCode extends EObject {
	bindings { "java" -> "hub.sam.dbl.QuotedCode" }
	
}

interface QuotedExpression extends QuotedCode {
	bindings { "java" -> "hub.sam.dbl.QuotedExpression" }
	
	Expression getExpression();
}

interface QuotedStatements extends QuotedCode {
	bindings { "java" -> "hub.sam.dbl.QuotedStatements" }
	
	EList getStatements();
}

interface QuotedClassContent extends QuotedCode, Class {
	bindings { "java" -> "hub.sam.dbl.QuotedClassContent" }
	
}

interface QuotedModuleContent extends QuotedCode, Module {
	bindings { "java" -> "hub.sam.dbl.QuotedModuleContent" }
	
}

interface Pattern extends NamedElement {
	bindings { "java" -> "hub.sam.dbl.Pattern" }
	
	boolean isTop();
	Parameter getContext();
	Statement getBody();
}

interface TestStatement extends Statement {
	bindings { "java" -> "hub.sam.dbl.TestStatement" }
	
	int getValue();
}

