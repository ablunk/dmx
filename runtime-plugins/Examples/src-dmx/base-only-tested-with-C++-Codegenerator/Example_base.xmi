<?xml version="1.0" encoding="ASCII"?>
<dbl:Model xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dbl="http://www.informatik.hu-berlin.de/sam/dbl">
  <modules name="std">
    <classes name="UniformInt" concreteSyntax="class UniformInt{&#xD;&#xA;&#x9;&#x9;bindings{&#xD;&#xA;&#x9;&#x9;&#x9;&quot;c++&quot;->&quot;uIntGen&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&quot;desmoj&quot; -> &quot;hub.sam.dmx.javasim.desmoj.dist.IntDistUniform&quot;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;new(string name, int min, int max){}&#xD;&#xA;&#x9;&#x9;int sample()abstract;&#xD;&#xA;&#x9;}">
      <bindings targetLanguage="c++" targetType="uIntGen"/>
      <bindings targetLanguage="desmoj" targetType="hub.sam.dmx.javasim.desmoj.dist.IntDistUniform"/>
      <constructors>
        <parameters name="name">
          <primitiveType xsi:type="dbl:StringType"/>
        </parameters>
        <parameters name="min">
          <primitiveType xsi:type="dbl:IntType"/>
        </parameters>
        <parameters name="max">
          <primitiveType xsi:type="dbl:IntType"/>
        </parameters>
      </constructors>
      <methods name="sample" abstract="true">
        <primitiveType xsi:type="dbl:IntType"/>
      </methods>
    </classes>
    <classes name="A" concreteSyntax="class A{&#xD;&#xA;&#x9;&#x9;int x = 1;&#xD;&#xA;&#x9;&#x9;int getInt(){return x;}&#xD;&#xA;&#x9;&#x9;string toString(){return &quot;&quot;+x;}&#xD;&#xA;&#x9;}">
      <attributes name="x" concreteSyntax="int x = 1">
        <primitiveType xsi:type="dbl:IntType"/>
        <initialValue xsi:type="dbl:IntLiteral" concreteSyntax="1" value="1"/>
      </attributes>
      <methods name="getInt">
        <primitiveType xsi:type="dbl:IntType"/>
        <statements xsi:type="dbl:Return" concreteSyntax="return x">
          <value xsi:type="dbl:IdExpr" concreteSyntax="x" referencedElement="//@modules.0/@classes.1/@attributes.0"/>
        </statements>
      </methods>
      <methods name="toString">
        <primitiveType xsi:type="dbl:StringType"/>
        <statements xsi:type="dbl:Return" concreteSyntax="return &quot;&quot;+x">
          <value xsi:type="dbl:Plus" concreteSyntax="&quot;&quot;+x">
            <op1 xsi:type="dbl:StringLiteral" concreteSyntax="&quot;&quot;" value=""/>
            <op2 xsi:type="dbl:IdExpr" concreteSyntax="x" referencedElement="//@modules.0/@classes.1/@attributes.0"/>
          </value>
        </statements>
      </methods>
    </classes>
    <classes name="B" concreteSyntax="class B extends A{&#xD;&#xA;&#x9;&#x9;int x = 2;&#xD;&#xA;&#x9;&#x9;int getInt(){return x;}&#xD;&#xA;&#x9;&#x9;string toString(){return &quot;&quot;+x;}&#xD;&#xA;&#x9;}">
      <superClasses class="//@modules.0/@classes.1"/>
      <attributes name="x" concreteSyntax="int x = 2">
        <primitiveType xsi:type="dbl:IntType"/>
        <initialValue xsi:type="dbl:IntLiteral" concreteSyntax="2" value="2"/>
      </attributes>
      <methods name="getInt">
        <primitiveType xsi:type="dbl:IntType"/>
        <statements xsi:type="dbl:Return" concreteSyntax="return x">
          <value xsi:type="dbl:IdExpr" concreteSyntax="x" referencedElement="//@modules.0/@classes.2/@attributes.0"/>
        </statements>
      </methods>
      <methods name="toString">
        <primitiveType xsi:type="dbl:StringType"/>
        <statements xsi:type="dbl:Return" concreteSyntax="return &quot;&quot;+x">
          <value xsi:type="dbl:Plus" concreteSyntax="&quot;&quot;+x">
            <op1 xsi:type="dbl:StringLiteral" concreteSyntax="&quot;&quot;" value=""/>
            <op2 xsi:type="dbl:IdExpr" concreteSyntax="x" referencedElement="//@modules.0/@classes.2/@attributes.0"/>
          </value>
        </statements>
      </methods>
    </classes>
    <functions name="main">
      <primitiveType xsi:type="dbl:VoidType"/>
      <statements xsi:type="dbl:Variable" name="test" concreteSyntax="double array[][] test = new double array[15][8]">
        <primitiveType xsi:type="dbl:DoubleType"/>
        <typeArrayDimensions/>
        <typeArrayDimensions/>
        <initialValue xsi:type="dbl:CreateObject" concreteSyntax="new double array[15][8]">
          <primitiveType xsi:type="dbl:DoubleType"/>
          <typeArrayDimensions>
            <size xsi:type="dbl:IntLiteral" concreteSyntax="15" value="15"/>
          </typeArrayDimensions>
          <typeArrayDimensions>
            <size xsi:type="dbl:IntLiteral" concreteSyntax="8" value="8"/>
          </typeArrayDimensions>
        </initialValue>
      </statements>
      <statements xsi:type="dbl:ForStatement" concreteSyntax="for(int i = 0; i &lt; test.length;i=i+1){&#xD;&#xA;&#x9;&#x9;print test.length+&quot;\n&quot;;&#xD;&#xA;&#x9;&#x9;for(int j = 0; j &lt; test[i].length;j=j+1){&#xD;&#xA;&#x9;&#x9;&#x9;print test[i].length+&quot;\n&quot;;&#xD;&#xA;&#x9;&#x9;&#x9;//print &quot;&quot;+ 3.5*(i as double)+&quot;\n&quot;;&#xD;&#xA;&#x9;&#x9;&#x9;//test[i][j] = 3.5*(i as double);&#xD;&#xA;&#x9;&#x9;&#x9;//print test[i][j];&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}">
        <statements xsi:type="dbl:Variable" name="i" concreteSyntax="int i = 0">
          <primitiveType xsi:type="dbl:IntType"/>
          <initialValue xsi:type="dbl:IntLiteral" concreteSyntax="0"/>
        </statements>
        <termination xsi:type="dbl:Less" concreteSyntax="i &lt; test.length">
          <op1 xsi:type="dbl:IdExpr" concreteSyntax="i" referencedElement="//@modules.0/@functions.0/@statements.1/@statements.0"/>
          <op2 xsi:type="dbl:IdExpr" concreteSyntax="test.length">
            <parentIdExpr concreteSyntax="test" referencedElement="//@modules.0/@functions.0/@statements.0"/>
            <predefinedId xsi:type="dbl:SizeOfArray"/>
          </op2>
        </termination>
        <increment concreteSyntax="i=i+1">
          <variable concreteSyntax="i">
            <idExpr concreteSyntax="i" referencedElement="//@modules.0/@functions.0/@statements.1/@statements.0"/>
          </variable>
          <value xsi:type="dbl:Plus" concreteSyntax="i+1">
            <op1 xsi:type="dbl:IdExpr" concreteSyntax="i" referencedElement="//@modules.0/@functions.0/@statements.1/@statements.0"/>
            <op2 xsi:type="dbl:IntLiteral" concreteSyntax="1" value="1"/>
          </value>
        </increment>
        <body xsi:type="dbl:LocalScopeStatement" concreteSyntax="{&#xD;&#xA;&#x9;&#x9;print test.length+&quot;\n&quot;;&#xD;&#xA;&#x9;&#x9;for(int j = 0; j &lt; test[i].length;j=j+1){&#xD;&#xA;&#x9;&#x9;&#x9;print test[i].length+&quot;\n&quot;;&#xD;&#xA;&#x9;&#x9;&#x9;//print &quot;&quot;+ 3.5*(i as double)+&quot;\n&quot;;&#xD;&#xA;&#x9;&#x9;&#x9;//test[i][j] = 3.5*(i as double);&#xD;&#xA;&#x9;&#x9;&#x9;//print test[i][j];&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}">
          <statements xsi:type="dbl:Print" concreteSyntax="print test.length+&quot;\n&quot;">
            <outputs xsi:type="dbl:Plus" concreteSyntax="test.length+&quot;\n&quot;">
              <op1 xsi:type="dbl:IdExpr" concreteSyntax="test.length">
                <parentIdExpr concreteSyntax="test" referencedElement="//@modules.0/@functions.0/@statements.0"/>
                <predefinedId xsi:type="dbl:SizeOfArray"/>
              </op1>
              <op2 xsi:type="dbl:StringLiteral" concreteSyntax="&quot;\n&quot;" value="\n"/>
            </outputs>
          </statements>
          <statements xsi:type="dbl:ForStatement" concreteSyntax="for(int j = 0; j &lt; test[i].length;j=j+1){&#xD;&#xA;&#x9;&#x9;&#x9;print test[i].length+&quot;\n&quot;;&#xD;&#xA;&#x9;&#x9;&#x9;//print &quot;&quot;+ 3.5*(i as double)+&quot;\n&quot;;&#xD;&#xA;&#x9;&#x9;&#x9;//test[i][j] = 3.5*(i as double);&#xD;&#xA;&#x9;&#x9;&#x9;//print test[i][j];&#xD;&#xA;&#x9;&#x9;}">
            <statements xsi:type="dbl:Variable" name="j" concreteSyntax="int j = 0">
              <primitiveType xsi:type="dbl:IntType"/>
              <initialValue xsi:type="dbl:IntLiteral" concreteSyntax="0"/>
            </statements>
            <termination xsi:type="dbl:Less" concreteSyntax="j &lt; test[i].length">
              <op1 xsi:type="dbl:IdExpr" concreteSyntax="j" referencedElement="//@modules.0/@functions.0/@statements.1/@body/@statements.1/@statements.0"/>
              <op2 xsi:type="dbl:IdExpr" concreteSyntax="test[i].length">
                <parentIdExpr concreteSyntax="test[i]" referencedElement="//@modules.0/@functions.0/@statements.0">
                  <arrayIndex xsi:type="dbl:IdExpr" concreteSyntax="i" referencedElement="//@modules.0/@functions.0/@statements.1/@statements.0"/>
                </parentIdExpr>
                <predefinedId xsi:type="dbl:SizeOfArray"/>
              </op2>
            </termination>
            <increment concreteSyntax="j=j+1">
              <variable concreteSyntax="j">
                <idExpr concreteSyntax="j" referencedElement="//@modules.0/@functions.0/@statements.1/@body/@statements.1/@statements.0"/>
              </variable>
              <value xsi:type="dbl:Plus" concreteSyntax="j+1">
                <op1 xsi:type="dbl:IdExpr" concreteSyntax="j" referencedElement="//@modules.0/@functions.0/@statements.1/@body/@statements.1/@statements.0"/>
                <op2 xsi:type="dbl:IntLiteral" concreteSyntax="1" value="1"/>
              </value>
            </increment>
            <body xsi:type="dbl:LocalScopeStatement" concreteSyntax="{&#xD;&#xA;&#x9;&#x9;&#x9;print test[i].length+&quot;\n&quot;;&#xD;&#xA;&#x9;&#x9;&#x9;//print &quot;&quot;+ 3.5*(i as double)+&quot;\n&quot;;&#xD;&#xA;&#x9;&#x9;&#x9;//test[i][j] = 3.5*(i as double);&#xD;&#xA;&#x9;&#x9;&#x9;//print test[i][j];&#xD;&#xA;&#x9;&#x9;}">
              <statements xsi:type="dbl:Print" concreteSyntax="print test[i].length+&quot;\n&quot;">
                <outputs xsi:type="dbl:Plus" concreteSyntax="test[i].length+&quot;\n&quot;">
                  <op1 xsi:type="dbl:IdExpr" concreteSyntax="test[i].length">
                    <parentIdExpr concreteSyntax="test[i]" referencedElement="//@modules.0/@functions.0/@statements.0">
                      <arrayIndex xsi:type="dbl:IdExpr" concreteSyntax="i" referencedElement="//@modules.0/@functions.0/@statements.1/@statements.0"/>
                    </parentIdExpr>
                    <predefinedId xsi:type="dbl:SizeOfArray"/>
                  </op1>
                  <op2 xsi:type="dbl:StringLiteral" concreteSyntax="&quot;\n&quot;" value="\n"/>
                </outputs>
              </statements>
            </body>
          </statements>
        </body>
      </statements>
      <statements xsi:type="dbl:Print" concreteSyntax="print &quot;_________________________________ \n&quot;">
        <outputs xsi:type="dbl:StringLiteral" concreteSyntax="&quot;_________________________________ \n&quot;" value="_________________________________ \n"/>
      </statements>
      <statements xsi:type="dbl:ForStatement" concreteSyntax="for(int p = 0; p &lt; test.length;p=p+1){&#xD;&#xA;&#x9;&#x9;for(int k = 0; k &lt; test[k].length;k=k+1){&#xD;&#xA;&#x9;&#x9;&#x9;//print test[p][k]+&quot;\n&quot;;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}">
        <statements xsi:type="dbl:Variable" name="p" concreteSyntax="int p = 0">
          <primitiveType xsi:type="dbl:IntType"/>
          <initialValue xsi:type="dbl:IntLiteral" concreteSyntax="0"/>
        </statements>
        <termination xsi:type="dbl:Less" concreteSyntax="p &lt; test.length">
          <op1 xsi:type="dbl:IdExpr" concreteSyntax="p" referencedElement="//@modules.0/@functions.0/@statements.3/@statements.0"/>
          <op2 xsi:type="dbl:IdExpr" concreteSyntax="test.length">
            <parentIdExpr concreteSyntax="test" referencedElement="//@modules.0/@functions.0/@statements.0"/>
            <predefinedId xsi:type="dbl:SizeOfArray"/>
          </op2>
        </termination>
        <increment concreteSyntax="p=p+1">
          <variable concreteSyntax="p">
            <idExpr concreteSyntax="p" referencedElement="//@modules.0/@functions.0/@statements.3/@statements.0"/>
          </variable>
          <value xsi:type="dbl:Plus" concreteSyntax="p+1">
            <op1 xsi:type="dbl:IdExpr" concreteSyntax="p" referencedElement="//@modules.0/@functions.0/@statements.3/@statements.0"/>
            <op2 xsi:type="dbl:IntLiteral" concreteSyntax="1" value="1"/>
          </value>
        </increment>
        <body xsi:type="dbl:LocalScopeStatement" concreteSyntax="{&#xD;&#xA;&#x9;&#x9;for(int k = 0; k &lt; test[k].length;k=k+1){&#xD;&#xA;&#x9;&#x9;&#x9;//print test[p][k]+&quot;\n&quot;;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}">
          <statements xsi:type="dbl:ForStatement" concreteSyntax="for(int k = 0; k &lt; test[k].length;k=k+1){&#xD;&#xA;&#x9;&#x9;&#x9;//print test[p][k]+&quot;\n&quot;;&#xD;&#xA;&#x9;&#x9;}">
            <statements xsi:type="dbl:Variable" name="k" concreteSyntax="int k = 0">
              <primitiveType xsi:type="dbl:IntType"/>
              <initialValue xsi:type="dbl:IntLiteral" concreteSyntax="0"/>
            </statements>
            <termination xsi:type="dbl:Less" concreteSyntax="k &lt; test[k].length">
              <op1 xsi:type="dbl:IdExpr" concreteSyntax="k" referencedElement="//@modules.0/@functions.0/@statements.3/@body/@statements.0/@statements.0"/>
              <op2 xsi:type="dbl:IdExpr" concreteSyntax="test[k].length">
                <parentIdExpr concreteSyntax="test[k]" referencedElement="//@modules.0/@functions.0/@statements.0">
                  <arrayIndex xsi:type="dbl:IdExpr" concreteSyntax="k" referencedElement="//@modules.0/@functions.0/@statements.3/@body/@statements.0/@statements.0"/>
                </parentIdExpr>
                <predefinedId xsi:type="dbl:SizeOfArray"/>
              </op2>
            </termination>
            <increment concreteSyntax="k=k+1">
              <variable concreteSyntax="k">
                <idExpr concreteSyntax="k" referencedElement="//@modules.0/@functions.0/@statements.3/@body/@statements.0/@statements.0"/>
              </variable>
              <value xsi:type="dbl:Plus" concreteSyntax="k+1">
                <op1 xsi:type="dbl:IdExpr" concreteSyntax="k" referencedElement="//@modules.0/@functions.0/@statements.3/@body/@statements.0/@statements.0"/>
                <op2 xsi:type="dbl:IntLiteral" concreteSyntax="1" value="1"/>
              </value>
            </increment>
            <body xsi:type="dbl:LocalScopeStatement" concreteSyntax="{&#xD;&#xA;&#x9;&#x9;&#x9;//print test[p][k]+&quot;\n&quot;;&#xD;&#xA;&#x9;&#x9;}"/>
          </statements>
        </body>
      </statements>
      <statements xsi:type="dbl:Print" concreteSyntax="print &quot;_________________________________ \n&quot;">
        <outputs xsi:type="dbl:StringLiteral" concreteSyntax="&quot;_________________________________ \n&quot;" value="_________________________________ \n"/>
      </statements>
      <statements xsi:type="dbl:ForStatement" concreteSyntax="for(int l = 0; l &lt; test.length;l=l+1){&#xD;&#xA;&#x9;&#x9;for(int m = 0; m &lt; test[l].length;m=m+1){&#xD;&#xA;&#x9;&#x9;&#x9;print test[l][m]+&quot;\n&quot;;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}">
        <statements xsi:type="dbl:Variable" name="l" concreteSyntax="int l = 0">
          <primitiveType xsi:type="dbl:IntType"/>
          <initialValue xsi:type="dbl:IntLiteral" concreteSyntax="0"/>
        </statements>
        <termination xsi:type="dbl:Less" concreteSyntax="l &lt; test.length">
          <op1 xsi:type="dbl:IdExpr" concreteSyntax="l" referencedElement="//@modules.0/@functions.0/@statements.5/@statements.0"/>
          <op2 xsi:type="dbl:IdExpr" concreteSyntax="test.length">
            <parentIdExpr concreteSyntax="test" referencedElement="//@modules.0/@functions.0/@statements.0"/>
            <predefinedId xsi:type="dbl:SizeOfArray"/>
          </op2>
        </termination>
        <increment concreteSyntax="l=l+1">
          <variable concreteSyntax="l">
            <idExpr concreteSyntax="l" referencedElement="//@modules.0/@functions.0/@statements.5/@statements.0"/>
          </variable>
          <value xsi:type="dbl:Plus" concreteSyntax="l+1">
            <op1 xsi:type="dbl:IdExpr" concreteSyntax="l" referencedElement="//@modules.0/@functions.0/@statements.5/@statements.0"/>
            <op2 xsi:type="dbl:IntLiteral" concreteSyntax="1" value="1"/>
          </value>
        </increment>
        <body xsi:type="dbl:LocalScopeStatement" concreteSyntax="{&#xD;&#xA;&#x9;&#x9;for(int m = 0; m &lt; test[l].length;m=m+1){&#xD;&#xA;&#x9;&#x9;&#x9;print test[l][m]+&quot;\n&quot;;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}">
          <statements xsi:type="dbl:ForStatement" concreteSyntax="for(int m = 0; m &lt; test[l].length;m=m+1){&#xD;&#xA;&#x9;&#x9;&#x9;print test[l][m]+&quot;\n&quot;;&#xD;&#xA;&#x9;&#x9;}">
            <statements xsi:type="dbl:Variable" name="m" concreteSyntax="int m = 0">
              <primitiveType xsi:type="dbl:IntType"/>
              <initialValue xsi:type="dbl:IntLiteral" concreteSyntax="0"/>
            </statements>
            <termination xsi:type="dbl:Less" concreteSyntax="m &lt; test[l].length">
              <op1 xsi:type="dbl:IdExpr" concreteSyntax="m" referencedElement="//@modules.0/@functions.0/@statements.5/@body/@statements.0/@statements.0"/>
              <op2 xsi:type="dbl:IdExpr" concreteSyntax="test[l].length">
                <parentIdExpr concreteSyntax="test[l]" referencedElement="//@modules.0/@functions.0/@statements.0">
                  <arrayIndex xsi:type="dbl:IdExpr" concreteSyntax="l" referencedElement="//@modules.0/@functions.0/@statements.5/@statements.0"/>
                </parentIdExpr>
                <predefinedId xsi:type="dbl:SizeOfArray"/>
              </op2>
            </termination>
            <increment concreteSyntax="m=m+1">
              <variable concreteSyntax="m">
                <idExpr concreteSyntax="m" referencedElement="//@modules.0/@functions.0/@statements.5/@body/@statements.0/@statements.0"/>
              </variable>
              <value xsi:type="dbl:Plus" concreteSyntax="m+1">
                <op1 xsi:type="dbl:IdExpr" concreteSyntax="m" referencedElement="//@modules.0/@functions.0/@statements.5/@body/@statements.0/@statements.0"/>
                <op2 xsi:type="dbl:IntLiteral" concreteSyntax="1" value="1"/>
              </value>
            </increment>
            <body xsi:type="dbl:LocalScopeStatement" concreteSyntax="{&#xD;&#xA;&#x9;&#x9;&#x9;print test[l][m]+&quot;\n&quot;;&#xD;&#xA;&#x9;&#x9;}">
              <statements xsi:type="dbl:Print" concreteSyntax="print test[l][m]+&quot;\n&quot;">
                <outputs xsi:type="dbl:Plus" concreteSyntax="test[l][m]+&quot;\n&quot;">
                  <op1 xsi:type="dbl:IdExpr" concreteSyntax="test[l][m]" referencedElement="//@modules.0/@functions.0/@statements.0">
                    <arrayIndex xsi:type="dbl:IdExpr" concreteSyntax="l" referencedElement="//@modules.0/@functions.0/@statements.5/@statements.0"/>
                    <arrayIndex xsi:type="dbl:IdExpr" concreteSyntax="m" referencedElement="//@modules.0/@functions.0/@statements.5/@body/@statements.0/@statements.0"/>
                  </op1>
                  <op2 xsi:type="dbl:StringLiteral" concreteSyntax="&quot;\n&quot;" value="\n"/>
                </outputs>
              </statements>
            </body>
          </statements>
        </body>
      </statements>
      <statements xsi:type="dbl:Print" concreteSyntax="print &quot;_______________________ \n&quot;">
        <outputs xsi:type="dbl:StringLiteral" concreteSyntax="&quot;_______________________ \n&quot;" value="_______________________ \n"/>
      </statements>
      <statements xsi:type="dbl:Print" concreteSyntax="print &quot;_______________________ \n&quot;">
        <outputs xsi:type="dbl:StringLiteral" concreteSyntax="&quot;_______________________ \n&quot;" value="_______________________ \n"/>
      </statements>
    </functions>
    <variables name="arrivalTime" concreteSyntax="UniformInt arrivalTime = new UniformInt(&quot;arrival1&quot;, 12, 24)">
      <classifierType concreteSyntax="UniformInt" referencedElement="//@modules.0/@classes.0"/>
      <initialValue xsi:type="dbl:CreateObject" concreteSyntax="new UniformInt(&quot;arrival1&quot;, 12, 24)">
        <classifierType concreteSyntax="UniformInt(&quot;arrival1&quot;, 12, 24)" referencedElement="//@modules.0/@classes.0">
          <callPart>
            <callArguments xsi:type="dbl:StringLiteral" concreteSyntax="&quot;arrival1&quot;" value="arrival1"/>
            <callArguments xsi:type="dbl:IntLiteral" concreteSyntax="12" value="12"/>
            <callArguments xsi:type="dbl:IntLiteral" concreteSyntax="24" value="24"/>
          </callPart>
        </classifierType>
      </initialValue>
    </variables>
  </modules>
</dbl:Model>
