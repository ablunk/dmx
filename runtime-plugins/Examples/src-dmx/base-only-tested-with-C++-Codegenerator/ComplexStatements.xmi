<?xml version="1.0" encoding="ASCII"?>
<dbl:Model xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dbl="http://www.informatik.hu-berlin.de/sam/dbl">
  <modules name="simTest">
    <classes name="A" active="true">
      <methods name="f">
        <primitiveType xsi:type="dbl:IntType"/>
        <statements xsi:type="dbl:Advance">
          <time xsi:type="dbl:IntLiteral" value="1"/>
        </statements>
        <statements xsi:type="dbl:IfStatement">
          <condition xsi:type="dbl:Less">
            <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@methods.0/@parameters.0"/>
            <op2 xsi:type="dbl:IntLiteral" value="10"/>
          </condition>
          <trueCase xsi:type="dbl:Return">
            <value xsi:type="dbl:Plus">
              <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@methods.0/@parameters.0"/>
              <op2 xsi:type="dbl:IntLiteral" value="1"/>
            </value>
          </trueCase>
          <falseCase xsi:type="dbl:Return">
            <value xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@methods.0/@parameters.0"/>
          </falseCase>
        </statements>
        <parameters name="x">
          <primitiveType xsi:type="dbl:IntType"/>
        </parameters>
        <parameters name="y">
          <primitiveType xsi:type="dbl:DoubleType"/>
        </parameters>
      </methods>
      <methods name="f">
        <primitiveType xsi:type="dbl:IntType"/>
        <statements xsi:type="dbl:Advance">
          <time xsi:type="dbl:IntLiteral" value="1"/>
        </statements>
        <statements xsi:type="dbl:IfStatement">
          <condition xsi:type="dbl:Less">
            <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@methods.1/@parameters.0"/>
            <op2 xsi:type="dbl:IntLiteral" value="10"/>
          </condition>
          <trueCase xsi:type="dbl:Return">
            <value xsi:type="dbl:Plus">
              <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@methods.1/@parameters.0"/>
              <op2 xsi:type="dbl:IntLiteral" value="1"/>
            </value>
          </trueCase>
          <falseCase xsi:type="dbl:Return">
            <value xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@methods.1/@parameters.0"/>
          </falseCase>
        </statements>
        <parameters name="x">
          <primitiveType xsi:type="dbl:IntType"/>
        </parameters>
      </methods>
      <methods name="x">
        <primitiveType xsi:type="dbl:StringType"/>
        <statements xsi:type="dbl:Print">
          <outputs xsi:type="dbl:Plus">
            <op1 xsi:type="dbl:Plus">
              <op1 xsi:type="dbl:StringLiteral" value="BEFORE YIELD: "/>
              <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@methods.2/@parameters.0"/>
            </op1>
            <op2 xsi:type="dbl:StringLiteral" value="\n"/>
          </outputs>
        </statements>
        <statements xsi:type="dbl:Yield"/>
        <statements xsi:type="dbl:Print">
          <outputs xsi:type="dbl:Plus">
            <op1 xsi:type="dbl:Plus">
              <op1 xsi:type="dbl:StringLiteral" value="AFTER YIELD: "/>
              <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@methods.2/@parameters.0"/>
            </op1>
            <op2 xsi:type="dbl:StringLiteral" value="\n"/>
          </outputs>
        </statements>
        <statements xsi:type="dbl:Return">
          <value xsi:type="dbl:Plus">
            <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@methods.2/@parameters.0"/>
            <op2 xsi:type="dbl:StringLiteral" value="b"/>
          </value>
        </statements>
        <parameters name="t">
          <primitiveType xsi:type="dbl:StringType"/>
        </parameters>
      </methods>
      <methods name="x2">
        <primitiveType xsi:type="dbl:StringType"/>
        <statements xsi:type="dbl:Variable" name="k">
          <primitiveType xsi:type="dbl:DoubleType"/>
        </statements>
        <statements xsi:type="dbl:FunctionCall">
          <callIdExpr referencedElement="//@modules.0/@classes.0/@methods.4">
            <callPart/>
          </callIdExpr>
        </statements>
        <statements xsi:type="dbl:Return">
          <value xsi:type="dbl:Plus">
            <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@methods.3/@parameters.0"/>
            <op2 xsi:type="dbl:StringLiteral" value="b"/>
          </value>
        </statements>
        <parameters name="t">
          <primitiveType xsi:type="dbl:StringType"/>
        </parameters>
      </methods>
      <methods name="x3">
        <primitiveType xsi:type="dbl:VoidType"/>
        <statements xsi:type="dbl:Variable" name="x">
          <primitiveType xsi:type="dbl:IntType"/>
          <initialValue xsi:type="dbl:IntLiteral" value="25"/>
        </statements>
        <statements xsi:type="dbl:Variable" name="c">
          <classifierType referencedElement="//@modules.0/@classes.2"/>
          <initialValue xsi:type="dbl:CreateObject">
            <classifierType referencedElement="//@modules.0/@classes.2">
              <callPart/>
            </classifierType>
          </initialValue>
        </statements>
        <statements xsi:type="dbl:ActivateObject">
          <objectAccess xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@methods.4/@statements.1"/>
        </statements>
        <statements xsi:type="dbl:FunctionCall">
          <callIdExpr referencedElement="//@modules.0/@classes.0/@methods.5">
            <callPart/>
          </callIdExpr>
        </statements>
      </methods>
      <methods name="x4">
        <primitiveType xsi:type="dbl:VoidType"/>
        <statements xsi:type="dbl:Advance">
          <time xsi:type="dbl:IntLiteral" value="50"/>
        </statements>
      </methods>
      <methods name="test">
        <primitiveType xsi:type="dbl:IntType"/>
        <statements xsi:type="dbl:Yield"/>
        <statements xsi:type="dbl:Return">
          <value xsi:type="dbl:Mul">
            <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@methods.6/@parameters.0"/>
            <op2 xsi:type="dbl:IntLiteral" value="2"/>
          </value>
        </statements>
        <parameters name="x">
          <primitiveType xsi:type="dbl:IntType"/>
        </parameters>
      </methods>
      <methods name="rec">
        <primitiveType xsi:type="dbl:IntType"/>
        <statements xsi:type="dbl:Print">
          <outputs xsi:type="dbl:Plus">
            <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@methods.8">
              <callPart>
                <callArguments xsi:type="dbl:IntLiteral" value="1"/>
                <callArguments xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@methods.7/@parameters.0"/>
              </callPart>
            </op1>
            <op2 xsi:type="dbl:StringLiteral" value="\n"/>
          </outputs>
        </statements>
        <statements xsi:type="dbl:IfStatement">
          <condition xsi:type="dbl:Equal">
            <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@methods.7/@parameters.0"/>
            <op2 xsi:type="dbl:IntLiteral"/>
          </condition>
          <trueCase xsi:type="dbl:Return">
            <value xsi:type="dbl:IntLiteral" value="1"/>
          </trueCase>
          <falseCase xsi:type="dbl:IfStatement">
            <condition xsi:type="dbl:Equal">
              <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@methods.7/@parameters.0"/>
              <op2 xsi:type="dbl:IntLiteral" value="1"/>
            </condition>
            <trueCase xsi:type="dbl:LocalScopeStatement">
              <statements xsi:type="dbl:Return">
                <value xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@methods.8">
                  <callPart>
                    <callArguments xsi:type="dbl:Plus">
                      <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@methods.7/@parameters.0"/>
                      <op2 xsi:type="dbl:IntLiteral" value="1"/>
                    </callArguments>
                    <callArguments xsi:type="dbl:Plus">
                      <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@methods.7/@parameters.0"/>
                      <op2 xsi:type="dbl:IntLiteral" value="1"/>
                    </callArguments>
                  </callPart>
                </value>
              </statements>
            </trueCase>
            <falseCase xsi:type="dbl:IfStatement">
              <condition xsi:type="dbl:Greater">
                <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@methods.7/@parameters.0"/>
                <op2 xsi:type="dbl:IntLiteral" value="1"/>
              </condition>
              <trueCase xsi:type="dbl:Return">
                <value xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@methods.7">
                  <callPart>
                    <callArguments xsi:type="dbl:Minus">
                      <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@methods.7/@parameters.0"/>
                      <op2 xsi:type="dbl:IntLiteral" value="1"/>
                    </callArguments>
                  </callPart>
                </value>
              </trueCase>
              <falseCase xsi:type="dbl:Return">
                <value xsi:type="dbl:Mul">
                  <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@methods.7/@parameters.0"/>
                  <op2 xsi:type="dbl:IntLiteral" value="2"/>
                </value>
              </falseCase>
            </falseCase>
          </falseCase>
        </statements>
        <parameters name="x">
          <primitiveType xsi:type="dbl:IntType"/>
        </parameters>
      </methods>
      <methods name="g">
        <primitiveType xsi:type="dbl:IntType"/>
        <statements xsi:type="dbl:Yield"/>
        <statements xsi:type="dbl:Return">
          <value xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@methods.8/@parameters.1"/>
        </statements>
        <parameters name="i">
          <primitiveType xsi:type="dbl:IntType"/>
        </parameters>
        <parameters name="k">
          <primitiveType xsi:type="dbl:IntType"/>
        </parameters>
      </methods>
      <actionsBlock>
        <statements xsi:type="dbl:Print">
          <outputs xsi:type="dbl:Plus">
            <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@methods.3">
              <callPart>
                <callArguments xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@methods.3">
                  <callPart>
                    <callArguments xsi:type="dbl:StringLiteral" value="h1"/>
                  </callPart>
                </callArguments>
              </callPart>
            </op1>
            <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@methods.3">
              <callPart>
                <callArguments xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@methods.3">
                  <callPart>
                    <callArguments xsi:type="dbl:StringLiteral" value="h2"/>
                  </callPart>
                </callArguments>
              </callPart>
            </op2>
          </outputs>
        </statements>
        <statements xsi:type="dbl:Print">
          <outputs xsi:type="dbl:StringLiteral" value="_______________"/>
        </statements>
        <statements xsi:type="dbl:Print">
          <outputs xsi:type="dbl:Plus">
            <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@methods.2">
              <callPart>
                <callArguments xsi:type="dbl:StringLiteral" value="ho"/>
              </callPart>
            </op1>
            <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@methods.2">
              <callPart>
                <callArguments xsi:type="dbl:StringLiteral" value="ha"/>
              </callPart>
            </op2>
          </outputs>
        </statements>
        <statements xsi:type="dbl:Print">
          <outputs xsi:type="dbl:StringLiteral" value="_______________"/>
        </statements>
        <statements xsi:type="dbl:Variable" name="s">
          <primitiveType xsi:type="dbl:StringType"/>
          <initialValue xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@methods.3">
            <callPart>
              <callArguments xsi:type="dbl:Plus">
                <op1 xsi:type="dbl:Plus">
                  <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@methods.6">
                    <callPart>
                      <callArguments xsi:type="dbl:IntLiteral" value="1"/>
                    </callPart>
                  </op1>
                  <op2 xsi:type="dbl:StringLiteral" value=""/>
                </op1>
                <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@methods.6">
                  <callPart>
                    <callArguments xsi:type="dbl:IntLiteral" value="2"/>
                  </callPart>
                </op2>
              </callArguments>
            </callPart>
          </initialValue>
        </statements>
        <statements xsi:type="dbl:Print">
          <outputs xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@actionsBlock/@statements.4"/>
        </statements>
        <statements xsi:type="dbl:Variable" name="x">
          <primitiveType xsi:type="dbl:IntType"/>
          <initialValue xsi:type="dbl:IntLiteral"/>
        </statements>
        <statements xsi:type="dbl:Print">
          <outputs xsi:type="dbl:ActiveLiteral"/>
        </statements>
        <statements xsi:type="dbl:ForStatement">
          <statements xsi:type="dbl:Assignment">
            <variable>
              <idExpr referencedElement="//@modules.0/@classes.0/@actionsBlock/@statements.6"/>
            </variable>
            <value xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@methods.1">
              <callPart>
                <callArguments xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@actionsBlock/@statements.6"/>
              </callPart>
            </value>
          </statements>
          <termination xsi:type="dbl:NotEqual">
            <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@actionsBlock/@statements.6"/>
            <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@methods.1">
              <callPart>
                <callArguments xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@actionsBlock/@statements.6"/>
              </callPart>
            </op2>
          </termination>
          <increment>
            <variable>
              <idExpr referencedElement="//@modules.0/@classes.0/@actionsBlock/@statements.6"/>
            </variable>
            <value xsi:type="dbl:Plus">
              <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@actionsBlock/@statements.6"/>
              <op2 xsi:type="dbl:IntLiteral" value="1"/>
            </value>
          </increment>
          <body xsi:type="dbl:LocalScopeStatement">
            <statements xsi:type="dbl:IfStatement">
              <condition xsi:type="dbl:Equal">
                <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@actionsBlock/@statements.6"/>
                <op2 xsi:type="dbl:IntLiteral" value="2"/>
              </condition>
              <trueCase xsi:type="dbl:ContinueStatement"/>
            </statements>
            <statements xsi:type="dbl:ForStatement">
              <statements xsi:type="dbl:Assignment">
                <variable>
                  <idExpr referencedElement="//@modules.0/@classes.0/@actionsBlock/@statements.6"/>
                </variable>
                <value xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@methods.1">
                  <callPart>
                    <callArguments xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@actionsBlock/@statements.6"/>
                  </callPart>
                </value>
              </statements>
              <termination xsi:type="dbl:NotEqual">
                <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@actionsBlock/@statements.6"/>
                <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@methods.1">
                  <callPart>
                    <callArguments xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@actionsBlock/@statements.6"/>
                  </callPart>
                </op2>
              </termination>
              <increment>
                <variable>
                  <idExpr referencedElement="//@modules.0/@classes.0/@actionsBlock/@statements.6"/>
                </variable>
                <value xsi:type="dbl:Plus">
                  <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@actionsBlock/@statements.6"/>
                  <op2 xsi:type="dbl:IntLiteral" value="1"/>
                </value>
              </increment>
              <body xsi:type="dbl:LocalScopeStatement">
                <statements xsi:type="dbl:IfStatement">
                  <condition xsi:type="dbl:Equal">
                    <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@actionsBlock/@statements.6"/>
                    <op2 xsi:type="dbl:IntLiteral" value="2"/>
                  </condition>
                  <trueCase xsi:type="dbl:ContinueStatement"/>
                </statements>
                <statements xsi:type="dbl:Print">
                  <outputs xsi:type="dbl:Plus">
                    <op1 xsi:type="dbl:Plus">
                      <op1 xsi:type="dbl:Plus">
                        <op1 xsi:type="dbl:Plus">
                          <op1 xsi:type="dbl:StringLiteral" value=" "/>
                          <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@actionsBlock/@statements.6"/>
                        </op1>
                        <op2 xsi:type="dbl:StringLiteral" value=" "/>
                      </op1>
                      <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@methods.1">
                        <callPart>
                          <callArguments xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@actionsBlock/@statements.6"/>
                        </callPart>
                      </op2>
                    </op1>
                    <op2 xsi:type="dbl:StringLiteral" value="\n"/>
                  </outputs>
                </statements>
              </body>
            </statements>
            <statements xsi:type="dbl:Print">
              <outputs xsi:type="dbl:Plus">
                <op1 xsi:type="dbl:Plus">
                  <op1 xsi:type="dbl:Plus">
                    <op1 xsi:type="dbl:Plus">
                      <op1 xsi:type="dbl:StringLiteral" value=" "/>
                      <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@actionsBlock/@statements.6"/>
                    </op1>
                    <op2 xsi:type="dbl:StringLiteral" value=" "/>
                  </op1>
                  <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@methods.1">
                    <callPart>
                      <callArguments xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@actionsBlock/@statements.6"/>
                    </callPart>
                  </op2>
                </op1>
                <op2 xsi:type="dbl:StringLiteral" value="\n"/>
              </outputs>
            </statements>
          </body>
        </statements>
        <statements xsi:type="dbl:ForStatement">
          <statements xsi:type="dbl:Assignment">
            <variable>
              <idExpr referencedElement="//@modules.0/@classes.0/@actionsBlock/@statements.6"/>
            </variable>
            <value xsi:type="dbl:IntLiteral" value="1"/>
          </statements>
          <termination xsi:type="dbl:LessEqual">
            <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@actionsBlock/@statements.6"/>
            <op2 xsi:type="dbl:IntLiteral" value="5"/>
          </termination>
          <increment>
            <variable>
              <idExpr referencedElement="//@modules.0/@classes.0/@actionsBlock/@statements.6"/>
            </variable>
            <value xsi:type="dbl:Plus">
              <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@actionsBlock/@statements.6"/>
              <op2 xsi:type="dbl:IntLiteral" value="1"/>
            </value>
          </increment>
          <body xsi:type="dbl:LocalScopeStatement">
            <statements xsi:type="dbl:IfStatement">
              <condition xsi:type="dbl:Equal">
                <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@actionsBlock/@statements.6"/>
                <op2 xsi:type="dbl:IntLiteral" value="2"/>
              </condition>
              <trueCase xsi:type="dbl:ContinueStatement"/>
            </statements>
            <statements xsi:type="dbl:Print">
              <outputs xsi:type="dbl:Plus">
                <op1 xsi:type="dbl:Plus">
                  <op1 xsi:type="dbl:Plus">
                    <op1 xsi:type="dbl:Plus">
                      <op1 xsi:type="dbl:StringLiteral" value=" "/>
                      <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@actionsBlock/@statements.6"/>
                    </op1>
                    <op2 xsi:type="dbl:StringLiteral" value=" "/>
                  </op1>
                  <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@methods.1">
                    <callPart>
                      <callArguments xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@actionsBlock/@statements.6"/>
                    </callPart>
                  </op2>
                </op1>
                <op2 xsi:type="dbl:StringLiteral" value="\n"/>
              </outputs>
            </statements>
          </body>
        </statements>
        <statements xsi:type="dbl:Print">
          <outputs xsi:type="dbl:ActiveLiteral"/>
        </statements>
        <statements xsi:type="dbl:WhileStatement">
          <condition xsi:type="dbl:NotEqual">
            <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@actionsBlock/@statements.6"/>
            <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@methods.1">
              <callPart>
                <callArguments xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@actionsBlock/@statements.6"/>
              </callPart>
            </op2>
          </condition>
          <body xsi:type="dbl:LocalScopeStatement">
            <statements xsi:type="dbl:Print">
              <outputs xsi:type="dbl:Plus">
                <op1 xsi:type="dbl:Plus">
                  <op1 xsi:type="dbl:Plus">
                    <op1 xsi:type="dbl:Plus">
                      <op1 xsi:type="dbl:StringLiteral" value=" "/>
                      <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@actionsBlock/@statements.6"/>
                    </op1>
                    <op2 xsi:type="dbl:StringLiteral" value=" "/>
                  </op1>
                  <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@methods.1">
                    <callPart>
                      <callArguments xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@actionsBlock/@statements.6"/>
                    </callPart>
                  </op2>
                </op1>
                <op2 xsi:type="dbl:StringLiteral" value="\n"/>
              </outputs>
            </statements>
            <statements xsi:type="dbl:Assignment">
              <variable>
                <idExpr referencedElement="//@modules.0/@classes.0/@actionsBlock/@statements.6"/>
              </variable>
              <value xsi:type="dbl:Plus">
                <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@actionsBlock/@statements.6"/>
                <op2 xsi:type="dbl:IntLiteral" value="1"/>
              </value>
            </statements>
            <statements xsi:type="dbl:IfStatement">
              <condition xsi:type="dbl:Equal">
                <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@actionsBlock/@statements.6"/>
                <op2 xsi:type="dbl:IntLiteral" value="2"/>
              </condition>
              <trueCase xsi:type="dbl:ContinueStatement"/>
              <falseCase xsi:type="dbl:Print">
                <outputs xsi:type="dbl:StringLiteral" value="BEO!;"/>
              </falseCase>
            </statements>
          </body>
        </statements>
        <statements xsi:type="dbl:Print">
          <outputs xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@methods.7">
            <callPart>
              <callArguments xsi:type="dbl:IntLiteral" value="500"/>
            </callPart>
          </outputs>
        </statements>
        <statements xsi:type="dbl:LocalScopeStatement">
          <statements xsi:type="dbl:Print">
            <outputs xsi:type="dbl:Plus">
              <op1 xsi:type="dbl:Plus">
                <op1 xsi:type="dbl:StringLiteral" value=""/>
                <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@methods.1">
                  <callPart>
                    <callArguments xsi:type="dbl:IntLiteral" value="2"/>
                  </callPart>
                </op2>
              </op1>
              <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@methods.1">
                <callPart>
                  <callArguments xsi:type="dbl:IntLiteral" value="3"/>
                </callPart>
              </op2>
            </outputs>
          </statements>
        </statements>
      </actionsBlock>
    </classes>
    <classes name="B" active="true">
      <methods name="f">
        <primitiveType xsi:type="dbl:VoidType"/>
        <statements xsi:type="dbl:Variable" name="c">
          <classifierType referencedElement="//@modules.0/@classes.2"/>
          <initialValue xsi:type="dbl:CreateObject">
            <classifierType referencedElement="//@modules.0/@classes.2">
              <callPart/>
            </classifierType>
          </initialValue>
        </statements>
        <statements xsi:type="dbl:ActivateObject">
          <objectAccess xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.1/@methods.0/@statements.0"/>
        </statements>
      </methods>
      <actionsBlock>
        <statements xsi:type="dbl:FunctionCall">
          <callIdExpr referencedElement="//@modules.0/@classes.1/@methods.0">
            <callPart/>
          </callIdExpr>
        </statements>
        <statements xsi:type="dbl:Print">
          <outputs xsi:type="dbl:IdExpr">
            <predefinedId xsi:type="dbl:MeLiteral"/>
          </outputs>
        </statements>
        <statements xsi:type="dbl:Advance">
          <time xsi:type="dbl:IntLiteral" value="15"/>
        </statements>
        <statements xsi:type="dbl:Print">
          <outputs xsi:type="dbl:StringLiteral" value="B stirbt"/>
        </statements>
      </actionsBlock>
    </classes>
    <classes name="C" active="true">
      <actionsBlock>
        <statements xsi:type="dbl:Print">
          <outputs xsi:type="dbl:StringLiteral" value="____________\n"/>
        </statements>
        <statements xsi:type="dbl:Print">
          <outputs xsi:type="dbl:IdExpr">
            <predefinedId xsi:type="dbl:MeLiteral"/>
          </outputs>
        </statements>
        <statements xsi:type="dbl:Advance">
          <time xsi:type="dbl:IntLiteral" value="20"/>
        </statements>
        <statements xsi:type="dbl:Print">
          <outputs xsi:type="dbl:StringLiteral" value="____________\n"/>
        </statements>
        <statements xsi:type="dbl:Print">
          <outputs xsi:type="dbl:Plus">
            <op1 xsi:type="dbl:Plus">
              <op1 xsi:type="dbl:IdExpr">
                <predefinedId xsi:type="dbl:MeLiteral"/>
              </op1>
              <op2 xsi:type="dbl:StringLiteral" value=" "/>
            </op1>
            <op2 xsi:type="dbl:TimeLiteral"/>
          </outputs>
        </statements>
      </actionsBlock>
    </classes>
    <functions name="main">
      <primitiveType xsi:type="dbl:VoidType"/>
      <statements xsi:type="dbl:Variable" name="a">
        <classifierType referencedElement="//@modules.0/@classes.0"/>
        <initialValue xsi:type="dbl:CreateObject">
          <classifierType referencedElement="//@modules.0/@classes.0">
            <callPart/>
          </classifierType>
        </initialValue>
      </statements>
      <statements xsi:type="dbl:ActivateObject">
        <objectAccess xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.0/@statements.0"/>
      </statements>
      <statements xsi:type="dbl:LocalScopeStatement">
        <statements xsi:type="dbl:Variable" name="b">
          <classifierType referencedElement="//@modules.0/@classes.1"/>
          <initialValue xsi:type="dbl:CreateObject">
            <classifierType referencedElement="//@modules.0/@classes.1">
              <callPart/>
            </classifierType>
          </initialValue>
        </statements>
        <statements xsi:type="dbl:ActivateObject">
          <objectAccess xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.0/@statements.2/@statements.0"/>
        </statements>
      </statements>
      <statements xsi:type="dbl:Advance">
        <time xsi:type="dbl:IntLiteral" value="500"/>
      </statements>
    </functions>
  </modules>
</dbl:Model>
