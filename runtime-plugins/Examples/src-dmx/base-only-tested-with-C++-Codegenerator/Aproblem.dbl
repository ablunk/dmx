module problem{

class Process{
	bindings{
		"c++"->"simulationCore\Process",
		"java" -> "java.lang.Object"
	}
}

class List{
	bindings{
		"c++" -> "mappedLibraryClasses\myProcessList",
		"java" -> "java.util.ArrayList"
	}
	void push_back(Process p) abstract;
	void pop_front() abstract;
	Process front() abstract;
	boolean empty() abstract;
	boolean add(Process e) abstract;
	boolean isEmpty() abstract;
	boolean remove(Process e) abstract;
	Process get(int index) abstract;
}

test t = new test2();
active class problem{
	string msg_;
	new(string msg){msg_ = msg;}
	actions{
		while(true){
			print ""+msg_+time+"\n";
			t.request();
			print "YEAH!";
		}
	
	}
}
active class test{
	int index = 0;
	actions{
		print "Hallo";
		advance 20;
		print self+""+time+"\n";
	}
	void request(){
		print "Wait: "+active+"\n";
		print self+""+time+"\n";
		wait;
	//	l.add(who);
	}
	void release(){
		//reactivate l.front();
	}
}
active class test2 extends test{
	new(){}
	actions{
		print "Hallo2";
		advance 10;
		print self+""+time+"\n";
	}
	void request(){
		print "Wait2: "+active+"\n";
		print self+""+time+"\n";
		wait;
	//	l.add(who);
	}
}

void main(){
	problem p1 = new problem("puh");
	problem p2 = new problem("pah");
	activate t;
	activate p1;
	activate p2;
	advance 50;
	print ""+self+time+"\n";
}
}