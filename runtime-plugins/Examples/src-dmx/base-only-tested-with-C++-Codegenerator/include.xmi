<?xml version="1.0" encoding="ASCII"?>
<dbl:Model xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dbl="http://www.informatik.hu-berlin.de/sam/dbl">
  <modules name="A">
    <classes name="A">
      <constructors>
        <statements xsi:type="dbl:Print">
          <outputs xsi:type="dbl:Plus">
            <op1 xsi:type="dbl:Plus">
              <op1 xsi:type="dbl:StringLiteral" value=""/>
              <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@attributes.0"/>
            </op1>
            <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@attributes.2"/>
          </outputs>
        </statements>
        <statements xsi:type="dbl:Print">
          <outputs xsi:type="dbl:Plus">
            <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@attributes.3"/>
            <op2 xsi:type="dbl:StringLiteral" value="\n"/>
          </outputs>
        </statements>
        <statements xsi:type="dbl:Assignment">
          <variable>
            <idExpr referencedElement="//@modules.0/@classes.0/@attributes.5">
              <arrayIndex xsi:type="dbl:IntLiteral"/>
            </idExpr>
          </variable>
          <value xsi:type="dbl:Plus">
            <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@attributes.5"/>
            <op2 xsi:type="dbl:StringLiteral" value="\n"/>
          </value>
        </statements>
        <statements xsi:type="dbl:Print">
          <outputs xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@attributes.5">
            <arrayIndex xsi:type="dbl:IntLiteral"/>
          </outputs>
        </statements>
        <parameters name="x">
          <primitiveType xsi:type="dbl:IntType"/>
        </parameters>
      </constructors>
      <constructors>
        <statements xsi:type="dbl:Print">
          <outputs xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@constructors.1/@parameters.0"/>
        </statements>
        <parameters name="s">
          <primitiveType xsi:type="dbl:StringType"/>
        </parameters>
      </constructors>
      <attributes name="l">
        <primitiveType xsi:type="dbl:IntType"/>
        <initialValue xsi:type="dbl:IntLiteral" value="5"/>
      </attributes>
      <attributes name="x">
        <primitiveType xsi:type="dbl:IntType"/>
        <initialValue xsi:type="dbl:IntLiteral" value="20"/>
      </attributes>
      <attributes name="n">
        <primitiveType xsi:type="dbl:DoubleType"/>
        <initialValue xsi:type="dbl:DoubleLiteral" value="2.5"/>
      </attributes>
      <attributes name="o" class="true">
        <primitiveType xsi:type="dbl:IntType"/>
        <initialValue xsi:type="dbl:IntLiteral" value="35"/>
      </attributes>
      <attributes name="f">
        <primitiveType xsi:type="dbl:IntType"/>
        <initialValue xsi:type="dbl:IntLiteral" value="10"/>
      </attributes>
      <attributes name="xeuo">
        <primitiveType xsi:type="dbl:StringType"/>
        <typeArrayDimensions/>
        <initialValue xsi:type="dbl:CreateObject">
          <primitiveType xsi:type="dbl:StringType"/>
          <typeArrayDimensions>
            <size xsi:type="dbl:IntLiteral" value="5"/>
          </typeArrayDimensions>
        </initialValue>
      </attributes>
      <methods name="toString">
        <primitiveType xsi:type="dbl:StringType"/>
        <statements xsi:type="dbl:Return">
          <value xsi:type="dbl:Plus">
            <op1 xsi:type="dbl:Plus">
              <op1 xsi:type="dbl:Plus">
                <op1 xsi:type="dbl:Plus">
                  <op1 xsi:type="dbl:Plus">
                    <op1 xsi:type="dbl:Plus">
                      <op1 xsi:type="dbl:Plus">
                        <op1 xsi:type="dbl:StringLiteral" value="l = "/>
                        <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@attributes.0"/>
                      </op1>
                      <op2 xsi:type="dbl:StringLiteral" value=", n = "/>
                    </op1>
                    <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@attributes.2"/>
                  </op1>
                  <op2 xsi:type="dbl:StringLiteral" value=", o = "/>
                </op1>
                <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@attributes.3"/>
              </op1>
              <op2 xsi:type="dbl:StringLiteral" value=", f = "/>
            </op1>
            <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@attributes.4"/>
          </value>
        </statements>
      </methods>
    </classes>
    <classes name="B">
      <superClasses class="//@modules.0/@classes.0">
        <constructorArguments xsi:type="dbl:IntLiteral" value="13"/>
      </superClasses>
      <constructors>
        <statements xsi:type="dbl:Print">
          <outputs xsi:type="dbl:Plus">
            <op1 xsi:type="dbl:Plus">
              <op1 xsi:type="dbl:Plus">
                <op1 xsi:type="dbl:Plus">
                  <op1 xsi:type="dbl:Plus">
                    <op1 xsi:type="dbl:Plus">
                      <op1 xsi:type="dbl:Plus">
                        <op1 xsi:type="dbl:Plus">
                          <op1 xsi:type="dbl:StringLiteral" value="Attribute: "/>
                          <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.1/@attributes.3"/>
                        </op1>
                        <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.1/@attributes.0"/>
                      </op1>
                      <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.1/@attributes.2"/>
                    </op1>
                    <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.1/@attributes.1"/>
                  </op1>
                  <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.1/@attributes.6"/>
                </op1>
                <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.1/@attributes.5"/>
              </op1>
              <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.1/@attributes.7"/>
            </op1>
            <op2 xsi:type="dbl:StringLiteral" value="\n"/>
          </outputs>
        </statements>
        <parameters name="l">
          <primitiveType xsi:type="dbl:IntType"/>
        </parameters>
      </constructors>
      <constructors>
        <parameters name="y">
          <primitiveType xsi:type="dbl:DoubleType"/>
        </parameters>
      </constructors>
      <attributes name="x">
        <primitiveType xsi:type="dbl:IntType"/>
        <initialValue xsi:type="dbl:IntLiteral" value="10"/>
      </attributes>
      <attributes name="y">
        <primitiveType xsi:type="dbl:BoolType"/>
      </attributes>
      <attributes name="re">
        <primitiveType xsi:type="dbl:DoubleType"/>
      </attributes>
      <attributes name="f">
        <primitiveType xsi:type="dbl:StringType"/>
      </attributes>
      <attributes name="b">
        <classifierType referencedElement="//@modules.0/@classes.1"/>
      </attributes>
      <attributes name="d">
        <classifierType referencedElement="//@modules.0/@classes.3"/>
      </attributes>
      <attributes name="t">
        <primitiveType xsi:type="dbl:BoolType"/>
        <initialValue xsi:type="dbl:TrueLiteral"/>
      </attributes>
      <attributes name="s">
        <primitiveType xsi:type="dbl:StringType"/>
        <initialValue xsi:type="dbl:Plus">
          <op1 xsi:type="dbl:Plus">
            <op1 xsi:type="dbl:Plus">
              <op1 xsi:type="dbl:Plus">
                <op1 xsi:type="dbl:StringLiteral" value="lu"/>
                <op2 xsi:type="dbl:StringLiteral" value="la"/>
              </op1>
              <op2 xsi:type="dbl:Plus">
                <op1 xsi:type="dbl:Plus">
                  <op1 xsi:type="dbl:StringLiteral" value="lop"/>
                  <op2 xsi:type="dbl:Cast">
                    <primitiveType xsi:type="dbl:IntType"/>
                    <op xsi:type="dbl:TrueLiteral"/>
                  </op2>
                </op1>
                <op2 xsi:type="dbl:Cast">
                  <primitiveType xsi:type="dbl:IntType"/>
                  <op xsi:type="dbl:FalseLiteral"/>
                </op2>
              </op2>
            </op1>
            <op2 xsi:type="dbl:Plus">
              <op1 xsi:type="dbl:Plus">
                <op1 xsi:type="dbl:Plus">
                  <op1 xsi:type="dbl:Plus">
                    <op1 xsi:type="dbl:Plus">
                      <op1 xsi:type="dbl:IntLiteral" value="1"/>
                      <op2 xsi:type="dbl:IntLiteral" value="2"/>
                    </op1>
                    <op2 xsi:type="dbl:IntLiteral" value="3"/>
                  </op1>
                  <op2 xsi:type="dbl:IntLiteral" value="4"/>
                </op1>
                <op2 xsi:type="dbl:IntLiteral" value="5"/>
              </op1>
              <op2 xsi:type="dbl:IntLiteral" value="6"/>
            </op2>
          </op1>
          <op2 xsi:type="dbl:And">
            <op1 xsi:type="dbl:TrueLiteral"/>
            <op2 xsi:type="dbl:Or">
              <op1 xsi:type="dbl:FalseLiteral"/>
              <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.1/@attributes.6"/>
            </op2>
          </op2>
        </initialValue>
      </attributes>
      <attributes name="xe">
        <primitiveType xsi:type="dbl:IntType"/>
        <typeArrayDimensions/>
      </attributes>
      <attributes name="su">
        <primitiveType xsi:type="dbl:StringType"/>
        <typeArrayDimensions/>
      </attributes>
      <attributes name="lop">
        <typeArrayDimensions/>
        <classifierType referencedElement="//@modules.0/@classes.2"/>
      </attributes>
      <methods name="toString">
        <primitiveType xsi:type="dbl:StringType"/>
        <statements xsi:type="dbl:Return">
          <value xsi:type="dbl:Plus">
            <op1 xsi:type="dbl:Plus">
              <op1 xsi:type="dbl:Plus">
                <op1 xsi:type="dbl:Plus">
                  <op1 xsi:type="dbl:Plus">
                    <op1 xsi:type="dbl:Plus">
                      <op1 xsi:type="dbl:Plus">
                        <op1 xsi:type="dbl:Plus">
                          <op1 xsi:type="dbl:Plus">
                            <op1 xsi:type="dbl:Plus">
                              <op1 xsi:type="dbl:StringLiteral" value="X = "/>
                              <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.1/@attributes.0"/>
                            </op1>
                            <op2 xsi:type="dbl:StringLiteral" value=", Y = "/>
                          </op1>
                          <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.1/@attributes.1"/>
                        </op1>
                        <op2 xsi:type="dbl:StringLiteral" value=", re = "/>
                      </op1>
                      <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.1/@attributes.2"/>
                    </op1>
                    <op2 xsi:type="dbl:StringLiteral" value=", f = "/>
                  </op1>
                  <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.1/@attributes.3"/>
                </op1>
                <op2 xsi:type="dbl:StringLiteral" value=", s = "/>
              </op1>
              <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.1/@attributes.7"/>
            </op1>
            <op2 xsi:type="dbl:StringLiteral" value=""/>
          </value>
        </statements>
      </methods>
      <methods name="f">
        <primitiveType xsi:type="dbl:StringType"/>
        <statements xsi:type="dbl:Return">
          <value xsi:type="dbl:Plus">
            <op1 xsi:type="dbl:Plus">
              <op1 xsi:type="dbl:Plus">
                <op1 xsi:type="dbl:Plus">
                  <op1 xsi:type="dbl:Plus">
                    <op1 xsi:type="dbl:Plus">
                      <op1 xsi:type="dbl:Plus">
                        <op1 xsi:type="dbl:StringLiteral" value="Attribute: "/>
                        <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.1/@attributes.0"/>
                      </op1>
                      <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.1/@attributes.2"/>
                    </op1>
                    <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.1/@attributes.1"/>
                  </op1>
                  <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.1/@attributes.6"/>
                </op1>
                <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.1/@attributes.5"/>
              </op1>
              <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.1/@attributes.7"/>
            </op1>
            <op2 xsi:type="dbl:StringLiteral" value="\n"/>
          </value>
        </statements>
      </methods>
    </classes>
    <classes name="C">
      <superClasses class="//@modules.0/@classes.1"/>
      <constructors>
        <statements xsi:type="dbl:Assignment">
          <variable>
            <idExpr referencedElement="//@modules.0/@classes.2/@attributes.2"/>
          </variable>
          <value xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.2/@constructors.0/@parameters.0"/>
        </statements>
        <statements xsi:type="dbl:Assignment">
          <variable>
            <idExpr referencedElement="//@modules.0/@classes.2/@attributes.3"/>
          </variable>
          <value xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.2/@constructors.0/@parameters.1"/>
        </statements>
        <parameters name="a">
          <classifierType referencedElement="//@modules.0/@classes.0"/>
        </parameters>
        <parameters name="b">
          <classifierType referencedElement="//@modules.0/@classes.1"/>
        </parameters>
      </constructors>
      <attributes name="x">
        <primitiveType xsi:type="dbl:IntType"/>
        <initialValue xsi:type="dbl:IntLiteral" value="10"/>
      </attributes>
      <attributes name="y">
        <primitiveType xsi:type="dbl:DoubleType"/>
        <initialValue xsi:type="dbl:DoubleLiteral" value="12.9"/>
      </attributes>
      <attributes name="x2">
        <classifierType referencedElement="//@modules.0/@classes.0"/>
      </attributes>
      <attributes name="x3">
        <classifierType referencedElement="//@modules.0/@classes.1"/>
      </attributes>
      <methods name="toString">
        <primitiveType xsi:type="dbl:StringType"/>
        <statements xsi:type="dbl:Return">
          <value xsi:type="dbl:Plus">
            <op1 xsi:type="dbl:Plus">
              <op1 xsi:type="dbl:Plus">
                <op1 xsi:type="dbl:Plus">
                  <op1 xsi:type="dbl:Plus">
                    <op1 xsi:type="dbl:Plus">
                      <op1 xsi:type="dbl:Plus">
                        <op1 xsi:type="dbl:Plus">
                          <op1 xsi:type="dbl:StringLiteral" value="X = "/>
                          <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.2/@attributes.0"/>
                        </op1>
                        <op2 xsi:type="dbl:StringLiteral" value=", Y = "/>
                      </op1>
                      <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.2/@attributes.1"/>
                    </op1>
                    <op2 xsi:type="dbl:StringLiteral" value=", A ("/>
                  </op1>
                  <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.2/@attributes.2"/>
                </op1>
                <op2 xsi:type="dbl:StringLiteral" value="), B ("/>
              </op1>
              <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.2/@attributes.3"/>
            </op1>
            <op2 xsi:type="dbl:StringLiteral" value=")"/>
          </value>
        </statements>
      </methods>
      <methods name="l">
        <primitiveType xsi:type="dbl:VoidType"/>
      </methods>
    </classes>
    <classes name="D">
      <superClasses class="//@modules.0/@classes.2"/>
      <constructors/>
      <attributes name="p">
        <primitiveType xsi:type="dbl:StringType"/>
      </attributes>
      <methods name="l">
        <primitiveType xsi:type="dbl:VoidType"/>
        <statements xsi:type="dbl:Print">
          <outputs xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.1/@methods.1">
            <parentIdExpr>
              <predefinedId xsi:type="dbl:SuperLiteral"/>
            </parentIdExpr>
            <callPart/>
          </outputs>
        </statements>
      </methods>
    </classes>
    <functions name="f">
      <primitiveType xsi:type="dbl:IntType"/>
      <statements xsi:type="dbl:Variable" name="c">
        <classifierType referencedElement="//@modules.0/@classes.2"/>
        <initialValue xsi:type="dbl:CreateObject">
          <classifierType referencedElement="//@modules.0/@classes.2">
            <callPart/>
          </classifierType>
        </initialValue>
      </statements>
      <statements xsi:type="dbl:Return">
        <value xsi:type="dbl:IntLiteral"/>
      </statements>
      <parameters name="x">
        <primitiveType xsi:type="dbl:IntType"/>
      </parameters>
    </functions>
    <functions name="concatenate">
      <primitiveType xsi:type="dbl:StringType"/>
      <statements xsi:type="dbl:Return">
        <value xsi:type="dbl:Plus">
          <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.1/@parameters.0"/>
          <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.1/@parameters.1"/>
        </value>
      </statements>
      <parameters name="x">
        <primitiveType xsi:type="dbl:StringType"/>
      </parameters>
      <parameters name="y">
        <primitiveType xsi:type="dbl:StringType"/>
      </parameters>
    </functions>
    <functions name="func">
      <primitiveType xsi:type="dbl:VoidType"/>
      <statements xsi:type="dbl:Assignment">
        <variable>
          <idExpr referencedElement="//@modules.0/@functions.2/@parameters.0">
            <arrayIndex xsi:type="dbl:IntLiteral"/>
          </idExpr>
        </variable>
        <value xsi:type="dbl:IntLiteral" value="10"/>
      </statements>
      <statements xsi:type="dbl:Assignment">
        <variable>
          <idExpr referencedElement="//@modules.0/@functions.2/@parameters.0"/>
        </variable>
        <value xsi:type="dbl:NullLiteral"/>
      </statements>
      <parameters name="se">
        <primitiveType xsi:type="dbl:IntType"/>
        <typeArrayDimensions/>
      </parameters>
    </functions>
    <functions name="fn">
      <primitiveType xsi:type="dbl:VoidType"/>
      <parameters name="b">
        <classifierType referencedElement="//@modules.0/@classes.2"/>
      </parameters>
    </functions>
    <functions name="string">
      <primitiveType xsi:type="dbl:StringType"/>
      <statements xsi:type="dbl:Return">
        <value xsi:type="dbl:StringLiteral" value="ha"/>
      </statements>
    </functions>
    <functions name="createPascalTriangle">
      <primitiveType xsi:type="dbl:VoidType"/>
      <statements xsi:type="dbl:Variable" name="triangle">
        <primitiveType xsi:type="dbl:IntType"/>
        <typeArrayDimensions/>
        <typeArrayDimensions/>
        <initialValue xsi:type="dbl:CreateObject">
          <primitiveType xsi:type="dbl:IntType"/>
          <typeArrayDimensions>
            <size xsi:type="dbl:IntLiteral" value="7"/>
          </typeArrayDimensions>
          <typeArrayDimensions/>
        </initialValue>
      </statements>
      <statements xsi:type="dbl:ForStatement">
        <statements xsi:type="dbl:Variable" name="row">
          <primitiveType xsi:type="dbl:IntType"/>
          <initialValue xsi:type="dbl:IntLiteral"/>
        </statements>
        <termination xsi:type="dbl:Less">
          <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.5/@statements.1/@statements.0"/>
          <op2 xsi:type="dbl:IdExpr">
            <parentIdExpr referencedElement="//@modules.0/@functions.5/@statements.0"/>
            <predefinedId xsi:type="dbl:SizeOfArray"/>
          </op2>
        </termination>
        <increment>
          <variable>
            <idExpr referencedElement="//@modules.0/@functions.5/@statements.1/@statements.0"/>
          </variable>
          <value xsi:type="dbl:Plus">
            <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.5/@statements.1/@statements.0"/>
            <op2 xsi:type="dbl:IntLiteral" value="1"/>
          </value>
        </increment>
        <body xsi:type="dbl:LocalScopeStatement">
          <statements xsi:type="dbl:ForStatement">
            <statements xsi:type="dbl:Variable" name="i">
              <primitiveType xsi:type="dbl:IntType"/>
              <initialValue xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.5/@statements.1/@statements.0"/>
            </statements>
            <termination xsi:type="dbl:Less">
              <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.5/@statements.1/@body/@statements.0/@statements.0"/>
              <op2 xsi:type="dbl:IdExpr">
                <parentIdExpr referencedElement="//@modules.0/@functions.5/@statements.0"/>
                <predefinedId xsi:type="dbl:SizeOfArray"/>
              </op2>
            </termination>
            <increment>
              <variable>
                <idExpr referencedElement="//@modules.0/@functions.5/@statements.1/@body/@statements.0/@statements.0"/>
              </variable>
              <value xsi:type="dbl:Plus">
                <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.5/@statements.1/@body/@statements.0/@statements.0"/>
                <op2 xsi:type="dbl:IntLiteral" value="1"/>
              </value>
            </increment>
            <body xsi:type="dbl:Print">
              <outputs xsi:type="dbl:StringLiteral" value=" "/>
            </body>
          </statements>
          <statements xsi:type="dbl:Assignment">
            <variable>
              <idExpr referencedElement="//@modules.0/@functions.5/@statements.0">
                <arrayIndex xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.5/@statements.1/@statements.0"/>
              </idExpr>
            </variable>
            <value xsi:type="dbl:CreateObject">
              <primitiveType xsi:type="dbl:IntType"/>
              <typeArrayDimensions>
                <size xsi:type="dbl:Plus">
                  <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.5/@statements.1/@statements.0"/>
                  <op2 xsi:type="dbl:IntLiteral" value="1"/>
                </size>
              </typeArrayDimensions>
            </value>
          </statements>
          <statements xsi:type="dbl:ForStatement">
            <statements xsi:type="dbl:Variable" name="col">
              <primitiveType xsi:type="dbl:IntType"/>
              <initialValue xsi:type="dbl:IntLiteral"/>
            </statements>
            <termination xsi:type="dbl:LessEqual">
              <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.5/@statements.1/@body/@statements.2/@statements.0"/>
              <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.5/@statements.1/@statements.0"/>
            </termination>
            <increment>
              <variable>
                <idExpr referencedElement="//@modules.0/@functions.5/@statements.1/@body/@statements.2/@statements.0"/>
              </variable>
              <value xsi:type="dbl:Plus">
                <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.5/@statements.1/@body/@statements.2/@statements.0"/>
                <op2 xsi:type="dbl:IntLiteral" value="1"/>
              </value>
            </increment>
            <body xsi:type="dbl:LocalScopeStatement">
              <statements xsi:type="dbl:IfStatement">
                <condition xsi:type="dbl:Or">
                  <op1 xsi:type="dbl:Equal">
                    <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.5/@statements.1/@body/@statements.2/@statements.0"/>
                    <op2 xsi:type="dbl:IntLiteral"/>
                  </op1>
                  <op2 xsi:type="dbl:Equal">
                    <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.5/@statements.1/@body/@statements.2/@statements.0"/>
                    <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.5/@statements.1/@statements.0"/>
                  </op2>
                </condition>
                <trueCase xsi:type="dbl:Assignment">
                  <variable>
                    <idExpr referencedElement="//@modules.0/@functions.5/@statements.0">
                      <arrayIndex xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.5/@statements.1/@statements.0"/>
                      <arrayIndex xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.5/@statements.1/@body/@statements.2/@statements.0"/>
                    </idExpr>
                  </variable>
                  <value xsi:type="dbl:IntLiteral" value="1"/>
                </trueCase>
                <falseCase xsi:type="dbl:Assignment">
                  <variable>
                    <idExpr referencedElement="//@modules.0/@functions.5/@statements.0">
                      <arrayIndex xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.5/@statements.1/@statements.0"/>
                      <arrayIndex xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.5/@statements.1/@body/@statements.2/@statements.0"/>
                    </idExpr>
                  </variable>
                  <value xsi:type="dbl:Plus">
                    <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.5/@statements.0">
                      <arrayIndex xsi:type="dbl:Minus">
                        <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.5/@statements.1/@statements.0"/>
                        <op2 xsi:type="dbl:IntLiteral" value="1"/>
                      </arrayIndex>
                      <arrayIndex xsi:type="dbl:Minus">
                        <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.5/@statements.1/@body/@statements.2/@statements.0"/>
                        <op2 xsi:type="dbl:IntLiteral" value="1"/>
                      </arrayIndex>
                    </op1>
                    <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.5/@statements.0">
                      <arrayIndex xsi:type="dbl:Minus">
                        <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.5/@statements.1/@statements.0"/>
                        <op2 xsi:type="dbl:IntLiteral" value="1"/>
                      </arrayIndex>
                      <arrayIndex xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.5/@statements.1/@body/@statements.2/@statements.0"/>
                    </op2>
                  </value>
                </falseCase>
              </statements>
              <statements xsi:type="dbl:Print">
                <outputs xsi:type="dbl:Plus">
                  <op1 xsi:type="dbl:Plus">
                    <op1 xsi:type="dbl:StringLiteral" value=" "/>
                    <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.5/@statements.0">
                      <arrayIndex xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.5/@statements.1/@statements.0"/>
                      <arrayIndex xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.5/@statements.1/@body/@statements.2/@statements.0"/>
                    </op2>
                  </op1>
                  <op2 xsi:type="dbl:StringLiteral" value=" "/>
                </outputs>
              </statements>
            </body>
          </statements>
          <statements xsi:type="dbl:Print">
            <outputs xsi:type="dbl:StringLiteral" value="\n"/>
          </statements>
        </body>
      </statements>
    </functions>
    <functions name="fArray">
      <typeArrayDimensions/>
      <typeArrayDimensions/>
      <classifierType referencedElement="//@modules.0/@classes.0"/>
      <statements xsi:type="dbl:ForStatement">
        <statements xsi:type="dbl:Variable" name="i">
          <primitiveType xsi:type="dbl:IntType"/>
          <initialValue xsi:type="dbl:IntLiteral"/>
        </statements>
        <termination xsi:type="dbl:Less">
          <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.6/@statements.0/@statements.0"/>
          <op2 xsi:type="dbl:IdExpr">
            <parentIdExpr referencedElement="//@modules.0/@functions.6/@parameters.0"/>
            <predefinedId xsi:type="dbl:SizeOfArray"/>
          </op2>
        </termination>
        <increment>
          <variable>
            <idExpr referencedElement="//@modules.0/@functions.6/@statements.0/@statements.0"/>
          </variable>
          <value xsi:type="dbl:Plus">
            <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.6/@statements.0/@statements.0"/>
            <op2 xsi:type="dbl:IntLiteral" value="1"/>
          </value>
        </increment>
        <body xsi:type="dbl:LocalScopeStatement">
          <statements xsi:type="dbl:Assignment">
            <variable>
              <idExpr referencedElement="//@modules.0/@functions.6/@parameters.0">
                <arrayIndex xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.6/@statements.0/@statements.0"/>
              </idExpr>
            </variable>
            <value xsi:type="dbl:CreateObject">
              <typeArrayDimensions>
                <size xsi:type="dbl:Plus">
                  <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.6/@statements.0/@statements.0"/>
                  <op2 xsi:type="dbl:IntLiteral" value="1"/>
                </size>
              </typeArrayDimensions>
              <classifierType referencedElement="//@modules.0/@classes.0"/>
            </value>
          </statements>
        </body>
      </statements>
      <statements xsi:type="dbl:Return">
        <value xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.6/@parameters.0"/>
      </statements>
      <parameters name="test">
        <typeArrayDimensions/>
        <typeArrayDimensions/>
        <classifierType referencedElement="//@modules.0/@classes.0"/>
      </parameters>
    </functions>
    <functions name="main">
      <primitiveType xsi:type="dbl:VoidType"/>
      <statements xsi:type="dbl:Variable" name="nArray">
        <typeArrayDimensions/>
        <typeArrayDimensions/>
        <classifierType referencedElement="//@modules.0/@classes.0"/>
      </statements>
      <statements xsi:type="dbl:Assignment">
        <variable>
          <idExpr referencedElement="//@modules.0/@functions.7/@statements.0"/>
        </variable>
        <value xsi:type="dbl:CreateObject">
          <typeArrayDimensions>
            <size xsi:type="dbl:IntLiteral" value="10"/>
          </typeArrayDimensions>
          <typeArrayDimensions>
            <size xsi:type="dbl:IntLiteral" value="15"/>
          </typeArrayDimensions>
          <classifierType referencedElement="//@modules.0/@classes.0"/>
        </value>
      </statements>
      <statements xsi:type="dbl:Assignment">
        <variable>
          <idExpr referencedElement="//@modules.0/@functions.7/@statements.0">
            <arrayIndex xsi:type="dbl:IntLiteral"/>
            <arrayIndex xsi:type="dbl:IntLiteral"/>
          </idExpr>
        </variable>
        <value xsi:type="dbl:CreateObject">
          <classifierType referencedElement="//@modules.0/@classes.1">
            <callPart/>
          </classifierType>
        </value>
      </statements>
      <statements xsi:type="dbl:Print">
        <outputs xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.7/@statements.0">
          <arrayIndex xsi:type="dbl:IntLiteral"/>
          <arrayIndex xsi:type="dbl:IntLiteral"/>
        </outputs>
      </statements>
      <statements xsi:type="dbl:Print">
        <outputs xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.7/@statements.0"/>
      </statements>
      <statements xsi:type="dbl:FunctionCall">
        <callIdExpr referencedElement="//@modules.0/@functions.6">
          <callPart>
            <callArguments xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.7/@statements.0"/>
          </callPart>
        </callIdExpr>
      </statements>
      <statements xsi:type="dbl:FunctionCall">
        <callIdExpr referencedElement="//@modules.0/@functions.5">
          <callPart/>
        </callIdExpr>
      </statements>
      <statements xsi:type="dbl:Print">
        <outputs xsi:type="dbl:Plus">
          <op1 xsi:type="dbl:Plus">
            <op1 xsi:type="dbl:Plus">
              <op1 xsi:type="dbl:Plus">
                <op1 xsi:type="dbl:StringLiteral" value="\n"/>
                <op2 xsi:type="dbl:StringLiteral" value="TEST:"/>
              </op1>
              <op2 xsi:type="dbl:StringLiteral" value="\n"/>
            </op1>
            <op2 xsi:type="dbl:StringLiteral" value="\n"/>
          </op1>
          <op2 xsi:type="dbl:StringLiteral" value="\n"/>
        </outputs>
      </statements>
      <statements xsi:type="dbl:Variable" name="s">
        <primitiveType xsi:type="dbl:StringType"/>
        <initialValue xsi:type="dbl:StringLiteral" value="hallo"/>
      </statements>
      <statements xsi:type="dbl:Variable" name="boo">
        <primitiveType xsi:type="dbl:StringType"/>
      </statements>
      <statements xsi:type="dbl:Assignment">
        <variable>
          <idExpr referencedElement="//@modules.0/@functions.7/@statements.9"/>
        </variable>
        <value xsi:type="dbl:StringLiteral" value="ha"/>
      </statements>
      <statements xsi:type="dbl:SwitchStatement">
        <variable>
          <idExpr referencedElement="//@modules.0/@functions.4">
            <callPart/>
          </idExpr>
        </variable>
        <cases>
          <value xsi:type="dbl:Plus">
            <op1 xsi:type="dbl:Plus">
              <op1 xsi:type="dbl:Plus">
                <op1 xsi:type="dbl:StringLiteral" value="h"/>
                <op2 xsi:type="dbl:StringLiteral" value="a"/>
              </op1>
              <op2 xsi:type="dbl:StringLiteral" value="ll"/>
            </op1>
            <op2 xsi:type="dbl:StringLiteral" value="o"/>
          </value>
          <body xsi:type="dbl:LocalScopeStatement">
            <statements xsi:type="dbl:Variable" name="x">
              <primitiveType xsi:type="dbl:IntType"/>
            </statements>
            <statements xsi:type="dbl:Print">
              <outputs xsi:type="dbl:StringLiteral" value="ha"/>
            </statements>
            <statements xsi:type="dbl:BreakStatement"/>
          </body>
        </cases>
        <cases>
          <value xsi:type="dbl:StringLiteral" value="llo"/>
          <body xsi:type="dbl:Variable" name="y">
            <primitiveType xsi:type="dbl:DoubleType"/>
          </body>
          <body xsi:type="dbl:Print">
            <outputs xsi:type="dbl:StringLiteral" value="llo"/>
          </body>
          <body xsi:type="dbl:BreakStatement"/>
        </cases>
        <cases>
          <value xsi:type="dbl:StringLiteral" value="hallo"/>
          <body xsi:type="dbl:Variable" name="g">
            <primitiveType xsi:type="dbl:StringType"/>
          </body>
          <body xsi:type="dbl:Print">
            <outputs xsi:type="dbl:StringLiteral" value="found"/>
          </body>
          <body xsi:type="dbl:BreakStatement"/>
        </cases>
        <defaultCase>
          <body xsi:type="dbl:Print">
            <outputs xsi:type="dbl:StringLiteral" value="notFound"/>
          </body>
          <body xsi:type="dbl:BreakStatement"/>
        </defaultCase>
      </statements>
      <statements xsi:type="dbl:Print">
        <outputs xsi:type="dbl:Plus">
          <op1 xsi:type="dbl:Plus">
            <op1 xsi:type="dbl:Plus">
              <op1 xsi:type="dbl:Plus">
                <op1 xsi:type="dbl:StringLiteral" value="\n"/>
                <op2 xsi:type="dbl:StringLiteral" value="TEST:"/>
              </op1>
              <op2 xsi:type="dbl:StringLiteral" value="\n"/>
            </op1>
            <op2 xsi:type="dbl:StringLiteral" value="\n"/>
          </op1>
          <op2 xsi:type="dbl:StringLiteral" value="\n"/>
        </outputs>
      </statements>
      <statements xsi:type="dbl:SwitchStatement">
        <variable>
          <idExpr referencedElement="//@modules.0/@functions.7/@statements.8"/>
        </variable>
        <cases>
          <value xsi:type="dbl:StringLiteral" value="ha"/>
          <body xsi:type="dbl:Print">
            <outputs xsi:type="dbl:StringLiteral" value="ha"/>
          </body>
          <body xsi:type="dbl:BreakStatement"/>
        </cases>
        <cases>
          <value xsi:type="dbl:StringLiteral" value="llo"/>
          <body xsi:type="dbl:Print">
            <outputs xsi:type="dbl:StringLiteral" value="llo"/>
          </body>
          <body xsi:type="dbl:BreakStatement"/>
        </cases>
        <cases>
          <value xsi:type="dbl:StringLiteral" value="hallo"/>
          <body xsi:type="dbl:Print">
            <outputs xsi:type="dbl:StringLiteral" value="found"/>
          </body>
          <body xsi:type="dbl:BreakStatement"/>
        </cases>
        <defaultCase>
          <body xsi:type="dbl:Print">
            <outputs xsi:type="dbl:StringLiteral" value="notFound"/>
          </body>
          <body xsi:type="dbl:BreakStatement"/>
        </defaultCase>
      </statements>
      <statements xsi:type="dbl:Print">
        <outputs xsi:type="dbl:Plus">
          <op1 xsi:type="dbl:Plus">
            <op1 xsi:type="dbl:Plus">
              <op1 xsi:type="dbl:Plus">
                <op1 xsi:type="dbl:StringLiteral" value="\n"/>
                <op2 xsi:type="dbl:StringLiteral" value="TEST:"/>
              </op1>
              <op2 xsi:type="dbl:StringLiteral" value="\n"/>
            </op1>
            <op2 xsi:type="dbl:StringLiteral" value="\n"/>
          </op1>
          <op2 xsi:type="dbl:StringLiteral" value="\n"/>
        </outputs>
      </statements>
      <statements xsi:type="dbl:IfStatement">
        <condition xsi:type="dbl:Equal">
          <op1 xsi:type="dbl:IdExpr">
            <parentIdExpr referencedElement="//@modules.0/@functions.7/@statements.8"/>
            <predefinedId xsi:type="dbl:SizeOfArray"/>
          </op1>
          <op2 xsi:type="dbl:IntLiteral" value="5"/>
        </condition>
        <trueCase xsi:type="dbl:Print">
          <outputs xsi:type="dbl:StringLiteral" value="BUADABFJBJFAB"/>
        </trueCase>
      </statements>
      <statements xsi:type="dbl:IfStatement">
        <condition xsi:type="dbl:NotEqual">
          <op1 xsi:type="dbl:IdExpr">
            <parentIdExpr referencedElement="//@modules.0/@functions.7/@statements.8"/>
            <predefinedId xsi:type="dbl:SizeOfArray"/>
          </op1>
          <op2 xsi:type="dbl:IntLiteral" value="5"/>
        </condition>
        <trueCase xsi:type="dbl:LocalScopeStatement">
          <statements xsi:type="dbl:Variable" name="x">
            <primitiveType xsi:type="dbl:IntType"/>
          </statements>
        </trueCase>
      </statements>
      <statements xsi:type="dbl:Variable" name="dyn">
        <primitiveType xsi:type="dbl:DoubleType"/>
        <typeArrayDimensions/>
        <typeArrayDimensions/>
        <initialValue xsi:type="dbl:CreateObject">
          <primitiveType xsi:type="dbl:DoubleType"/>
          <typeArrayDimensions>
            <size xsi:type="dbl:IntLiteral" value="5"/>
          </typeArrayDimensions>
          <typeArrayDimensions/>
        </initialValue>
      </statements>
      <statements xsi:type="dbl:Assignment">
        <variable>
          <idExpr referencedElement="//@modules.0/@functions.7/@statements.17">
            <arrayIndex xsi:type="dbl:IntLiteral"/>
          </idExpr>
        </variable>
        <value xsi:type="dbl:CreateObject">
          <primitiveType xsi:type="dbl:DoubleType"/>
          <typeArrayDimensions>
            <size xsi:type="dbl:IntLiteral" value="3"/>
          </typeArrayDimensions>
        </value>
      </statements>
      <statements xsi:type="dbl:Assignment">
        <variable>
          <idExpr referencedElement="//@modules.0/@functions.7/@statements.17">
            <arrayIndex xsi:type="dbl:IntLiteral" value="1"/>
          </idExpr>
        </variable>
        <value xsi:type="dbl:CreateObject">
          <primitiveType xsi:type="dbl:DoubleType"/>
          <typeArrayDimensions>
            <size xsi:type="dbl:IntLiteral" value="4"/>
          </typeArrayDimensions>
        </value>
      </statements>
      <statements xsi:type="dbl:Assignment">
        <variable>
          <idExpr referencedElement="//@modules.0/@functions.7/@statements.17">
            <arrayIndex xsi:type="dbl:IntLiteral" value="1"/>
            <arrayIndex xsi:type="dbl:IntLiteral" value="1"/>
          </idExpr>
        </variable>
        <value xsi:type="dbl:DoubleLiteral" value="3.5"/>
      </statements>
      <statements xsi:type="dbl:Print">
        <outputs xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.7/@statements.17">
          <arrayIndex xsi:type="dbl:IntLiteral" value="1"/>
          <arrayIndex xsi:type="dbl:IntLiteral" value="1"/>
        </outputs>
      </statements>
      <statements xsi:type="dbl:Variable" name="n">
        <primitiveType xsi:type="dbl:StringType"/>
        <typeArrayDimensions/>
        <typeArrayDimensions/>
        <initialValue xsi:type="dbl:CreateObject">
          <primitiveType xsi:type="dbl:StringType"/>
          <typeArrayDimensions>
            <size xsi:type="dbl:IntLiteral" value="2"/>
          </typeArrayDimensions>
          <typeArrayDimensions>
            <size xsi:type="dbl:IntLiteral" value="2"/>
          </typeArrayDimensions>
        </initialValue>
      </statements>
      <statements xsi:type="dbl:Variable" name="as">
        <typeArrayDimensions/>
        <classifierType referencedElement="//@modules.0/@classes.0"/>
        <initialValue xsi:type="dbl:CreateObject">
          <typeArrayDimensions>
            <size xsi:type="dbl:IntLiteral" value="15"/>
          </typeArrayDimensions>
          <classifierType referencedElement="//@modules.0/@classes.0"/>
        </initialValue>
      </statements>
      <statements xsi:type="dbl:Variable" name="double">
        <primitiveType xsi:type="dbl:BoolType"/>
        <typeArrayDimensions/>
        <initialValue xsi:type="dbl:CreateObject">
          <primitiveType xsi:type="dbl:BoolType"/>
          <typeArrayDimensions>
            <size xsi:type="dbl:IntLiteral" value="1"/>
          </typeArrayDimensions>
        </initialValue>
      </statements>
      <statements xsi:type="dbl:Assignment">
        <variable>
          <idExpr referencedElement="//@modules.0/@functions.7/@statements.22">
            <arrayIndex xsi:type="dbl:IntLiteral"/>
            <arrayIndex xsi:type="dbl:IntLiteral"/>
          </idExpr>
        </variable>
        <value xsi:type="dbl:StringLiteral" value="beo"/>
      </statements>
      <statements xsi:type="dbl:Print">
        <outputs xsi:type="dbl:Plus">
          <op1 xsi:type="dbl:Plus">
            <op1 xsi:type="dbl:Plus">
              <op1 xsi:type="dbl:Plus">
                <op1 xsi:type="dbl:Plus">
                  <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.7/@statements.22"/>
                  <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.7/@statements.22">
                    <arrayIndex xsi:type="dbl:IntLiteral"/>
                    <arrayIndex xsi:type="dbl:IntLiteral"/>
                  </op2>
                </op1>
                <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.7/@statements.22">
                  <arrayIndex xsi:type="dbl:IntLiteral" value="1"/>
                  <arrayIndex xsi:type="dbl:IntLiteral" value="1"/>
                </op2>
              </op1>
              <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.7/@statements.23">
                <arrayIndex xsi:type="dbl:IntLiteral" value="5"/>
              </op2>
            </op1>
            <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.7/@statements.24">
              <arrayIndex xsi:type="dbl:IntLiteral"/>
            </op2>
          </op1>
          <op2 xsi:type="dbl:StringLiteral" value="\n"/>
        </outputs>
      </statements>
      <statements xsi:type="dbl:Variable" name="testia">
        <primitiveType xsi:type="dbl:StringType"/>
        <initialValue xsi:type="dbl:Plus">
          <op1 xsi:type="dbl:StringLiteral" value="beo"/>
          <op2 xsi:type="dbl:CreateObject">
            <classifierType referencedElement="//@modules.0/@classes.0">
              <callPart>
                <callArguments xsi:type="dbl:IntLiteral" value="23"/>
              </callPart>
            </classifierType>
          </op2>
        </initialValue>
      </statements>
      <statements xsi:type="dbl:Print">
        <outputs xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.7/@statements.27"/>
      </statements>
      <statements xsi:type="dbl:Assignment">
        <variable>
          <idExpr referencedElement="//@modules.0/@variables.1">
            <arrayIndex xsi:type="dbl:IntLiteral"/>
          </idExpr>
        </variable>
        <value xsi:type="dbl:StringLiteral" value="boppo"/>
      </statements>
      <statements xsi:type="dbl:Variable" name="se">
        <primitiveType xsi:type="dbl:IntType"/>
        <typeArrayDimensions/>
        <initialValue xsi:type="dbl:CreateObject">
          <primitiveType xsi:type="dbl:IntType"/>
          <typeArrayDimensions>
            <size xsi:type="dbl:IntLiteral" value="5"/>
          </typeArrayDimensions>
        </initialValue>
      </statements>
      <statements xsi:type="dbl:FunctionCall">
        <callIdExpr referencedElement="//@modules.0/@functions.2">
          <callPart>
            <callArguments xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.7/@statements.30"/>
          </callPart>
        </callIdExpr>
      </statements>
      <statements xsi:type="dbl:Print">
        <outputs xsi:type="dbl:Plus">
          <op1 xsi:type="dbl:Plus">
            <op1 xsi:type="dbl:Plus">
              <op1 xsi:type="dbl:StringLiteral" value="\n"/>
              <op2 xsi:type="dbl:StringLiteral" value="TEST:"/>
            </op1>
            <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.7/@statements.30">
              <arrayIndex xsi:type="dbl:IntLiteral"/>
            </op2>
          </op1>
          <op2 xsi:type="dbl:StringLiteral" value="\n"/>
        </outputs>
      </statements>
      <statements xsi:type="dbl:Variable" name="d">
        <classifierType referencedElement="//@modules.0/@classes.3"/>
        <initialValue xsi:type="dbl:CreateObject">
          <classifierType referencedElement="//@modules.0/@classes.3">
            <callPart/>
          </classifierType>
        </initialValue>
      </statements>
      <statements xsi:type="dbl:Variable" name="a">
        <classifierType referencedElement="//@modules.0/@classes.0"/>
        <initialValue xsi:type="dbl:NullLiteral"/>
      </statements>
      <statements xsi:type="dbl:Print">
        <outputs xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.7/@statements.34"/>
      </statements>
      <statements xsi:type="dbl:Variable" name="seu">
        <primitiveType xsi:type="dbl:StringType"/>
        <initialValue xsi:type="dbl:Cast">
          <primitiveType xsi:type="dbl:StringType"/>
          <op xsi:type="dbl:Plus">
            <op1 xsi:type="dbl:StringLiteral" value="su"/>
            <op2 xsi:type="dbl:StringLiteral" value="se"/>
          </op>
        </initialValue>
      </statements>
      <statements xsi:type="dbl:Print">
        <outputs xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.7/@statements.36"/>
      </statements>
      <statements xsi:type="dbl:Variable" name="b">
        <classifierType referencedElement="//@modules.0/@classes.1"/>
        <initialValue xsi:type="dbl:CreateObject">
          <classifierType referencedElement="//@modules.0/@classes.1">
            <callPart>
              <callArguments xsi:type="dbl:IntLiteral" value="15"/>
            </callPart>
          </classifierType>
        </initialValue>
      </statements>
      <statements xsi:type="dbl:Variable" name="x">
        <classifierType referencedElement="//@modules.0/@classes.0"/>
        <initialValue xsi:type="dbl:CreateObject">
          <classifierType referencedElement="//@modules.0/@classes.3">
            <callPart/>
          </classifierType>
        </initialValue>
      </statements>
      <statements xsi:type="dbl:Print">
        <outputs xsi:type="dbl:Plus">
          <op1 xsi:type="dbl:InstanceOf">
            <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.7/@statements.39"/>
            <op2 xsi:type="dbl:TypeAccess">
              <idExpr referencedElement="//@modules.0/@classes.3"/>
            </op2>
          </op1>
          <op2 xsi:type="dbl:StringLiteral" value="\n"/>
        </outputs>
      </statements>
      <statements xsi:type="dbl:Variable" name="y">
        <classifierType referencedElement="//@modules.0/@classes.3"/>
        <initialValue xsi:type="dbl:CreateObject">
          <classifierType referencedElement="//@modules.0/@classes.3">
            <callPart/>
          </classifierType>
        </initialValue>
      </statements>
      <statements xsi:type="dbl:FunctionCall">
        <callIdExpr referencedElement="//@modules.0/@functions.3">
          <callPart>
            <callArguments xsi:type="dbl:Cast">
              <classifierType referencedElement="//@modules.0/@classes.2"/>
              <op xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.7/@statements.34"/>
            </callArguments>
          </callPart>
        </callIdExpr>
      </statements>
      <statements xsi:type="dbl:FunctionCall">
        <callIdExpr referencedElement="//@modules.0/@classes.1/@methods.1">
          <parentIdExpr referencedElement="//@modules.0/@functions.7/@statements.38"/>
          <callPart/>
        </callIdExpr>
      </statements>
      <statements xsi:type="dbl:Variable" name="c">
        <classifierType referencedElement="//@modules.0/@classes.2"/>
        <initialValue xsi:type="dbl:CreateObject">
          <classifierType referencedElement="//@modules.0/@classes.2">
            <callPart>
              <callArguments xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.7/@statements.34"/>
              <callArguments xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.7/@statements.38"/>
            </callPart>
          </classifierType>
        </initialValue>
      </statements>
      <statements xsi:type="dbl:Variable" name="e">
        <classifierType referencedElement="//@modules.0/@classes.0"/>
        <initialValue xsi:type="dbl:CreateObject">
          <classifierType referencedElement="//@modules.0/@classes.1">
            <callPart>
              <callArguments xsi:type="dbl:IntLiteral" value="15"/>
            </callPart>
          </classifierType>
        </initialValue>
      </statements>
      <statements xsi:type="dbl:Print">
        <outputs xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@attributes.0">
          <parentIdExpr referencedElement="//@modules.0/@functions.7/@statements.45"/>
        </outputs>
      </statements>
      <statements xsi:type="dbl:Print">
        <outputs xsi:type="dbl:Plus">
          <op1 xsi:type="dbl:Plus">
            <op1 xsi:type="dbl:Plus">
              <op1 xsi:type="dbl:Plus">
                <op1 xsi:type="dbl:StringLiteral" value="\n"/>
                <op2 xsi:type="dbl:StringLiteral" value="TEST:"/>
              </op1>
              <op2 xsi:type="dbl:StringLiteral" value="\n"/>
            </op1>
            <op2 xsi:type="dbl:StringLiteral" value="\n"/>
          </op1>
          <op2 xsi:type="dbl:StringLiteral" value="\n"/>
        </outputs>
      </statements>
      <statements xsi:type="dbl:Print">
        <outputs xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.7/@statements.38"/>
      </statements>
      <statements xsi:type="dbl:Print">
        <outputs xsi:type="dbl:StringLiteral" value="\n"/>
      </statements>
      <statements xsi:type="dbl:Variable" name="t">
        <classifierType referencedElement="//@modules.0/@classes.0"/>
        <initialValue xsi:type="dbl:Cast">
          <classifierType referencedElement="//@modules.0/@classes.0"/>
          <op xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.7/@statements.38"/>
        </initialValue>
      </statements>
      <statements xsi:type="dbl:Print">
        <outputs xsi:type="dbl:Plus">
          <op1 xsi:type="dbl:Plus">
            <op1 xsi:type="dbl:Plus">
              <op1 xsi:type="dbl:Plus">
                <op1 xsi:type="dbl:StringLiteral" value="toString:"/>
                <op2 xsi:type="dbl:Cast">
                  <classifierType referencedElement="//@modules.0/@classes.0"/>
                  <op xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.7/@statements.38"/>
                </op2>
              </op1>
              <op2 xsi:type="dbl:StringLiteral" value="Attribut: "/>
            </op1>
            <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@attributes.1">
              <parentIdExpr referencedElement="//@modules.0/@functions.7/@statements.50"/>
            </op2>
          </op1>
          <op2 xsi:type="dbl:StringLiteral" value="\n"/>
        </outputs>
      </statements>
      <statements xsi:type="dbl:Print">
        <outputs xsi:type="dbl:InstanceOf">
          <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.7/@statements.34"/>
          <op2 xsi:type="dbl:TypeAccess">
            <idExpr referencedElement="//@modules.0/@classes.0"/>
          </op2>
        </outputs>
      </statements>
      <statements xsi:type="dbl:Print">
        <outputs xsi:type="dbl:InstanceOf">
          <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.7/@statements.34"/>
          <op2 xsi:type="dbl:TypeAccess">
            <idExpr referencedElement="//@modules.0/@classes.1"/>
          </op2>
        </outputs>
      </statements>
      <statements xsi:type="dbl:Print">
        <outputs xsi:type="dbl:InstanceOf">
          <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.7/@statements.38"/>
          <op2 xsi:type="dbl:TypeAccess">
            <idExpr referencedElement="//@modules.0/@classes.1"/>
          </op2>
        </outputs>
      </statements>
      <statements xsi:type="dbl:Print">
        <outputs xsi:type="dbl:Plus">
          <op1 xsi:type="dbl:Plus">
            <op1 xsi:type="dbl:Plus">
              <op1 xsi:type="dbl:Plus">
                <op1 xsi:type="dbl:StringLiteral" value="\n"/>
                <op2 xsi:type="dbl:StringLiteral" value="TEST:"/>
              </op1>
              <op2 xsi:type="dbl:StringLiteral" value="\n"/>
            </op1>
            <op2 xsi:type="dbl:StringLiteral" value="\n"/>
          </op1>
          <op2 xsi:type="dbl:StringLiteral" value="\n"/>
        </outputs>
      </statements>
      <statements xsi:type="dbl:Variable" name="test">
        <classifierType referencedElement="//@modules.0/@classes.0"/>
        <initialValue xsi:type="dbl:CreateObject">
          <classifierType referencedElement="//@modules.0/@classes.1">
            <callPart>
              <callArguments xsi:type="dbl:IntLiteral" value="32"/>
            </callPart>
          </classifierType>
        </initialValue>
      </statements>
      <statements xsi:type="dbl:Print">
        <outputs xsi:type="dbl:Plus">
          <op1 xsi:type="dbl:Plus">
            <op1 xsi:type="dbl:Plus">
              <op1 xsi:type="dbl:StringLiteral" value="\n"/>
              <op2 xsi:type="dbl:StringLiteral" value="TEST:"/>
            </op1>
            <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.7/@statements.56"/>
          </op1>
          <op2 xsi:type="dbl:StringLiteral" value="\n"/>
        </outputs>
      </statements>
      <statements xsi:type="dbl:Print">
        <outputs xsi:type="dbl:StringLiteral" value="\n"/>
      </statements>
      <statements xsi:type="dbl:Print">
        <outputs xsi:type="dbl:Plus">
          <op1 xsi:type="dbl:Plus">
            <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.7/@statements.34"/>
            <op2 xsi:type="dbl:StringLiteral" value="\n"/>
          </op1>
          <op2 xsi:type="dbl:CreateObject">
            <classifierType referencedElement="//@modules.0/@classes.0">
              <callPart/>
            </classifierType>
          </op2>
        </outputs>
      </statements>
      <statements xsi:type="dbl:Print">
        <outputs xsi:type="dbl:Plus">
          <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.7/@statements.38"/>
          <op2 xsi:type="dbl:StringLiteral" value="\n"/>
        </outputs>
      </statements>
      <statements xsi:type="dbl:Print">
        <outputs xsi:type="dbl:Plus">
          <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.7/@statements.33"/>
          <op2 xsi:type="dbl:StringLiteral" value="\n"/>
        </outputs>
      </statements>
      <statements xsi:type="dbl:Print">
        <outputs xsi:type="dbl:Plus">
          <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.7/@statements.44"/>
          <op2 xsi:type="dbl:StringLiteral" value="\n"/>
        </outputs>
      </statements>
      <statements xsi:type="dbl:Variable" name="p">
        <primitiveType xsi:type="dbl:StringType"/>
        <initialValue xsi:type="dbl:StringLiteral" value="hallo"/>
      </statements>
      <statements xsi:type="dbl:Variable" name="q">
        <primitiveType xsi:type="dbl:StringType"/>
        <initialValue xsi:type="dbl:Plus">
          <op1 xsi:type="dbl:StringLiteral" value="hello"/>
          <op2 xsi:type="dbl:Plus">
            <op1 xsi:type="dbl:IdExpr">
              <parentIdExpr referencedElement="//@modules.0/@functions.7/@statements.63"/>
              <predefinedId xsi:type="dbl:SizeOfArray"/>
            </op1>
            <op2 xsi:type="dbl:IntLiteral" value="5"/>
          </op2>
        </initialValue>
      </statements>
      <statements xsi:type="dbl:Variable" name="xeo">
        <primitiveType xsi:type="dbl:StringType"/>
        <initialValue xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.7/@statements.63"/>
      </statements>
      <statements xsi:type="dbl:Print">
        <outputs xsi:type="dbl:Plus">
          <op1 xsi:type="dbl:Plus">
            <op1 xsi:type="dbl:Plus">
              <op1 xsi:type="dbl:StringLiteral" value="luop"/>
              <op2 xsi:type="dbl:StringLiteral" value="\n"/>
            </op1>
            <op2 xsi:type="dbl:StringLiteral" value="loppi"/>
          </op1>
          <op2 xsi:type="dbl:Plus">
            <op1 xsi:type="dbl:StringLiteral" value="mi"/>
            <op2 xsi:type="dbl:Plus">
              <op1 xsi:type="dbl:Plus">
                <op1 xsi:type="dbl:IntLiteral" value="1"/>
                <op2 xsi:type="dbl:IntLiteral" value="2"/>
              </op1>
              <op2 xsi:type="dbl:IntLiteral" value="3"/>
            </op2>
          </op2>
        </outputs>
      </statements>
      <statements xsi:type="dbl:Assignment">
        <variable>
          <idExpr referencedElement="//@modules.0/@functions.7/@statements.63"/>
        </variable>
        <value xsi:type="dbl:StringLiteral" value="baxi"/>
      </statements>
      <statements xsi:type="dbl:Print">
        <outputs xsi:type="dbl:Plus">
          <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.7/@statements.63"/>
          <op2 xsi:type="dbl:StringLiteral" value="\n"/>
        </outputs>
      </statements>
      <statements xsi:type="dbl:Print">
        <outputs xsi:type="dbl:Plus">
          <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.7/@statements.65"/>
          <op2 xsi:type="dbl:StringLiteral" value="\n"/>
        </outputs>
      </statements>
      <statements xsi:type="dbl:Assignment">
        <variable>
          <idExpr referencedElement="//@modules.0/@functions.7/@statements.65"/>
        </variable>
        <value xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.7/@statements.64"/>
      </statements>
      <statements xsi:type="dbl:Print">
        <outputs xsi:type="dbl:Plus">
          <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.7/@statements.65"/>
          <op2 xsi:type="dbl:StringLiteral" value="\n"/>
        </outputs>
      </statements>
      <statements xsi:type="dbl:Print">
        <outputs xsi:type="dbl:Plus">
          <op1 xsi:type="dbl:Plus">
            <op1 xsi:type="dbl:Plus">
              <op1 xsi:type="dbl:Plus">
                <op1 xsi:type="dbl:Plus">
                  <op1 xsi:type="dbl:Plus">
                    <op1 xsi:type="dbl:Plus">
                      <op1 xsi:type="dbl:Plus">
                        <op1 xsi:type="dbl:Plus">
                          <op1 xsi:type="dbl:StringLiteral" value="bo"/>
                          <op2 xsi:type="dbl:Plus">
                            <op1 xsi:type="dbl:Plus">
                              <op1 xsi:type="dbl:Plus">
                                <op1 xsi:type="dbl:Plus">
                                  <op1 xsi:type="dbl:IntLiteral" value="1"/>
                                  <op2 xsi:type="dbl:IntLiteral" value="3"/>
                                </op1>
                                <op2 xsi:type="dbl:StringLiteral" value="su"/>
                              </op1>
                              <op2 xsi:type="dbl:StringLiteral" value="ss"/>
                            </op1>
                            <op2 xsi:type="dbl:IntLiteral" value="8"/>
                          </op2>
                        </op1>
                        <op2 xsi:type="dbl:IntLiteral" value="5"/>
                      </op1>
                      <op2 xsi:type="dbl:StringLiteral" value="lea"/>
                    </op1>
                    <op2 xsi:type="dbl:Plus">
                      <op1 xsi:type="dbl:And">
                        <op1 xsi:type="dbl:TrueLiteral"/>
                        <op2 xsi:type="dbl:FalseLiteral"/>
                      </op1>
                      <op2 xsi:type="dbl:StringLiteral" value="lo"/>
                    </op2>
                  </op1>
                  <op2 xsi:type="dbl:StringLiteral" value="la"/>
                </op1>
                <op2 xsi:type="dbl:Plus">
                  <op1 xsi:type="dbl:Plus">
                    <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.7/@statements.44"/>
                    <op2 xsi:type="dbl:StringLiteral" value=""/>
                  </op1>
                  <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.7/@statements.33"/>
                </op2>
              </op1>
              <op2 xsi:type="dbl:StringLiteral" value="bee"/>
            </op1>
            <op2 xsi:type="dbl:Plus">
              <op1 xsi:type="dbl:IntLiteral" value="435"/>
              <op2 xsi:type="dbl:StringLiteral" value="lax"/>
            </op2>
          </op1>
          <op2 xsi:type="dbl:StringLiteral" value="\n"/>
        </outputs>
      </statements>
      <statements xsi:type="dbl:Print">
        <outputs xsi:type="dbl:Plus">
          <op1 xsi:type="dbl:Plus">
            <op1 xsi:type="dbl:Plus">
              <op1 xsi:type="dbl:Plus">
                <op1 xsi:type="dbl:StringLiteral" value="lu"/>
                <op2 xsi:type="dbl:Plus">
                  <op1 xsi:type="dbl:Plus">
                    <op1 xsi:type="dbl:StringLiteral" value="lo"/>
                    <op2 xsi:type="dbl:StringLiteral" value="le"/>
                  </op1>
                  <op2 xsi:type="dbl:Not">
                    <op xsi:type="dbl:TrueLiteral"/>
                  </op2>
                </op2>
              </op1>
              <op2 xsi:type="dbl:StringLiteral" value="la"/>
            </op1>
            <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.7/@statements.44"/>
          </op1>
          <op2 xsi:type="dbl:StringLiteral" value="\n"/>
        </outputs>
      </statements>
      <statements xsi:type="dbl:Print">
        <outputs xsi:type="dbl:Plus">
          <op1 xsi:type="dbl:Plus">
            <op1 xsi:type="dbl:Plus">
              <op1 xsi:type="dbl:IntLiteral" value="1"/>
              <op2 xsi:type="dbl:IntLiteral" value="2"/>
            </op1>
            <op2 xsi:type="dbl:StringLiteral" value="la"/>
          </op1>
          <op2 xsi:type="dbl:Plus">
            <op1 xsi:type="dbl:Plus">
              <op1 xsi:type="dbl:StringLiteral" value="lo"/>
              <op2 xsi:type="dbl:IntLiteral" value="2"/>
            </op1>
            <op2 xsi:type="dbl:IntLiteral" value="3"/>
          </op2>
        </outputs>
      </statements>
      <statements xsi:type="dbl:Print">
        <outputs xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@functions.7/@statements.63"/>
      </statements>
      <statements xsi:type="dbl:Print">
        <outputs xsi:type="dbl:StringLiteral" value="\n"/>
      </statements>
      <statements xsi:type="dbl:Print">
        <outputs xsi:type="dbl:Plus">
          <op1 xsi:type="dbl:IdExpr">
            <parentIdExpr referencedElement="//@modules.0/@functions.7/@statements.63"/>
            <predefinedId xsi:type="dbl:SizeOfArray"/>
          </op1>
          <op2 xsi:type="dbl:StringLiteral" value="hallo"/>
        </outputs>
      </statements>
      <statements xsi:type="dbl:Print">
        <outputs xsi:type="dbl:And">
          <op1 xsi:type="dbl:TrueLiteral"/>
          <op2 xsi:type="dbl:FalseLiteral"/>
        </outputs>
      </statements>
    </functions>
    <variables name="xo">
      <primitiveType xsi:type="dbl:StringType"/>
      <initialValue xsi:type="dbl:StringLiteral" value="A"/>
    </variables>
    <variables name="te">
      <primitiveType xsi:type="dbl:StringType"/>
      <typeArrayDimensions/>
      <initialValue xsi:type="dbl:CreateObject">
        <primitiveType xsi:type="dbl:StringType"/>
        <typeArrayDimensions>
          <size xsi:type="dbl:IntLiteral" value="5"/>
        </typeArrayDimensions>
      </initialValue>
    </variables>
    <variables name="modS">
      <primitiveType xsi:type="dbl:StringType"/>
    </variables>
    <variables name="modD">
      <primitiveType xsi:type="dbl:DoubleType"/>
    </variables>
    <variables name="modB">
      <primitiveType xsi:type="dbl:BoolType"/>
    </variables>
  </modules>
</dbl:Model>
