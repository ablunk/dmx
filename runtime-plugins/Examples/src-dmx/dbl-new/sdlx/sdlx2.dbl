#import "../../dbl"

module sdlx {

extension EnvSendStatement extends dbl SimpleStatement {
	start Send;
	Send -> "send" signal:$$SignalDefinition "to" "pset" targetSet:$$ProcessDefinition ";";
}

extension Env extends dbl ModuleContentExtension {
	start Env;
	Env -> "env" localScope:LocalScopeStatement;	
}

/*

extension System {
	...
	SystemEntity -> ProcessDefinition;
	...
}

extension ProcessDefinition {
	LocalScope -> ProcessDefinition;
	ProcessDefinition -> "process" ...
}

*/

extension System extends dbl ModuleContentExtension {
	start System;
	
	System -> "system" name:ID ";" SystemEntityListOpt "endsystem" ";";
	SystemEntityListOpt -> ;
	SystemEntityListOpt -> entities:list(SystemEntity) SystemEntityListOpt;
	SystemEntity -> ProcessDefinition;
	SystemEntity -> SignalDefinition;
	SystemEntity -> TimerDefinition;
	SystemEntity -> VariableDefinition;
	
	VariableDefinition -> "dcl" VariableList;
	VariableList -> variables:list(Variable) VariableListNextOpt ";";
	VariableListNextOpt -> ;
	VariableListNextOpt -> "," variables:list(Variable) VariableListNextOpt;
	
	// ProcessDefinition extends LocalScope -> "process" ...
	ProcessDefinition -> "process" name:ID ";" ProcessEntityListOpt ProcessBodyOpt "endprocess" ProcessEndNameOpt ";";
	ProcessEndNameOpt -> ;
	ProcessEndNameOpt -> endNameRef:$$ProcessDefinition;
	
	ProcessEntityListOpt -> ;
	ProcessEntityListOpt -> entities:list(ProcessEntity) ProcessEntityListOpt;
	ProcessEntity -> SignalDefinition;
	ProcessEntity -> TimerDefinition;
	ProcessEntity -> VariableDefinition;
	
	ProcessBodyOpt -> ;
	ProcessBodyOpt -> start:Start StateListOpt;
	Start -> "start" ";" Transition;
	
	StateListOpt -> ;
	StateListOpt -> states:list(State) StateListOpt;
	
	State -> "state" name:ID ";" EventListOpt "endstate" StateEndNameOpt ";";
	StateEndNameOpt -> ;
	StateEndNameOpt -> endNameRef:$$State;
	
	EventListOpt -> ;
	EventListOpt -> events:list(Event) EventListOpt;
	Event -> InputPart;
	
	InputPart -> "input" StimulusList ";" Transition;
	StimulusList -> stimulus:list(Stimulus) StimulusListNextOpt;
	StimulusListNextOpt -> ;
	StimulusListNextOpt -> "," stimulus:list(Stimulus) StimulusListNextOpt;
	Stimulus -> "signal" signal:$$SignalDefinition; // SignalVariableBindingsOpt;
	Stimulus -> "timer" timer:$$TimerDefinition;
	Stimulus -> "none" EnablingConditionOpt;
	
	EnablingConditionOpt -> ;
	EnablingConditionOpt -> "provided" enablingCondition:Expression;
	
	Transition -> ActionListOpt TransitionTerminator;
	ActionListOpt -> ;
	ActionListOpt -> actions:list(Action) ActionListOpt;
	
	Action -> Task;
	Action -> TimerReset;
	Action -> TimerSet;
	Action -> Output;
	
	Task -> "task" localScope:LocalScopeStatement;
	
	TimerReset -> "reset" "(" timer:$$TimerDefinition ")" ";";
	TimerSet -> "set" "(" TimerExprOpt "," timer:$$TimerDefinition ")" ";";
	TimerExprOpt -> ;
	TimerExprOpt -> timeExpr:Expression;
	
	Output -> "output" signal:$$SignalDefinition OutputTargetOpt ";";
	OutputTargetOpt -> ;
	OutputTargetOpt -> "to" "pid" targetPid:Expression;
	OutputTargetOpt -> "to" "pset" targetProcess:$$ProcessDefinition;
	
	TransitionTerminator -> "nextState" nextState:$$State ";";
	TransitionTerminator -> "stop" ";";
	
	SignalDefinition -> "signal" name:ID FormalContextParamOpt ";";
	TimerDefinition -> "timer" name:ID ";";
	
	FormalContextParamOpt -> ;
	FormalContextParamOpt -> "(" parameters:list(FormalContextParam) FormalContextParamNextOpt ")";
	FormalContextParamNextOpt -> ;
	FormalContextParamNextOpt -> "," parameters:list(FormalContextParam) FormalContextParamNextOpt;
	FormalContextParam -> primitiveType:PrimitiveType;
}

}