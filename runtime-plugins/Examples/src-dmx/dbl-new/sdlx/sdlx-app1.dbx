#import "sdlx"

module sdl0_application {

	boolean debug = true;

	void trace(string msg) {
		if (debug) {
			print time + " - " + active + ": " + msg + "\n";
		}
	}
	
	// a system spec at module level maps to the creation of a corresponding abstract syntax object, which is created
	// (global variable default value assignment) just before the main function is executed.
	system X;
		signal M1;
		
		process P;
			dcl int i=0, int step=1;
		
			timer T1;
			timer T2;

			start;
			nextState A;
				
			state A;
				input none;
					set(step,T1); // PARSE PROBLEM: set(T1) not supported, use set(,T1) instead if needed
					set(10*step,T2);
				nextState A_t;
			endstate A;
				
			state A_t; // state A with Timers running
				input none provided i == 0;
					task {
						trace("i is zero");
					}
				nextState A_t;
					
				input none provided i > 0;
					task {
						trace("i is greater zero");
					}
				nextState A_t;
					
				input signal M1; // PARSE PROBLEM: added keyword signal to distingiush signal and timer
					task {
						trace("M1 received");
						trace("i=" + i); // ID RESOLUTION PROBLEM: cannot access local declared variable i
					}
				nextState A_t;
				
				input timer T1;
					task {
						trace("1 time unit passed.");
						i = i + 1;
					}
				nextState A;
					
				input timer T2;
					task {
						trace("10 time units passed.");
					}
				nextState A;
					
			endstate A_t;	
		endprocess P;
			
		process Q;
			timer T3;

			start;
				set(5,T3);
			nextState K;
			
			state K;
				input timer T3;
					output M1 to pset P;
				nextState K;
			endstate K;
		endprocess Q; // putting a correct name (like Q here) cannot be defined / enforced
	endsystem;
	
	system T;
		
		semaphore SEM, kind=BINARY, policy=FIFO, initial=FULL;
		
		process ST;
			dcl int i2=0;
		
			start;
				take SEM with NO_WAIT;
				take SEM with NO_WAIT,
					on OK {
						task { trace("take SEM OK"); }
						give SEM;
					},
					on ERROR {
						task { trace("take SEM ERROR"); }
						give SEM;
					}
				;
				take SEM with timeout=10;
				take SEM FOREVER;
				give SEM;
			stop;
		endprocess ST;
	endsystem;
	
	env {
		trace("begin");
		advance 12;
		trace("after 12 time units");
		send M1 to pset P;
		advance 10;
	}
	
}

