<?xml version="1.0" encoding="ASCII"?>
<dbl:Model xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dbl="http://www.informatik.hu-berlin.de/sam/dbl">
  <imports file="sdlx2">
    <model href="sdlx2.xmi#/"/>
  </imports>
  <modules name="sdlx_application">
    <extensions xsi:type="dbl:SdlSystem_System_extension" name="X" concreteSyntax="system X;&#xA;&#x9;&#x9;signal M1;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;process Q;&#xA;&#x9;&#x9;&#x9;timer T3;&#xA;&#xA;&#x9;&#x9;&#x9;stategraph {&#xA;&#x9;&#x9;&#x9;&#x9;start;&#xA;&#x9;&#x9;&#x9;&#x9;state K;&#xA;&#x9;&#x9;&#x9;&#x9;endstate K;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;endprocess Q; // putting a correct name (like Q here) cannot be defined / enforced&#xA;&#x9;&#x9;&#xA;&#x9;endsystem;" instanceOfExtensionDefinition="true">
      <entities xsi:type="dbl:SdlSystem_SignalDefinition_extension" name="M1" concreteSyntax="signal M1;" instanceOfExtensionDefinition="true"/>
      <entities concreteSyntax="process Q;&#xA;&#x9;&#x9;&#x9;timer T3;&#xA;&#xA;&#x9;&#x9;&#x9;stategraph {&#xA;&#x9;&#x9;&#x9;&#x9;start;&#xA;&#x9;&#x9;&#x9;&#x9;state K;&#xA;&#x9;&#x9;&#x9;&#x9;endstate K;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;endprocess Q;" instanceOfExtensionDefinition="true">
        <pdef name="Q" concreteSyntax="process Q;&#xA;&#x9;&#x9;&#x9;timer T3;&#xA;&#xA;&#x9;&#x9;&#x9;stategraph {&#xA;&#x9;&#x9;&#x9;&#x9;start;&#xA;&#x9;&#x9;&#x9;&#x9;state K;&#xA;&#x9;&#x9;&#x9;&#x9;endstate K;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;endprocess Q;" instanceOfExtensionDefinition="true" endNameRef="//@modules.0/@extensions.0/@entities.1/@pdef">
          <entities xsi:type="dbl:SdlSystem_TimerDefinition_extension" name="T3" concreteSyntax="timer T3;" instanceOfExtensionDefinition="true"/>
          <stateMachine concreteSyntax="stategraph {&#xA;&#x9;&#x9;&#x9;&#x9;start;&#xA;&#x9;&#x9;&#x9;&#x9;state K;&#xA;&#x9;&#x9;&#x9;&#x9;endstate K;&#xA;&#x9;&#x9;&#x9;}" instanceOfExtensionDefinition="true">
            <start concreteSyntax="start;" instanceOfExtensionDefinition="true"/>
            <states name="K" concreteSyntax="state K;&#xA;&#x9;&#x9;&#x9;&#x9;endstate K;" instanceOfExtensionDefinition="true" endNameRef="//@modules.0/@extensions.0/@entities.1/@pdef/@stateMachine/@states.0"/>
          </stateMachine>
        </pdef>
      </entities>
    </extensions>
    <extensions xsi:type="dbl:Env_Env_extension" concreteSyntax="env {&#xA;&#x9;&#x9;trace(&quot;begin&quot;);&#xA;&#x9;&#x9;advance 12;&#xA;&#x9;&#x9;trace(&quot;after 12 time units&quot;);&#xA;&#x9;&#x9;advance 10;&#xA;&#x9;}" instanceOfExtensionDefinition="true">
      <localScope concreteSyntax="{&#xA;&#x9;&#x9;trace(&quot;begin&quot;);&#xA;&#x9;&#x9;advance 12;&#xA;&#x9;&#x9;trace(&quot;after 12 time units&quot;);&#xA;&#x9;&#x9;advance 10;&#xA;&#x9;}">
        <statements xsi:type="dbl:ProcedureCall" concreteSyntax="trace(&quot;begin&quot;)">
          <callIdExpr concreteSyntax="trace(&quot;begin&quot;)" referencedElement="//@modules.0/@procedures.0">
            <callPart>
              <callArguments xsi:type="dbl:StringLiteral" concreteSyntax="&quot;begin&quot;" value="begin"/>
            </callPart>
          </callIdExpr>
        </statements>
        <statements xsi:type="dbl:Advance" concreteSyntax="advance 12">
          <time xsi:type="dbl:IntLiteral" concreteSyntax="12" value="12"/>
        </statements>
        <statements xsi:type="dbl:ProcedureCall" concreteSyntax="trace(&quot;after 12 time units&quot;)">
          <callIdExpr concreteSyntax="trace(&quot;after 12 time units&quot;)" referencedElement="//@modules.0/@procedures.0">
            <callPart>
              <callArguments xsi:type="dbl:StringLiteral" concreteSyntax="&quot;after 12 time units&quot;" value="after 12 time units"/>
            </callPart>
          </callIdExpr>
        </statements>
        <statements xsi:type="dbl:Advance" concreteSyntax="advance 10">
          <time xsi:type="dbl:IntLiteral" concreteSyntax="10" value="10"/>
        </statements>
      </localScope>
    </extensions>
    <procedures name="trace">
      <primitiveType xsi:type="dbl:VoidType"/>
      <statements xsi:type="dbl:IfStatement" concreteSyntax="if (debug) {&#xA;&#x9;&#x9;&#x9;print time + &quot; - &quot; + active + &quot;: &quot; + msg + &quot;\n&quot;;&#xA;&#x9;&#x9;}">
        <condition xsi:type="dbl:IdExpr" concreteSyntax="debug" referencedElement="//@modules.0/@variables.0"/>
        <trueCase xsi:type="dbl:LocalScopeStatement" concreteSyntax="{&#xA;&#x9;&#x9;&#x9;print time + &quot; - &quot; + active + &quot;: &quot; + msg + &quot;\n&quot;;&#xA;&#x9;&#x9;}">
          <statements xsi:type="dbl:Print" concreteSyntax="print time + &quot; - &quot; + active + &quot;: &quot; + msg + &quot;\n&quot;">
            <outputs xsi:type="dbl:Plus" concreteSyntax="time + &quot; - &quot; + active + &quot;: &quot; + msg + &quot;\n&quot;">
              <op1 xsi:type="dbl:Plus" concreteSyntax="time + &quot; - &quot; + active + &quot;: &quot; + msg">
                <op1 xsi:type="dbl:Plus" concreteSyntax="time + &quot; - &quot; + active + &quot;: &quot;">
                  <op1 xsi:type="dbl:Plus" concreteSyntax="time + &quot; - &quot; + active">
                    <op1 xsi:type="dbl:Plus" concreteSyntax="time + &quot; - &quot;">
                      <op1 xsi:type="dbl:TimeLiteral" concreteSyntax="time"/>
                      <op2 xsi:type="dbl:StringLiteral" concreteSyntax="&quot; - &quot;" value=" - "/>
                    </op1>
                    <op2 xsi:type="dbl:ActiveLiteral" concreteSyntax="active"/>
                  </op1>
                  <op2 xsi:type="dbl:StringLiteral" concreteSyntax="&quot;: &quot;" value=": "/>
                </op1>
                <op2 xsi:type="dbl:IdExpr" concreteSyntax="msg" referencedElement="//@modules.0/@procedures.0/@parameters.0"/>
              </op1>
              <op2 xsi:type="dbl:StringLiteral" concreteSyntax="&quot;\n&quot;" value="\n"/>
            </outputs>
          </statements>
        </trueCase>
      </statements>
      <parameters name="msg">
        <primitiveType xsi:type="dbl:StringType"/>
      </parameters>
    </procedures>
    <variables name="debug" concreteSyntax="boolean debug = true">
      <primitiveType xsi:type="dbl:BoolType"/>
      <initialValue xsi:type="dbl:TrueLiteral" concreteSyntax="true"/>
    </variables>
  </modules>
</dbl:Model>
