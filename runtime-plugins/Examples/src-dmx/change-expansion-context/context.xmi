<?xml version="1.0" encoding="ASCII"?>
<dbl:Model xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dbl="http://www.informatik.hu-berlin.de/sam/dbl">
  <imports file="../dbl">
    <model href="../dbl.xmi#/"/>
  </imports>
  <imports file="../stdx">
    <model href="../stdx.xmi#/"/>
  </imports>
  <modules name="context">
    <extensionDefs name="Context">
      <extendedConcept xsi:type="dbl:Clazz" href="../dbl.xmi#//@modules.0/@classifiers.30"/>
      <textualSyntaxDef startRule="//@modules.0/@extensionDefs.0/@textualSyntaxDef/@rules.0">
        <rules name="Context">
          <rhs xsi:type="dbl:SequenceExpr">
            <sequence xsi:type="dbl:TerminalExpr" terminal="context"/>
            <sequence xsi:type="dbl:PropertyBindingExpr" name="context">
              <propertyType xsi:type="dbl:CompositePropertyType">
                <type xsi:type="dbl:Clazz" href="../dbl.xmi#//@modules.0/@classifiers.51"/>
              </propertyType>
            </sequence>
            <sequence xsi:type="dbl:PropertyBindingExpr" name="body">
              <propertyType xsi:type="dbl:CompositePropertyType">
                <type xsi:type="dbl:Clazz" href="../dbl.xmi#//@modules.0/@classifiers.44"/>
              </propertyType>
            </sequence>
          </rhs>
        </rules>
      </textualSyntaxDef>
      <mappingDef concreteSyntax="foreach (Statement stm in body.statements) {&#xA;&#x9;&#x9;rewrite(stm, context);&#xA;&#x9;}&#xA;&#x9;expand body;">
        <statements xsi:type="dbl:ForEach_ForEach_extension" concreteSyntax="foreach (Statement stm in body.statements) {&#xA;&#x9;&#x9;rewrite(stm, context);&#xA;&#x9;}" instanceOfExtensionDefinition="true">
          <statements xsi:type="dbl:Variable" name="stm" concreteSyntax="Statement stm">
            <classifierType concreteSyntax="Statement">
              <referencedElement href="../dbl.xmi#//@modules.0/@classifiers.28"/>
            </classifierType>
          </statements>
          <collection xsi:type="dbl:IdExpr" concreteSyntax="body.statements">
            <parentIdExpr concreteSyntax="body" referencedElement="//@modules.0/@extensionDefs.0/@textualSyntaxDef/@rules.0/@rhs/@sequence.2"/>
            <referencedElement href="../dbl.xmi#//@modules.0/@classifiers.43/@attributes.0"/>
          </collection>
          <body concreteSyntax="{&#xA;&#x9;&#x9;rewrite(stm, context);&#xA;&#x9;}">
            <statements xsi:type="dbl:ProcedureCall" concreteSyntax="rewrite(stm, context)">
              <callIdExpr concreteSyntax="rewrite(stm, context)" referencedElement="//@modules.0/@procedures.0">
                <callPart>
                  <callArguments xsi:type="dbl:IdExpr" concreteSyntax="stm" referencedElement="//@modules.0/@extensionDefs.0/@mappingDef/@statements.0/@statements.0"/>
                  <callArguments xsi:type="dbl:IdExpr" concreteSyntax="context" referencedElement="//@modules.0/@extensionDefs.0/@textualSyntaxDef/@rules.0/@rhs/@sequence.1"/>
                </callPart>
              </callIdExpr>
            </statements>
          </body>
        </statements>
        <statements xsi:type="dbl:MappingStatement" concreteSyntax="expand body">
          <parts xsi:type="dbl:DynamicMappingPart">
            <expr xsi:type="dbl:IdExpr" concreteSyntax="body" referencedElement="//@modules.0/@extensionDefs.0/@textualSyntaxDef/@rules.0/@rhs/@sequence.2"/>
          </parts>
        </statements>
      </mappingDef>
    </extensionDefs>
    <procedures name="rewrite">
      <primitiveType xsi:type="dbl:VoidType"/>
      <statements xsi:type="dbl:IfStatement" concreteSyntax="if (obj instanceof IdExpr) {&#xA;&#x9;&#x9;IdExpr idExpr = context as IdExpr;&#xA;&#x9;&#x9;while (idExpr.parentIdExpr != null) {&#xA;&#x9;&#x9;&#x9;idExpr = idExpr.parentIdExpr;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;set expand before idExpr;&#xA;&#x9;&#x9;expand context &quot;.&quot;;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;// insert context + &quot;.&quot; before idExpr;&#xA;&#x9;}&#xA;&#x9;else {&#xA;&#x9;&#x9;foreach (EObject content in obj.eContents()) {&#xA;&#x9;&#x9;&#x9;rewrite(content);&#xA;&#x9;&#x9;}&#x9;&#xA;&#x9;}">
        <condition xsi:type="dbl:InstanceOf" concreteSyntax="obj instanceof IdExpr">
          <op1 xsi:type="dbl:IdExpr" concreteSyntax="obj" referencedElement="//@modules.0/@procedures.0/@parameters.0"/>
          <op2 xsi:type="dbl:TypeAccess" concreteSyntax="IdExpr">
            <idExpr concreteSyntax="IdExpr">
              <referencedElement href="../dbl.xmi#//@modules.0/@classifiers.96"/>
            </idExpr>
          </op2>
        </condition>
        <trueCase xsi:type="dbl:LocalScopeStatement" concreteSyntax="{&#xA;&#x9;&#x9;IdExpr idExpr = context as IdExpr;&#xA;&#x9;&#x9;while (idExpr.parentIdExpr != null) {&#xA;&#x9;&#x9;&#x9;idExpr = idExpr.parentIdExpr;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;set expand before idExpr;&#xA;&#x9;&#x9;expand context &quot;.&quot;;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;// insert context + &quot;.&quot; before idExpr;&#xA;&#x9;}">
          <statements xsi:type="dbl:Variable" name="idExpr" concreteSyntax="IdExpr idExpr = context as IdExpr">
            <classifierType concreteSyntax="IdExpr">
              <referencedElement href="../dbl.xmi#//@modules.0/@classifiers.96"/>
            </classifierType>
            <initialValue xsi:type="dbl:Cast" concreteSyntax="context as IdExpr">
              <classifierType concreteSyntax="IdExpr">
                <referencedElement href="../dbl.xmi#//@modules.0/@classifiers.96"/>
              </classifierType>
              <op xsi:type="dbl:IdExpr" concreteSyntax="context" referencedElement="//@modules.0/@procedures.0/@parameters.1"/>
            </initialValue>
          </statements>
          <statements xsi:type="dbl:WhileStatement" concreteSyntax="while (idExpr.parentIdExpr != null) {&#xA;&#x9;&#x9;&#x9;idExpr = idExpr.parentIdExpr;&#xA;&#x9;&#x9;}">
            <condition xsi:type="dbl:NotEqual" concreteSyntax="idExpr.parentIdExpr != null">
              <op1 xsi:type="dbl:IdExpr" concreteSyntax="idExpr.parentIdExpr">
                <parentIdExpr concreteSyntax="idExpr" referencedElement="//@modules.0/@procedures.0/@statements.0/@trueCase/@statements.0"/>
                <referencedElement href="../dbl.xmi#//@modules.0/@classifiers.96/@attributes.0"/>
              </op1>
              <op2 xsi:type="dbl:NullLiteral" concreteSyntax="null"/>
            </condition>
            <body xsi:type="dbl:LocalScopeStatement" concreteSyntax="{&#xA;&#x9;&#x9;&#x9;idExpr = idExpr.parentIdExpr;&#xA;&#x9;&#x9;}">
              <statements xsi:type="dbl:Assignment" concreteSyntax="idExpr = idExpr.parentIdExpr">
                <variable concreteSyntax="idExpr">
                  <idExpr concreteSyntax="idExpr" referencedElement="//@modules.0/@procedures.0/@statements.0/@trueCase/@statements.0"/>
                </variable>
                <value xsi:type="dbl:IdExpr" concreteSyntax="idExpr.parentIdExpr">
                  <parentIdExpr concreteSyntax="idExpr" referencedElement="//@modules.0/@procedures.0/@statements.0/@trueCase/@statements.0"/>
                  <referencedElement href="../dbl.xmi#//@modules.0/@classifiers.96/@attributes.0"/>
                </value>
              </statements>
            </body>
          </statements>
          <statements xsi:type="dbl:SetGenContextStatement" concreteSyntax="set expand before idExpr">
            <context xsi:type="dbl:IdExpr" concreteSyntax="idExpr" referencedElement="//@modules.0/@procedures.0/@statements.0/@trueCase/@statements.0"/>
          </statements>
          <statements xsi:type="dbl:MappingStatement" concreteSyntax="expand context &quot;.&quot;">
            <parts xsi:type="dbl:DynamicMappingPart">
              <expr xsi:type="dbl:IdExpr" concreteSyntax="context" referencedElement="//@modules.0/@procedures.0/@parameters.1"/>
            </parts>
            <parts xsi:type="dbl:FixedMappingPart" code="."/>
          </statements>
        </trueCase>
        <falseCase xsi:type="dbl:LocalScopeStatement" concreteSyntax="{&#xA;&#x9;&#x9;foreach (EObject content in obj.eContents()) {&#xA;&#x9;&#x9;&#x9;rewrite(content);&#xA;&#x9;&#x9;}&#x9;&#xA;&#x9;}">
          <statements xsi:type="dbl:ForEach_ForEach_extension" concreteSyntax="foreach (EObject content in obj.eContents()) {&#xA;&#x9;&#x9;&#x9;rewrite(content);&#xA;&#x9;&#x9;}" instanceOfExtensionDefinition="true">
            <statements xsi:type="dbl:Variable" name="content" concreteSyntax="EObject content">
              <classifierType concreteSyntax="EObject">
                <referencedElement href="../ecore.xmi#//@modules.0/@classifiers.11"/>
              </classifierType>
            </statements>
            <collection xsi:type="dbl:IdExpr" concreteSyntax="obj.eContents()">
              <parentIdExpr concreteSyntax="obj" referencedElement="//@modules.0/@procedures.0/@parameters.0"/>
              <referencedElement href="../ecore.xmi#//@modules.0/@classifiers.11/@methods.4"/>
              <callPart/>
            </collection>
            <body concreteSyntax="{&#xA;&#x9;&#x9;&#x9;rewrite(content);&#xA;&#x9;&#x9;}">
              <statements xsi:type="dbl:ProcedureCall" concreteSyntax="rewrite(content)">
                <callIdExpr concreteSyntax="rewrite(content)" referencedElement="//@modules.0/@procedures.0">
                  <callPart>
                    <callArguments xsi:type="dbl:IdExpr" concreteSyntax="content" referencedElement="//@modules.0/@procedures.0/@statements.0/@falseCase/@statements.0/@statements.0"/>
                  </callPart>
                </callIdExpr>
              </statements>
            </body>
          </statements>
        </falseCase>
      </statements>
      <parameters name="obj">
        <classifierType concreteSyntax="EObject">
          <referencedElement href="../ecore.xmi#//@modules.0/@classifiers.11"/>
        </classifierType>
      </parameters>
      <parameters name="context">
        <classifierType concreteSyntax="Expression">
          <referencedElement href="../dbl.xmi#//@modules.0/@classifiers.51"/>
        </classifierType>
      </parameters>
    </procedures>
  </modules>
</dbl:Model>
