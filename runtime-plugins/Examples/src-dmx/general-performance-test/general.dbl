module GeneralPerformanceTest {

	void log(string msg) {
		print "pid-" + active + ": " + msg + "\n";
	}	

	void log2(string msg) {
		print msg + "\n";
	}	
	
	int NUM_SWITCHES = 10000000;
	int switchesLeft = NUM_SWITCHES;
	
	int NUM_PROCESSES = 3;
	
	int RECURSION_DEPTH = 0;
	
	int BUBBLE_SORT_SIZE = 1;
	
	int RNG_CALLS = 0;
	int rngCallsLeft = RNG_CALLS;
	double rngCumVal = 0;
	ExpDist expDist;

	class ExpDist(string name, double mean) {
		bindings {
			"desmoj" -> "hub.sam.dmx.javasim.desmoj.dist.ExpDist",
			"jist" -> "hub.sam.dmx.javasim.generic.dist.ExpDist",
			"jdisco" -> "hub.sam.dmx.javasim.generic.dist.ExpDist"
		}
		double sample() {}
	}
	
	active class Counter {
		int count = 0;
		int limit = 10;
		
		void m(int d) {
			if (d > 0) {
				log("d = " + d);
				m(d-1);
				log("m() returned to m(), d = " + d);
			}
			else {
				yield;
				count = count + 1;
				log("count = " + count);
			}
		}
		
		actions {
			if (RECURSION_DEPTH > 0) {
				m(RECURSION_DEPTH);
			}
			
			if (NUM_SWITCHES > 0) {
				while (switchesLeft > 0) {
					//log(switchesLeft + " switches left");
					switchesLeft = switchesLeft - 1;
					yield;
				}
			}
			
			if (BUBBLE_SORT_SIZE > 1) {
				// TODO
				
				//list(int) data = new list(3);
			}
			
			if (RNG_CALLS > 0) {
				while (rngCallsLeft > 0) {
					rngCallsLeft = rngCallsLeft - 1;
					double sample;
					sample = expDist.sample();
					//log("sample = " + sample);
					rngCumVal = rngCumVal +  sample;
				}
				log("rngCumVal = " + rngCumVal);
				log("mean = " + (rngCumVal / RNG_CALLS));
			}
		}
	}

	void main() {
		expDist = new ExpDist("expDist", 1.0);
		
		Counter p;
		//list(Counter) ps;
		int i=0;
		while (i < NUM_PROCESSES) {
			p = new Counter;
			//place p into ps;
			activate p;
			i=i+1;
		}
		//print "ps.size = " + ps.size + "\n";
		
		advance 1;
	}

}