#import "stdlib"

module ecore;

interface EAttribute extends EStructuralFeature {
	bindings { "java" -> "org.eclipse.emf.ecore.EAttribute" }
	
	boolean isID();
	EDataType getEAttributeType();
}

interface EAnnotation extends EModelElement {
	bindings { "java" -> "org.eclipse.emf.ecore.EAnnotation" }
	
	string getSource();
	EList getDetails();
	EModelElement getEModelElement();
	EList getContents();
	EList getReferences();
}

interface EClass extends EClassifier {
	bindings { "java" -> "org.eclipse.emf.ecore.EClass" }
	
	boolean isAbstract();
	boolean isInterface();
	EList getESuperTypes();
	EList getEOperations();
	EList getEAllAttributes();
	EList getEAllReferences();
	EList getEReferences();
	EList getEAttributes();
	EList getEAllContainments();
	EList getEAllOperations();
	EList getEAllStructuralFeatures();
	EList getEAllSuperTypes();
	EAttribute getEIDAttribute();
	EList getEStructuralFeatures();
	EList getEGenericSuperTypes();
	EList getEAllGenericSuperTypes();
	boolean isSuperTypeOf(EClass someClass);
	int getFeatureCount();
	EStructuralFeature getEStructuralFeature(int featureID);
	int getFeatureID(EStructuralFeature feature);
	EStructuralFeature getEStructuralFeature(string featureName);
	int getOperationCount();
	EOperation getEOperation(int operationID);
	int getOperationID(EOperation operation);
	EOperation getOverride(EOperation operation);
	EGenericType getFeatureType(EStructuralFeature feature);
}

interface EClassifier extends ENamedElement {
	bindings { "java" -> "org.eclipse.emf.ecore.EClassifier" }
	
	string getInstanceClassName();
	JavaClass getInstanceClass();
	Object getDefaultValue();
	string getInstanceTypeName();
	EPackage getEPackage();
	EList getETypeParameters();
	boolean isInstance(Object object);
	int getClassifierID();
}

interface EDataType extends EClassifier {
	bindings { "java" -> "org.eclipse.emf.ecore.EDataType" }
	
	boolean isSerializable();
}

interface EEnum extends EDataType {
	bindings { "java" -> "org.eclipse.emf.ecore.EEnum" }
	
	EList getELiterals();
	EEnumLiteral getEEnumLiteral(string name);
	EEnumLiteral getEEnumLiteral(int value);
	EEnumLiteral getEEnumLiteralByLiteral(string literal);
}

interface EEnumLiteral extends ENamedElement {
	bindings { "java" -> "org.eclipse.emf.ecore.EEnumLiteral" }
	
	int getValue();
	Enumerator getInstance();
	string getLiteral();
	EEnum getEEnum();
}

interface EFactory extends EModelElement {
	bindings { "java" -> "org.eclipse.emf.ecore.EFactory" }
	
	EPackage getEPackage();
	EObject create(EClass eClass);
	Object createFromString(EDataType eDataType,string literalValue);
	string convertToString(EDataType eDataType,Object instanceValue);
}

interface EModelElement extends EObject {
	bindings { "java" -> "org.eclipse.emf.ecore.EModelElement" }
	
	EList getEAnnotations();
	EAnnotation getEAnnotation(string source);
}

interface ENamedElement extends EModelElement {
	bindings { "java" -> "org.eclipse.emf.ecore.ENamedElement" }
	
	string getName();
}

interface Enumerator {
	bindings {
		"java" -> "org.eclipse.emf.common.util.Enumerator"
	}
}

interface Resource {
	bindings {
		"java" -> "org.eclipse.emf.ecore.resource.Resource"
	}
	string getURIFragment(EObject eObject);
}

interface EList extends List {
	bindings {
		"java" -> "org.eclipse.emf.common.util.EList"
	}
	void move(int newPos, Object object);
	void move(int newPos, int oldPos);
}

interface EObject {
	bindings {
		"java" -> "org.eclipse.emf.ecore.EObject"
	}
	Resource eResource();
	EClass eClass();
	EObject eContainer();
	EStructuralFeature eContainingFeature();
	EReference eContainmentFeature();
	EList eContents();
	EList eAllContents();
	EList eCrossReferences();
	Object eGet(EStructuralFeature feature);
	Object eGet(EStructuralFeature feature, boolean resolve);
	void eSet(EStructuralFeature feature, Object newValue);
	boolean eIsSet(EStructuralFeature feature);
	void eUnset(EStructuralFeature feature);
	//boolean eIsProxy();
	//Object eInvoke(EOperation operation, Object array[] arguments);
}

string getURI(EObject eObject) {
	return eObject.eResource().getURIFragment(eObject);
}			
interface EOperation extends ETypedElement {
	bindings { "java" -> "org.eclipse.emf.ecore.EOperation" }
	
	EClass getEContainingClass();
	EList getETypeParameters();
	EList getEParameters();
	EList getEExceptions();
	EList getEGenericExceptions();
	int getOperationID();
	boolean isOverrideOf(EOperation someOperation);
}

interface EPackage extends ENamedElement {
	bindings { "java" -> "org.eclipse.emf.ecore.EPackage" }
	
	string getNsURI();
	string getNsPrefix();
	EFactory getEFactoryInstance();
	EList getEClassifiers();
	EList getESubpackages();
	EPackage getESuperPackage();
	EClassifier getEClassifier(string name);
}

interface EParameter extends ETypedElement {
	bindings { "java" -> "org.eclipse.emf.ecore.EParameter" }
	
	EOperation getEOperation();
}

interface EReference extends EStructuralFeature {
	bindings { "java" -> "org.eclipse.emf.ecore.EReference" }
	
	boolean isContainment();
	boolean isContainer();
	boolean isResolveProxies();
	EReference getEOpposite();
	EClass getEReferenceType();
	EList getEKeys();
}

interface EStructuralFeature extends ETypedElement {
	bindings { "java" -> "org.eclipse.emf.ecore.EStructuralFeature" }
	
	boolean isChangeable();
	boolean isVolatile();
	boolean isTransient();
	string getDefaultValueLiteral();
	Object getDefaultValue();
	boolean isUnsettable();
	boolean isDerived();
	EClass getEContainingClass();
	int getFeatureID();
	JavaClass getContainerClass();
}

interface ETypedElement extends ENamedElement {
	bindings { "java" -> "org.eclipse.emf.ecore.ETypedElement" }
	
	boolean isOrdered();
	boolean isUnique();
	int getLowerBound();
	int getUpperBound();
	boolean isMany();
	boolean isRequired();
	EClassifier getEType();
	EGenericType getEGenericType();
}

interface EStringToStringMapEntry extends EObject {
	bindings { "java" -> "org.eclipse.emf.ecore.EStringToStringMapEntry" }
	
	string getKey();
	string getValue();
}

interface EGenericType extends EObject {
	bindings { "java" -> "org.eclipse.emf.ecore.EGenericType" }
	
	EGenericType getEUpperBound();
	EList getETypeArguments();
	EClassifier getERawType();
	EGenericType getELowerBound();
	ETypeParameter getETypeParameter();
	EClassifier getEClassifier();
	boolean isInstance(Object object);
}

interface ETypeParameter extends ENamedElement {
	bindings { "java" -> "org.eclipse.emf.ecore.ETypeParameter" }
	
	EList getEBounds();
}

