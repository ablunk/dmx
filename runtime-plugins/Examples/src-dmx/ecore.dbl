	module ecore {
		class Object {
		}
			class EAttribute extends EObject, EStructuralFeature {
				boolean isID() abstract {}
				EDataType getEAttributeType() abstract {}
			}
			interface EAnnotation extends EObject, EModelElement {
					string
				
				 getSource();
				list(EStringToStringMapEntry)
				 getDetails();
					EModelElement
				
				 getEModelElement();
				list(EObject)
				 getContents();
				list(EObject)
				 getReferences();
			}
			interface EClass extends EObject, EClassifier {
					boolean
				
				 isAbstract();
					boolean
				
				 isInterface();
				list(EClass)
				 getESuperTypes();
				list(EOperation)
				 getEOperations();
				list(EAttribute)
				 getEAllAttributes();
				list(EReference)
				 getEAllReferences();
				list(EReference)
				 getEReferences();
				list(EAttribute)
				 getEAttributes();
				list(EReference)
				 getEAllContainments();
				list(EOperation)
				 getEAllOperations();
				list(EStructuralFeature)
				 getEAllStructuralFeatures();
				list(EClass)
				 getEAllSuperTypes();
					EAttribute
				
				 getEIDAttribute();
				list(EStructuralFeature)
				 getEStructuralFeatures();
				list(EGenericType)
				 getEGenericSuperTypes();
				list(EGenericType)
				 getEAllGenericSuperTypes();
			}
			interface EClassifier extends EObject, ENamedElement {
					string
				
				 getInstanceClassName();
					string
				
				 getInstanceClass();
					EPackage
				
				 getDefaultValue();
					string
				
				 getInstanceTypeName();
					EPackage
				
				 getEPackage();
				list(ETypeParameter)
				 getETypeParameters();
			}
			interface EDataType extends EObject, EClassifier {
					boolean
				
				 isSerializable();
			}
			interface EEnum extends EObject, EDataType {
				list(EEnumLiteral)
				 getELiterals();
			}
			interface EEnumLiteral extends EObject, ENamedElement {
					int
				
				 getValue();

					string
				
				 getLiteral();
					EEnum
				
				 getEEnum();
			}
			interface EFactory extends EObject, EModelElement {
					EPackage
				
				 getEPackage();
			}
			interface EModelElement extends EObject, EObject {
				list(EAnnotation)
				 getEAnnotations();
			}
			interface ENamedElement extends EObject, EModelElement {
					string
				
				 getName();
			}
		interface EObject {
  			EClass eClass();
  			EObject eContainer();
 			EStructuralFeature eContainingFeature();
  			EReference eContainmentFeature();
  			list(EObject) eContents();
  			list(EObject) eAllContents();
  			boolean eIsProxy();
  			list(EObject) eCrossReferences();
  			Object eGet(EStructuralFeature feature);
  			Object eGet(EStructuralFeature feature, boolean resolve);
  			void eSet(EStructuralFeature feature, Object newValue);
  			boolean eIsSet(EStructuralFeature feature);
  			void eUnset(EStructuralFeature feature);
  			Object eInvoke(EOperation operation, list(Object) arguments);
		}
			interface EOperation extends EObject, ETypedElement {
					EClass
				
				 getEContainingClass();
				list(ETypeParameter)
				 getETypeParameters();
				list(EParameter)
				 getEParameters();
				list(EClassifier)
				 getEExceptions();
				list(EGenericType)
				 getEGenericExceptions();
			}
			interface EPackage extends EObject, ENamedElement {
					string
				
				 getNsURI();
					string
				
				 getNsPrefix();
					EFactory
				
				 getEFactoryInstance();
				list(EClassifier)
				 getEClassifiers();
				list(EPackage)
				 getESubpackages();
					EPackage
				
				 getESuperPackage();
			}
			interface EParameter extends EObject, ETypedElement {
					EOperation
				
				 getEOperation();
			}
			interface EReference extends EObject, EStructuralFeature {
					boolean
				
				 isContainment();
					boolean
				
				 isContainer();
					boolean
				
				 isResolveProxies();
					EReference
				
				 getEOpposite();
					EClass
				
				 getEReferenceType();
				list(EAttribute)
				 getEKeys();
			}
			interface EStructuralFeature extends EObject, ETypedElement {
					boolean
				
				 isChangeable();
					boolean
				
				 isVolatile();
					boolean
				
				 isTransient();
					string
				
				 getDefaultValueLiteral();

					boolean
				
				 isUnsettable();
					boolean
				
				 isDerived();
					EClass
				
				 getEContainingClass();
			}
			interface ETypedElement extends EObject, ENamedElement {
					boolean
				
				 isOrdered();
					boolean
				
				 isUnique();
					int
				
				 getLowerBound();
					int
				
				 getUpperBound();
					boolean
				
				 isMany();
					boolean
				
				 isRequired();
					EClassifier
				
				 getEType();
					EGenericType
				
				 getEGenericType();
			}
			interface EStringToStringMapEntry extends EObject {
					string
				
				 getKey();
					string
				
				 getValue();
			}
			interface EGenericType extends EObject, EObject {
					EGenericType
				
				 getEUpperBound();
				list(EGenericType)
				 getETypeArguments();
					EClassifier
				
				 getERawType();
					EGenericType
				
				 getELowerBound();
					ETypeParameter
				
				 getETypeParameter();
					EClassifier
				
				 getEClassifier();
			}
			interface ETypeParameter extends EObject, ENamedElement {
				list(EGenericType)
				 getEBounds();
			}
	}
