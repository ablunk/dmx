#import "stdlib"

module ecore;

class EAttribute
extends 
EStructuralFeature
{
	bindings {
		"java" -> "org.eclipse.emf.ecore.EAttribute"
	}
	
	boolean isID();
	void setID(boolean value);
	EDataType getEAttributeType();
}
class EAnnotation
extends 
EModelElement
{
	bindings {
		"java" -> "org.eclipse.emf.ecore.EAnnotation"
	}
	
	string getSource();
	void setSource(string value);
	EList getDetails();
	EModelElement getEModelElement();
	void setEModelElement(EModelElement value);
	EList getContents();
	EList getReferences();
}
class EClass
extends 
EClassifier
{
	bindings {
		"java" -> "org.eclipse.emf.ecore.EClass"
	}
	
	boolean isAbstract();
	void setAbstract(boolean value);
	boolean isInterface();
	void setInterface(boolean value);
	EList getESuperTypes();
	EList getEOperations();
	EList getEAllAttributes();
	EList getEAllReferences();
	EList getEReferences();
	EList getEAttributes();
	EList getEAllContainments();
	EList getEAllOperations();
	EList getEAllStructuralFeatures();
	EList getEAllSuperTypes();
	EAttribute getEIDAttribute();
	EList getEStructuralFeatures();
	EList getEGenericSuperTypes();
	EList getEAllGenericSuperTypes();
}
class EClassifier
extends 
ENamedElement
{
	bindings {
		"java" -> "org.eclipse.emf.ecore.EClassifier"
	}
	
	string getInstanceClassName();
	void setInstanceClassName(string value);
	Object getInstanceClass();
	Object getDefaultValue();
	string getInstanceTypeName();
	void setInstanceTypeName(string value);
	EPackage getEPackage();
	EList getETypeParameters();
}
class EDataType
extends 
EClassifier
{
	bindings {
		"java" -> "org.eclipse.emf.ecore.EDataType"
	}
	
	boolean isSerializable();
	void setSerializable(boolean value);
}
class EEnum
extends 
EDataType
{
	bindings {
		"java" -> "org.eclipse.emf.ecore.EEnum"
	}
	
	EList getELiterals();
}
class EEnumLiteral
extends 
ENamedElement
{
	bindings {
		"java" -> "org.eclipse.emf.ecore.EEnumLiteral"
	}
	
	int getValue();
	void setValue(int value);
	Enumerator getInstance();
	void setInstance(Enumerator value);
	string getLiteral();
	void setLiteral(string value);
	EEnum getEEnum();
}
class EFactory
extends 
EModelElement
{
	bindings {
		"java" -> "org.eclipse.emf.ecore.EFactory"
	}
	
	EPackage getEPackage();
	void setEPackage(EPackage value);
}
class EModelElement
extends EObject
{
	bindings {
		"java" -> "org.eclipse.emf.ecore.EModelElement"
	}
	
	EList getEAnnotations();
}
class ENamedElement
extends 
EModelElement
{
	bindings {
		"java" -> "org.eclipse.emf.ecore.ENamedElement"
	}
	
	string getName();
	void setName(string value);
}
class Enumerator {
	bindings {
		"java" -> "org.eclipse.emf.common.util.Enumerator"
	}
}

class Resource {
	bindings {
		"java" -> "org.eclipse.emf.ecore.resource.Resource"
	}
	string getURIFragment(EObject eObject);
}

class EList extends List {
	bindings {
		"java" -> "org.eclipse.emf.common.util.EList"
	}
	void move(int newPos, Object object);
	void move(int newPos, int oldPos);
}

class EObject {
	bindings {
		"java" -> "org.eclipse.emf.ecore.EObject"
	}
	Resource eResource();
	EClass eClass();
	EObject eContainer();
	EStructuralFeature eContainingFeature();
	EReference eContainmentFeature();
	EList eContents();
	EList eAllContents();
	EList eCrossReferences();
	Object eGet(EStructuralFeature feature);
	Object eGet(EStructuralFeature feature, boolean resolve);
	void eSet(EStructuralFeature feature, Object newValue);
	boolean eIsSet(EStructuralFeature feature);
	void eUnset(EStructuralFeature feature);
	//boolean eIsProxy();
	//Object eInvoke(EOperation operation, Object array[] arguments);
}

string getURI(EObject eObject) {
	return eObject.eResource().getURIFragment(eObject);
}

class EOperation
extends 
ETypedElement
{
	bindings {
		"java" -> "org.eclipse.emf.ecore.EOperation"
	}
	
	EClass getEContainingClass();
	EList getETypeParameters();
	EList getEParameters();
	EList getEExceptions();
	EList getEGenericExceptions();
}
class EPackage
extends 
ENamedElement
{
	bindings {
		"java" -> "org.eclipse.emf.ecore.EPackage"
	}
	
	string getNsURI();
	void setNsURI(string value);
	string getNsPrefix();
	void setNsPrefix(string value);
	EFactory getEFactoryInstance();
	void setEFactoryInstance(EFactory value);
	EList getEClassifiers();
	EList getESubpackages();
	EPackage getESuperPackage();
}
class EParameter
extends 
ETypedElement
{
	bindings {
		"java" -> "org.eclipse.emf.ecore.EParameter"
	}
	
	EOperation getEOperation();
}
class EReference
extends 
EStructuralFeature
{
	bindings {
		"java" -> "org.eclipse.emf.ecore.EReference"
	}
	
	boolean isContainment();
	void setContainment(boolean value);
	boolean isContainer();
	boolean isResolveProxies();
	void setResolveProxies(boolean value);
	EReference getEOpposite();
	void setEOpposite(EReference value);
	EClass getEReferenceType();
	EList getEKeys();
}
class EStructuralFeature
extends 
ETypedElement
{
	bindings {
		"java" -> "org.eclipse.emf.ecore.EStructuralFeature"
	}
	
	boolean isChangeable();
	void setChangeable(boolean value);
	boolean isVolatile();
	void setVolatile(boolean value);
	boolean isTransient();
	void setTransient(boolean value);
	string getDefaultValueLiteral();
	void setDefaultValueLiteral(string value);
	Object getDefaultValue();
	boolean isUnsettable();
	void setUnsettable(boolean value);
	boolean isDerived();
	void setDerived(boolean value);
	EClass getEContainingClass();
}
class ETypedElement
extends 
ENamedElement
{
	bindings {
		"java" -> "org.eclipse.emf.ecore.ETypedElement"
	}
	
	boolean isOrdered();
	void setOrdered(boolean value);
	boolean isUnique();
	void setUnique(boolean value);
	int getLowerBound();
	void setLowerBound(int value);
	int getUpperBound();
	void setUpperBound(int value);
	boolean isMany();
	boolean isRequired();
	EClassifier getEType();
	void setEType(EClassifier value);
	EGenericType getEGenericType();
	void setEGenericType(EGenericType value);
}
class EStringToStringMapEntry
extends EObject
{
	bindings {
		"java" -> "org.eclipse.emf.ecore.EStringToStringMapEntry"
	}
	
	string getKey();
	void setKey(string value);
	string getValue();
	void setValue(string value);
}
class EGenericType
extends EObject
{
	bindings {
		"java" -> "org.eclipse.emf.ecore.EGenericType"
	}
	
	EGenericType getEUpperBound();
	void setEUpperBound(EGenericType value);
	EList getETypeArguments();
	EClassifier getERawType();
	EGenericType getELowerBound();
	void setELowerBound(EGenericType value);
	ETypeParameter getETypeParameter();
	void setETypeParameter(ETypeParameter value);
	EClassifier getEClassifier();
	void setEClassifier(EClassifier value);
}
class ETypeParameter
extends 
ENamedElement
{
	bindings {
		"java" -> "org.eclipse.emf.ecore.ETypeParameter"
	}
	
	EList getEBounds();
}
