<?xml version="1.0" encoding="ASCII"?>
<dbl:Model xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dbl="http://www.informatik.hu-berlin.de/sam/dbl">
  <imports file="../base">
    <model href="file:/Users/blunk/Projekte/Entwicklungen/dmx/runtime-plugins/Examples/src-dmx/base.xmi#/"/>
  </imports>
  <modules name="sml">
    <extensionDefs name="Signal">
      <textualSyntaxDef>
        <extensionRule name="ModuleContentExtension">
          <firstNewRule rule="//@modules.0/@extensionDefs.0/@textualSyntaxDef/@newRules.0"/>
        </extensionRule>
        <newRules name="Signal">
          <rhs xsi:type="dbl:SequenceExpr">
            <sequence xsi:type="dbl:TerminalExpr" terminal="signal"/>
            <sequence xsi:type="dbl:PropertyBindingExpr" name="name">
              <propertyType xsi:type="dbl:IdPropertyType"/>
            </sequence>
            <sequence xsi:type="dbl:TerminalExpr" terminal=";"/>
          </rhs>
        </newRules>
      </textualSyntaxDef>
      <mappingDef>
        <statements xsi:type="dbl:MappingStatement">
          <parts xsi:type="dbl:FixedMappingPart" code="class "/>
          <parts xsi:type="dbl:DynamicMappingPart">
            <expr xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@extensionDefs.0/@textualSyntaxDef/@newRules.0/@rhs/@sequence.1"/>
          </parts>
          <parts xsi:type="dbl:FixedMappingPart" code=" {}"/>
        </statements>
      </mappingDef>
    </extensionDefs>
    <extensionDefs name="SendStatement">
      <textualSyntaxDef>
        <extensionRule name="Statement">
          <firstNewRule rule="//@modules.0/@extensionDefs.1/@textualSyntaxDef/@newRules.0"/>
        </extensionRule>
        <newRules name="SendStatement">
          <rhs xsi:type="dbl:SequenceExpr">
            <sequence xsi:type="dbl:TerminalExpr" terminal="send"/>
            <sequence xsi:type="dbl:PropertyBindingExpr" name="signal">
              <propertyType xsi:type="dbl:CompositePropertyType">
                <type xsi:type="dbl:Interface" href="file:/Users/blunk/Projekte/Entwicklungen/dmx/runtime-plugins/Examples/src-dmx/base.xmi#//@modules.0/@classifiers.60"/>
              </propertyType>
            </sequence>
            <sequence xsi:type="dbl:TerminalExpr" terminal="to"/>
            <sequence xsi:type="dbl:PropertyBindingExpr" name="target">
              <propertyType xsi:type="dbl:CompositePropertyType">
                <type xsi:type="dbl:Interface" href="file:/Users/blunk/Projekte/Entwicklungen/dmx/runtime-plugins/Examples/src-dmx/base.xmi#//@modules.0/@classifiers.60"/>
              </propertyType>
            </sequence>
            <sequence xsi:type="dbl:TerminalExpr" terminal=";"/>
          </rhs>
        </newRules>
      </textualSyntaxDef>
      <mappingDef>
        <statements xsi:type="dbl:MappingStatement">
          <parts xsi:type="dbl:FixedMappingPart" code="place "/>
          <parts xsi:type="dbl:DynamicMappingPart">
            <expr xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@extensionDefs.1/@textualSyntaxDef/@newRules.0/@rhs/@sequence.1"/>
          </parts>
          <parts xsi:type="dbl:FixedMappingPart" code=" into "/>
          <parts xsi:type="dbl:DynamicMappingPart">
            <expr xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@extensionDefs.1/@textualSyntaxDef/@newRules.0/@rhs/@sequence.3"/>
          </parts>
          <parts xsi:type="dbl:FixedMappingPart" code=".eventPool;"/>
        </statements>
        <statements xsi:type="dbl:MappingStatement">
          <parts xsi:type="dbl:FixedMappingPart" code="reactivate "/>
          <parts xsi:type="dbl:DynamicMappingPart">
            <expr xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@extensionDefs.1/@textualSyntaxDef/@newRules.0/@rhs/@sequence.3"/>
          </parts>
          <parts xsi:type="dbl:FixedMappingPart" code=";"/>
        </statements>
      </mappingDef>
    </extensionDefs>
    <extensionDefs name="StateMachine">
      <textualSyntaxDef>
        <extensionRule name="ClassContentExtension">
          <firstNewRule rule="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.0"/>
        </extensionRule>
        <newRules name="StateMachine">
          <rhs xsi:type="dbl:SequenceExpr">
            <sequence xsi:type="dbl:TerminalExpr" terminal="stateMachine"/>
            <sequence xsi:type="dbl:PropertyBindingExpr" name="name">
              <propertyType xsi:type="dbl:IdPropertyType"/>
            </sequence>
            <sequence xsi:type="dbl:TerminalExpr" terminal="{"/>
            <sequence xsi:type="dbl:PropertyBindingExpr" name="initialState">
              <propertyType xsi:type="dbl:CompositePropertyType" type="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.3"/>
            </sequence>
            <sequence xsi:type="dbl:RuleExpr" rule="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.2"/>
            <sequence xsi:type="dbl:TerminalExpr" terminal="}"/>
          </rhs>
        </newRules>
        <newRules name="StateListOptional">
          <rhs xsi:type="dbl:SequenceExpr"/>
        </newRules>
        <newRules name="StateListOptional">
          <rhs xsi:type="dbl:SequenceExpr">
            <sequence xsi:type="dbl:PropertyBindingExpr" name="states">
              <propertyType xsi:type="dbl:CompositePropertyType" type="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.4" list="true"/>
            </sequence>
            <sequence xsi:type="dbl:RuleExpr" rule="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.2"/>
          </rhs>
        </newRules>
        <newRules name="InitialState">
          <rhs xsi:type="dbl:SequenceExpr">
            <sequence xsi:type="dbl:TerminalExpr" terminal="initial"/>
            <sequence xsi:type="dbl:RuleExpr" rule="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.18"/>
            <sequence xsi:type="dbl:TerminalExpr" terminal="->"/>
            <sequence xsi:type="dbl:PropertyBindingExpr" name="target">
              <propertyType xsi:type="dbl:ReferencePropertyType" type="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.4" rawReference="true"/>
            </sequence>
            <sequence xsi:type="dbl:TerminalExpr" terminal=";"/>
          </rhs>
        </newRules>
        <newRules name="State">
          <rhs xsi:type="dbl:SequenceExpr">
            <sequence xsi:type="dbl:TerminalExpr" terminal="state"/>
            <sequence xsi:type="dbl:PropertyBindingExpr" name="name">
              <propertyType xsi:type="dbl:IdPropertyType"/>
            </sequence>
            <sequence xsi:type="dbl:RuleExpr" rule="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.6"/>
            <sequence xsi:type="dbl:TerminalExpr" terminal=";"/>
          </rhs>
        </newRules>
        <newRules name="TransitionsOptional">
          <rhs xsi:type="dbl:SequenceExpr"/>
        </newRules>
        <newRules name="TransitionsOptional">
          <rhs xsi:type="dbl:SequenceExpr">
            <sequence xsi:type="dbl:TerminalExpr" terminal="("/>
            <sequence xsi:type="dbl:RuleExpr" rule="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.7"/>
            <sequence xsi:type="dbl:TerminalExpr" terminal=")"/>
          </rhs>
        </newRules>
        <newRules name="OutgoingList">
          <rhs xsi:type="dbl:SequenceExpr">
            <sequence xsi:type="dbl:PropertyBindingExpr" name="outgoing">
              <propertyType xsi:type="dbl:CompositePropertyType" type="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.10" list="true"/>
            </sequence>
            <sequence xsi:type="dbl:RuleExpr" rule="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.8"/>
          </rhs>
        </newRules>
        <newRules name="OutgoingListOptional">
          <rhs xsi:type="dbl:SequenceExpr"/>
        </newRules>
        <newRules name="OutgoingListOptional">
          <rhs xsi:type="dbl:SequenceExpr">
            <sequence xsi:type="dbl:TerminalExpr" terminal=","/>
            <sequence xsi:type="dbl:RuleExpr" rule="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.7"/>
          </rhs>
        </newRules>
        <newRules name="Transition">
          <rhs xsi:type="dbl:SequenceExpr">
            <sequence xsi:type="dbl:PropertyBindingExpr" name="trigger">
              <propertyType xsi:type="dbl:CompositePropertyType" type="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.11"/>
            </sequence>
            <sequence xsi:type="dbl:RuleExpr" rule="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.15"/>
            <sequence xsi:type="dbl:RuleExpr" rule="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.18"/>
            <sequence xsi:type="dbl:RuleExpr" rule="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.20"/>
          </rhs>
        </newRules>
        <newRules name="Trigger">
          <rhs xsi:type="dbl:SequenceExpr"/>
        </newRules>
        <newRules name="Trigger">
          <rhs xsi:type="dbl:SequenceExpr">
            <sequence xsi:type="dbl:PropertyBindingExpr" name="signalEvent">
              <propertyType xsi:type="dbl:ReferencePropertyType">
                <type xsi:type="dbl:Interface" href="file:/Users/blunk/Projekte/Entwicklungen/dmx/runtime-plugins/Examples/src-dmx/base.xmi#//@modules.0/@classifiers.26"/>
              </propertyType>
            </sequence>
          </rhs>
        </newRules>
        <newRules name="Trigger">
          <rhs xsi:type="dbl:SequenceExpr">
            <sequence xsi:type="dbl:TerminalExpr" terminal="after"/>
            <sequence xsi:type="dbl:PropertyBindingExpr" name="timeEvent">
              <propertyType xsi:type="dbl:CompositePropertyType" type="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.14"/>
            </sequence>
          </rhs>
        </newRules>
        <newRules name="TimeEvent">
          <rhs xsi:type="dbl:SequenceExpr">
            <sequence xsi:type="dbl:TerminalExpr" terminal="("/>
            <sequence xsi:type="dbl:PropertyBindingExpr" name="delay">
              <propertyType xsi:type="dbl:CompositePropertyType">
                <type xsi:type="dbl:Interface" href="file:/Users/blunk/Projekte/Entwicklungen/dmx/runtime-plugins/Examples/src-dmx/base.xmi#//@modules.0/@classifiers.60"/>
              </propertyType>
            </sequence>
            <sequence xsi:type="dbl:TerminalExpr" terminal=")"/>
          </rhs>
        </newRules>
        <newRules name="GuardOptional">
          <rhs xsi:type="dbl:SequenceExpr"/>
        </newRules>
        <newRules name="GuardOptional">
          <rhs xsi:type="dbl:SequenceExpr">
            <sequence xsi:type="dbl:TerminalExpr" terminal="["/>
            <sequence xsi:type="dbl:PropertyBindingExpr" name="condition">
              <propertyType xsi:type="dbl:CompositePropertyType">
                <type xsi:type="dbl:Interface" href="file:/Users/blunk/Projekte/Entwicklungen/dmx/runtime-plugins/Examples/src-dmx/base.xmi#//@modules.0/@classifiers.60"/>
              </propertyType>
            </sequence>
            <sequence xsi:type="dbl:TerminalExpr" terminal="]"/>
          </rhs>
        </newRules>
        <newRules name="EffectsOptional">
          <rhs xsi:type="dbl:SequenceExpr"/>
        </newRules>
        <newRules name="EffectsOptional">
          <rhs xsi:type="dbl:SequenceExpr">
            <sequence xsi:type="dbl:TerminalExpr" terminal="/"/>
            <sequence xsi:type="dbl:PropertyBindingExpr" name="effect">
              <propertyType xsi:type="dbl:CompositePropertyType">
                <type xsi:type="dbl:Interface" href="file:/Users/blunk/Projekte/Entwicklungen/dmx/runtime-plugins/Examples/src-dmx/base.xmi#//@modules.0/@classifiers.34"/>
              </propertyType>
            </sequence>
          </rhs>
        </newRules>
        <newRules name="TargetStateOptional">
          <rhs xsi:type="dbl:SequenceExpr">
            <sequence xsi:type="dbl:TerminalExpr" terminal="->"/>
            <sequence xsi:type="dbl:PropertyBindingExpr" name="target">
              <propertyType xsi:type="dbl:ReferencePropertyType" type="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.4" rawReference="true"/>
            </sequence>
          </rhs>
        </newRules>
        <newRules name="TargetStateOptional">
          <rhs xsi:type="dbl:SequenceExpr">
            <sequence xsi:type="dbl:TerminalExpr" terminal="->"/>
            <sequence xsi:type="dbl:TerminalExpr" terminal="final"/>
          </rhs>
        </newRules>
      </textualSyntaxDef>
      <mappingDef>
        <statements xsi:type="dbl:MappingStatement">
          <parts xsi:type="dbl:FixedMappingPart" code="&#xA;&#x9;&#x9;&#x9;list(Object) eventPool;&#xA;&#x9;&#x9;&#x9;string currentState;&#xA;&#x9;&#x9;&#x9;boolean firstRun = true;&#xA;&#x9;&#x9;"/>
        </statements>
        <statements xsi:type="dbl:MappingStatement">
          <parts xsi:type="dbl:FixedMappingPart" code="&#xA;&#x9;&#x9;&#x9;initial {&#xA;&#x9;&#x9;&#x9;&#x9;currentState = \&quot;"/>
          <parts xsi:type="dbl:DynamicMappingPart">
            <expr xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.4/@rhs/@sequence.1">
              <parentIdExpr referencedElement="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.3/@rhs/@sequence.3">
                <parentIdExpr referencedElement="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.0/@rhs/@sequence.3"/>
              </parentIdExpr>
            </expr>
          </parts>
          <parts xsi:type="dbl:FixedMappingPart" code="\&quot;;&#xA;&#x9;&#x9;"/>
        </statements>
        <statements xsi:type="dbl:IfStatement">
          <condition xsi:type="dbl:NotEqual">
            <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.18/@rhs/@sequence.1">
              <parentIdExpr referencedElement="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.0/@rhs/@sequence.3"/>
            </op1>
            <op2 xsi:type="dbl:NullLiteral"/>
          </condition>
          <ifCaseBlock>
            <statements xsi:type="dbl:ForEachStatement">
              <iteratorVariableDefinition name="stm">
                <classifierTypeExpr>
                  <referencedElement href="file:/Users/blunk/Projekte/Entwicklungen/dmx/runtime-plugins/Examples/src-dmx/base.xmi#//@modules.0/@classifiers.35"/>
                </classifierTypeExpr>
              </iteratorVariableDefinition>
              <iterableExpression xsi:type="dbl:IdExpr">
                <parentIdExpr referencedElement="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.18/@rhs/@sequence.1">
                  <parentIdExpr referencedElement="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.0/@rhs/@sequence.3"/>
                </parentIdExpr>
                <referencedElement href="file:/Users/blunk/Projekte/Entwicklungen/dmx/runtime-plugins/Examples/src-dmx/base.xmi#//@modules.0/@classifiers.34/@methods.0"/>
                <arguments/>
              </iterableExpression>
              <forBlock>
                <statements xsi:type="dbl:MappingStatement">
                  <parts xsi:type="dbl:FixedMappingPart" code=""/>
                  <parts xsi:type="dbl:DynamicMappingPart">
                    <expr xsi:type="dbl:IdExpr">
                      <parentIdExpr referencedElement="//@modules.0/@extensionDefs.2/@mappingDef/@statements.2/@ifCaseBlock/@statements.0/@iteratorVariableDefinition"/>
                      <referencedElement href="file:/Users/blunk/Projekte/Entwicklungen/dmx/runtime-plugins/Examples/src-dmx/base.xmi#//@modules.0/@classifiers.2/@methods.0"/>
                      <arguments/>
                    </expr>
                  </parts>
                  <parts xsi:type="dbl:FixedMappingPart" code=";"/>
                </statements>
              </forBlock>
            </statements>
          </ifCaseBlock>
        </statements>
        <statements xsi:type="dbl:MappingStatement">
          <parts xsi:type="dbl:FixedMappingPart" code="&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;"/>
        </statements>
        <statements xsi:type="dbl:MappingStatement">
          <parts xsi:type="dbl:FixedMappingPart" code="&#xA;&#x9;&#x9;&#x9;actions {&#xA;&#x9;&#x9;&#x9;&#x9;Timer timer;&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;while (currentState != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (timer != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;timer.invalid = true;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;"/>
        </statements>
        <statements xsi:type="dbl:ForEachStatement">
          <iteratorVariableDefinition name="state">
            <classifierTypeExpr referencedElement="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.4"/>
          </iteratorVariableDefinition>
          <iterableExpression xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.2/@rhs/@sequence.0"/>
          <forBlock>
            <statements xsi:type="dbl:MappingStatement">
              <parts xsi:type="dbl:FixedMappingPart" code="if (currentState == \&quot;"/>
              <parts xsi:type="dbl:DynamicMappingPart">
                <expr xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.4/@rhs/@sequence.1">
                  <parentIdExpr referencedElement="//@modules.0/@extensionDefs.2/@mappingDef/@statements.5/@iteratorVariableDefinition"/>
                </expr>
              </parts>
              <parts xsi:type="dbl:FixedMappingPart" code="\&quot;) {"/>
            </statements>
            <statements xsi:type="dbl:ForEachStatement">
              <iteratorVariableDefinition name="tr">
                <classifierTypeExpr referencedElement="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.10"/>
              </iteratorVariableDefinition>
              <iterableExpression xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.7/@rhs/@sequence.0">
                <parentIdExpr referencedElement="//@modules.0/@extensionDefs.2/@mappingDef/@statements.5/@iteratorVariableDefinition"/>
              </iterableExpression>
              <forBlock>
                <statements xsi:type="dbl:IfStatement">
                  <condition xsi:type="dbl:And">
                    <op1 xsi:type="dbl:Equal">
                      <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.12/@rhs/@sequence.0">
                        <parentIdExpr referencedElement="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.10/@rhs/@sequence.0">
                          <parentIdExpr referencedElement="//@modules.0/@extensionDefs.2/@mappingDef/@statements.5/@forBlock/@statements.1/@iteratorVariableDefinition"/>
                        </parentIdExpr>
                      </op1>
                      <op2 xsi:type="dbl:NullLiteral"/>
                    </op1>
                    <op2 xsi:type="dbl:Equal">
                      <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.13/@rhs/@sequence.1">
                        <parentIdExpr referencedElement="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.10/@rhs/@sequence.0">
                          <parentIdExpr referencedElement="//@modules.0/@extensionDefs.2/@mappingDef/@statements.5/@forBlock/@statements.1/@iteratorVariableDefinition"/>
                        </parentIdExpr>
                      </op1>
                      <op2 xsi:type="dbl:NullLiteral"/>
                    </op2>
                  </condition>
                  <ifCaseBlock>
                    <statements xsi:type="dbl:IfStatement">
                      <condition xsi:type="dbl:NotEqual">
                        <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.16/@rhs/@sequence.1">
                          <parentIdExpr referencedElement="//@modules.0/@extensionDefs.2/@mappingDef/@statements.5/@forBlock/@statements.1/@iteratorVariableDefinition"/>
                        </op1>
                        <op2 xsi:type="dbl:NullLiteral"/>
                      </condition>
                      <ifCaseBlock>
                        <statements xsi:type="dbl:MappingStatement">
                          <parts xsi:type="dbl:FixedMappingPart" code="if ("/>
                          <parts xsi:type="dbl:DynamicMappingPart">
                            <expr xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.16/@rhs/@sequence.1">
                              <parentIdExpr referencedElement="//@modules.0/@extensionDefs.2/@mappingDef/@statements.5/@forBlock/@statements.1/@iteratorVariableDefinition"/>
                            </expr>
                          </parts>
                          <parts xsi:type="dbl:FixedMappingPart" code=") {"/>
                        </statements>
                      </ifCaseBlock>
                    </statements>
                    <statements xsi:type="dbl:IfStatement">
                      <condition xsi:type="dbl:NotEqual">
                        <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.18/@rhs/@sequence.1">
                          <parentIdExpr referencedElement="//@modules.0/@extensionDefs.2/@mappingDef/@statements.5/@forBlock/@statements.1/@iteratorVariableDefinition"/>
                        </op1>
                        <op2 xsi:type="dbl:NullLiteral"/>
                      </condition>
                      <ifCaseBlock>
                        <statements xsi:type="dbl:ForEachStatement">
                          <iteratorVariableDefinition name="stm">
                            <classifierTypeExpr>
                              <referencedElement href="file:/Users/blunk/Projekte/Entwicklungen/dmx/runtime-plugins/Examples/src-dmx/base.xmi#//@modules.0/@classifiers.35"/>
                            </classifierTypeExpr>
                          </iteratorVariableDefinition>
                          <iterableExpression xsi:type="dbl:IdExpr">
                            <parentIdExpr referencedElement="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.18/@rhs/@sequence.1">
                              <parentIdExpr referencedElement="//@modules.0/@extensionDefs.2/@mappingDef/@statements.5/@forBlock/@statements.1/@iteratorVariableDefinition"/>
                            </parentIdExpr>
                            <referencedElement href="file:/Users/blunk/Projekte/Entwicklungen/dmx/runtime-plugins/Examples/src-dmx/base.xmi#//@modules.0/@classifiers.34/@methods.0"/>
                            <arguments/>
                          </iterableExpression>
                          <forBlock>
                            <statements xsi:type="dbl:MappingStatement">
                              <parts xsi:type="dbl:FixedMappingPart" code=""/>
                              <parts xsi:type="dbl:DynamicMappingPart">
                                <expr xsi:type="dbl:IdExpr">
                                  <parentIdExpr referencedElement="//@modules.0/@extensionDefs.2/@mappingDef/@statements.5/@forBlock/@statements.1/@forBlock/@statements.0/@ifCaseBlock/@statements.1/@ifCaseBlock/@statements.0/@iteratorVariableDefinition"/>
                                  <referencedElement href="file:/Users/blunk/Projekte/Entwicklungen/dmx/runtime-plugins/Examples/src-dmx/base.xmi#//@modules.0/@classifiers.2/@methods.0"/>
                                  <arguments/>
                                </expr>
                              </parts>
                              <parts xsi:type="dbl:FixedMappingPart" code=";"/>
                            </statements>
                          </forBlock>
                        </statements>
                      </ifCaseBlock>
                    </statements>
                    <statements xsi:type="dbl:IfStatement">
                      <condition xsi:type="dbl:NotEqual">
                        <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.19/@rhs/@sequence.1">
                          <parentIdExpr referencedElement="//@modules.0/@extensionDefs.2/@mappingDef/@statements.5/@forBlock/@statements.1/@iteratorVariableDefinition"/>
                        </op1>
                        <op2 xsi:type="dbl:NullLiteral"/>
                      </condition>
                      <ifCaseBlock>
                        <statements xsi:type="dbl:MappingStatement">
                          <parts xsi:type="dbl:FixedMappingPart" code="&#x9;currentState = \&quot;"/>
                          <parts xsi:type="dbl:DynamicMappingPart">
                            <expr xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.4/@rhs/@sequence.1">
                              <parentIdExpr referencedElement="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.19/@rhs/@sequence.1">
                                <parentIdExpr referencedElement="//@modules.0/@extensionDefs.2/@mappingDef/@statements.5/@forBlock/@statements.1/@iteratorVariableDefinition"/>
                              </parentIdExpr>
                            </expr>
                          </parts>
                          <parts xsi:type="dbl:FixedMappingPart" code="\&quot;;"/>
                        </statements>
                      </ifCaseBlock>
                      <elseCaseBlock>
                        <statements xsi:type="dbl:MappingStatement">
                          <parts xsi:type="dbl:FixedMappingPart" code="&#x9;currentState = null;"/>
                        </statements>
                      </elseCaseBlock>
                    </statements>
                    <statements xsi:type="dbl:MappingStatement">
                      <parts xsi:type="dbl:FixedMappingPart" code="continue;"/>
                    </statements>
                    <statements xsi:type="dbl:IfStatement">
                      <condition xsi:type="dbl:NotEqual">
                        <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.16/@rhs/@sequence.1">
                          <parentIdExpr referencedElement="//@modules.0/@extensionDefs.2/@mappingDef/@statements.5/@forBlock/@statements.1/@iteratorVariableDefinition"/>
                        </op1>
                        <op2 xsi:type="dbl:NullLiteral"/>
                      </condition>
                      <ifCaseBlock>
                        <statements xsi:type="dbl:MappingStatement">
                          <parts xsi:type="dbl:FixedMappingPart" code="}"/>
                        </statements>
                      </ifCaseBlock>
                    </statements>
                  </ifCaseBlock>
                </statements>
                <statements xsi:type="dbl:IfStatement">
                  <condition xsi:type="dbl:NotEqual">
                    <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.13/@rhs/@sequence.1">
                      <parentIdExpr referencedElement="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.10/@rhs/@sequence.0">
                        <parentIdExpr referencedElement="//@modules.0/@extensionDefs.2/@mappingDef/@statements.5/@forBlock/@statements.1/@iteratorVariableDefinition"/>
                      </parentIdExpr>
                    </op1>
                    <op2 xsi:type="dbl:NullLiteral"/>
                  </condition>
                  <ifCaseBlock>
                    <statements xsi:type="dbl:MappingStatement">
                      <parts xsi:type="dbl:FixedMappingPart" code="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;timer = new Timer;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;timer.delay = "/>
                      <parts xsi:type="dbl:DynamicMappingPart">
                        <expr xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.14/@rhs/@sequence.1">
                          <parentIdExpr referencedElement="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.13/@rhs/@sequence.1">
                            <parentIdExpr referencedElement="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.10/@rhs/@sequence.0">
                              <parentIdExpr referencedElement="//@modules.0/@extensionDefs.2/@mappingDef/@statements.5/@forBlock/@statements.1/@iteratorVariableDefinition"/>
                            </parentIdExpr>
                          </parentIdExpr>
                        </expr>
                      </parts>
                      <parts xsi:type="dbl:FixedMappingPart" code=";&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;timer.sm = self;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;activate timer;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;"/>
                    </statements>
                  </ifCaseBlock>
                </statements>
              </forBlock>
            </statements>
            <statements xsi:type="dbl:MappingStatement">
              <parts xsi:type="dbl:FixedMappingPart" code="}"/>
            </statements>
          </forBlock>
        </statements>
        <statements xsi:type="dbl:MappingStatement">
          <parts xsi:type="dbl:FixedMappingPart" code="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (!firstRun) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;empty eventPool;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;wait;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;firstRun = false;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;while (eventPool.size > 0 and currentState != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Object ev = eventPool.first;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;remove ev from eventPool;&#xA;&#x9;&#x9;"/>
        </statements>
        <statements xsi:type="dbl:ForEachStatement">
          <iteratorVariableDefinition name="state">
            <classifierTypeExpr referencedElement="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.4"/>
          </iteratorVariableDefinition>
          <iterableExpression xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.2/@rhs/@sequence.0"/>
          <forBlock>
            <statements xsi:type="dbl:MappingStatement">
              <parts xsi:type="dbl:FixedMappingPart" code="if (currentState == \&quot;"/>
              <parts xsi:type="dbl:DynamicMappingPart">
                <expr xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.4/@rhs/@sequence.1">
                  <parentIdExpr referencedElement="//@modules.0/@extensionDefs.2/@mappingDef/@statements.7/@iteratorVariableDefinition"/>
                </expr>
              </parts>
              <parts xsi:type="dbl:FixedMappingPart" code="\&quot;) {"/>
            </statements>
            <statements xsi:type="dbl:ForEachStatement">
              <iteratorVariableDefinition name="tr">
                <classifierTypeExpr referencedElement="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.10"/>
              </iteratorVariableDefinition>
              <iterableExpression xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.7/@rhs/@sequence.0">
                <parentIdExpr referencedElement="//@modules.0/@extensionDefs.2/@mappingDef/@statements.7/@iteratorVariableDefinition"/>
              </iterableExpression>
              <forBlock>
                <statements xsi:type="dbl:IfStatement">
                  <condition xsi:type="dbl:Or">
                    <op1 xsi:type="dbl:NotEqual">
                      <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.12/@rhs/@sequence.0">
                        <parentIdExpr referencedElement="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.10/@rhs/@sequence.0">
                          <parentIdExpr referencedElement="//@modules.0/@extensionDefs.2/@mappingDef/@statements.7/@forBlock/@statements.1/@iteratorVariableDefinition"/>
                        </parentIdExpr>
                      </op1>
                      <op2 xsi:type="dbl:NullLiteral"/>
                    </op1>
                    <op2 xsi:type="dbl:NotEqual">
                      <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.13/@rhs/@sequence.1">
                        <parentIdExpr referencedElement="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.10/@rhs/@sequence.0">
                          <parentIdExpr referencedElement="//@modules.0/@extensionDefs.2/@mappingDef/@statements.7/@forBlock/@statements.1/@iteratorVariableDefinition"/>
                        </parentIdExpr>
                      </op1>
                      <op2 xsi:type="dbl:NullLiteral"/>
                    </op2>
                  </condition>
                  <ifCaseBlock>
                    <statements xsi:type="dbl:IfStatement">
                      <condition xsi:type="dbl:NotEqual">
                        <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.12/@rhs/@sequence.0">
                          <parentIdExpr referencedElement="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.10/@rhs/@sequence.0">
                            <parentIdExpr referencedElement="//@modules.0/@extensionDefs.2/@mappingDef/@statements.7/@forBlock/@statements.1/@iteratorVariableDefinition"/>
                          </parentIdExpr>
                        </op1>
                        <op2 xsi:type="dbl:NullLiteral"/>
                      </condition>
                      <ifCaseBlock>
                        <statements xsi:type="dbl:MappingStatement">
                          <parts xsi:type="dbl:FixedMappingPart" code="if (ev instanceof "/>
                          <parts xsi:type="dbl:DynamicMappingPart">
                            <expr xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.12/@rhs/@sequence.0">
                              <parentIdExpr referencedElement="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.10/@rhs/@sequence.0">
                                <parentIdExpr referencedElement="//@modules.0/@extensionDefs.2/@mappingDef/@statements.7/@forBlock/@statements.1/@iteratorVariableDefinition"/>
                              </parentIdExpr>
                            </expr>
                          </parts>
                          <parts xsi:type="dbl:FixedMappingPart" code=") {"/>
                        </statements>
                      </ifCaseBlock>
                      <elseCaseBlock>
                        <statements xsi:type="dbl:MappingStatement">
                          <parts xsi:type="dbl:FixedMappingPart" code="if (ev instanceof Timer) {"/>
                        </statements>
                      </elseCaseBlock>
                    </statements>
                    <statements xsi:type="dbl:IfStatement">
                      <condition xsi:type="dbl:NotEqual">
                        <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.16/@rhs/@sequence.1">
                          <parentIdExpr referencedElement="//@modules.0/@extensionDefs.2/@mappingDef/@statements.7/@forBlock/@statements.1/@iteratorVariableDefinition"/>
                        </op1>
                        <op2 xsi:type="dbl:NullLiteral"/>
                      </condition>
                      <ifCaseBlock>
                        <statements xsi:type="dbl:MappingStatement">
                          <parts xsi:type="dbl:FixedMappingPart" code="if ("/>
                          <parts xsi:type="dbl:DynamicMappingPart">
                            <expr xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.16/@rhs/@sequence.1">
                              <parentIdExpr referencedElement="//@modules.0/@extensionDefs.2/@mappingDef/@statements.7/@forBlock/@statements.1/@iteratorVariableDefinition"/>
                            </expr>
                          </parts>
                          <parts xsi:type="dbl:FixedMappingPart" code=") {"/>
                        </statements>
                      </ifCaseBlock>
                    </statements>
                    <statements xsi:type="dbl:IfStatement">
                      <condition xsi:type="dbl:NotEqual">
                        <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.18/@rhs/@sequence.1">
                          <parentIdExpr referencedElement="//@modules.0/@extensionDefs.2/@mappingDef/@statements.7/@forBlock/@statements.1/@iteratorVariableDefinition"/>
                        </op1>
                        <op2 xsi:type="dbl:NullLiteral"/>
                      </condition>
                      <ifCaseBlock>
                        <statements xsi:type="dbl:ForEachStatement">
                          <iteratorVariableDefinition name="stm">
                            <classifierTypeExpr>
                              <referencedElement href="file:/Users/blunk/Projekte/Entwicklungen/dmx/runtime-plugins/Examples/src-dmx/base.xmi#//@modules.0/@classifiers.35"/>
                            </classifierTypeExpr>
                          </iteratorVariableDefinition>
                          <iterableExpression xsi:type="dbl:IdExpr">
                            <parentIdExpr referencedElement="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.18/@rhs/@sequence.1">
                              <parentIdExpr referencedElement="//@modules.0/@extensionDefs.2/@mappingDef/@statements.7/@forBlock/@statements.1/@iteratorVariableDefinition"/>
                            </parentIdExpr>
                            <referencedElement href="file:/Users/blunk/Projekte/Entwicklungen/dmx/runtime-plugins/Examples/src-dmx/base.xmi#//@modules.0/@classifiers.34/@methods.0"/>
                            <arguments/>
                          </iterableExpression>
                          <forBlock>
                            <statements xsi:type="dbl:MappingStatement">
                              <parts xsi:type="dbl:FixedMappingPart" code=""/>
                              <parts xsi:type="dbl:DynamicMappingPart">
                                <expr xsi:type="dbl:IdExpr">
                                  <parentIdExpr referencedElement="//@modules.0/@extensionDefs.2/@mappingDef/@statements.7/@forBlock/@statements.1/@forBlock/@statements.0/@ifCaseBlock/@statements.2/@ifCaseBlock/@statements.0/@iteratorVariableDefinition"/>
                                  <referencedElement href="file:/Users/blunk/Projekte/Entwicklungen/dmx/runtime-plugins/Examples/src-dmx/base.xmi#//@modules.0/@classifiers.2/@methods.0"/>
                                  <arguments/>
                                </expr>
                              </parts>
                              <parts xsi:type="dbl:FixedMappingPart" code=";"/>
                            </statements>
                          </forBlock>
                        </statements>
                      </ifCaseBlock>
                    </statements>
                    <statements xsi:type="dbl:IfStatement">
                      <condition xsi:type="dbl:NotEqual">
                        <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.19/@rhs/@sequence.1">
                          <parentIdExpr referencedElement="//@modules.0/@extensionDefs.2/@mappingDef/@statements.7/@forBlock/@statements.1/@iteratorVariableDefinition"/>
                        </op1>
                        <op2 xsi:type="dbl:NullLiteral"/>
                      </condition>
                      <ifCaseBlock>
                        <statements xsi:type="dbl:MappingStatement">
                          <parts xsi:type="dbl:FixedMappingPart" code="&#x9;currentState = \&quot;"/>
                          <parts xsi:type="dbl:DynamicMappingPart">
                            <expr xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.4/@rhs/@sequence.1">
                              <parentIdExpr referencedElement="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.19/@rhs/@sequence.1">
                                <parentIdExpr referencedElement="//@modules.0/@extensionDefs.2/@mappingDef/@statements.7/@forBlock/@statements.1/@iteratorVariableDefinition"/>
                              </parentIdExpr>
                            </expr>
                          </parts>
                          <parts xsi:type="dbl:FixedMappingPart" code="\&quot;;"/>
                        </statements>
                      </ifCaseBlock>
                      <elseCaseBlock>
                        <statements xsi:type="dbl:MappingStatement">
                          <parts xsi:type="dbl:FixedMappingPart" code="&#x9;currentState = null;"/>
                        </statements>
                      </elseCaseBlock>
                    </statements>
                    <statements xsi:type="dbl:MappingStatement">
                      <parts xsi:type="dbl:FixedMappingPart" code="break;"/>
                    </statements>
                    <statements xsi:type="dbl:IfStatement">
                      <condition xsi:type="dbl:NotEqual">
                        <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@extensionDefs.2/@textualSyntaxDef/@newRules.16/@rhs/@sequence.1">
                          <parentIdExpr referencedElement="//@modules.0/@extensionDefs.2/@mappingDef/@statements.7/@forBlock/@statements.1/@iteratorVariableDefinition"/>
                        </op1>
                        <op2 xsi:type="dbl:NullLiteral"/>
                      </condition>
                      <ifCaseBlock>
                        <statements xsi:type="dbl:MappingStatement">
                          <parts xsi:type="dbl:FixedMappingPart" code="}"/>
                        </statements>
                      </ifCaseBlock>
                    </statements>
                    <statements xsi:type="dbl:MappingStatement">
                      <parts xsi:type="dbl:FixedMappingPart" code="}"/>
                    </statements>
                  </ifCaseBlock>
                </statements>
              </forBlock>
            </statements>
            <statements xsi:type="dbl:MappingStatement">
              <parts xsi:type="dbl:FixedMappingPart" code="}"/>
            </statements>
          </forBlock>
        </statements>
        <statements xsi:type="dbl:MappingStatement">
          <parts xsi:type="dbl:FixedMappingPart" code="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;} // end while (eventPool ...&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;} // end while (true ...&#xA;&#x9;&#x9;&#x9;} // end actions&#xA;&#x9;&#x9;"/>
        </statements>
        <statements xsi:type="dbl:Variable" name="ext">
          <classifierTypeExpr>
            <referencedElement href="file:/Users/blunk/Projekte/Entwicklungen/dmx/runtime-plugins/Examples/src-dmx/base.xmi#//@modules.0/@classifiers.114"/>
          </classifierTypeExpr>
          <initialValue xsi:type="dbl:IdExpr">
            <predefinedId xsi:type="dbl:MeLiteral"/>
          </initialValue>
        </statements>
        <statements xsi:type="dbl:Variable" name="classSimilar">
          <classifierTypeExpr>
            <referencedElement href="file:/Users/blunk/Projekte/Entwicklungen/dmx/runtime-plugins/Examples/src-dmx/base.xmi#//@modules.0/@classifiers.24"/>
          </classifierTypeExpr>
          <initialValue xsi:type="dbl:Cast">
            <op xsi:type="dbl:IdExpr">
              <parentIdExpr referencedElement="//@modules.0/@extensionDefs.2/@mappingDef/@statements.9"/>
              <referencedElement href="file:/Users/blunk/Projekte/Entwicklungen/dmx/runtime-plugins/Examples/src-dmx/base.xmi#//@modules.0/@classifiers.1/@methods.0"/>
              <arguments/>
            </op>
            <classifierTypeExpr>
              <referencedElement href="file:/Users/blunk/Projekte/Entwicklungen/dmx/runtime-plugins/Examples/src-dmx/base.xmi#//@modules.0/@classifiers.24"/>
            </classifierTypeExpr>
          </initialValue>
        </statements>
        <statements xsi:type="dbl:Variable" name="mod">
          <classifierTypeExpr>
            <referencedElement href="file:/Users/blunk/Projekte/Entwicklungen/dmx/runtime-plugins/Examples/src-dmx/base.xmi#//@modules.0/@classifiers.5"/>
          </classifierTypeExpr>
          <initialValue xsi:type="dbl:Cast">
            <op xsi:type="dbl:IdExpr">
              <parentIdExpr referencedElement="//@modules.0/@extensionDefs.2/@mappingDef/@statements.10"/>
              <referencedElement href="file:/Users/blunk/Projekte/Entwicklungen/dmx/runtime-plugins/Examples/src-dmx/base.xmi#//@modules.0/@classifiers.1/@methods.0"/>
              <arguments/>
            </op>
            <classifierTypeExpr>
              <referencedElement href="file:/Users/blunk/Projekte/Entwicklungen/dmx/runtime-plugins/Examples/src-dmx/base.xmi#//@modules.0/@classifiers.5"/>
            </classifierTypeExpr>
          </initialValue>
        </statements>
        <statements xsi:type="dbl:Variable" name="clazz">
          <classifierTypeExpr>
            <referencedElement href="file:/Users/blunk/Projekte/Entwicklungen/dmx/runtime-plugins/Examples/src-dmx/base.xmi#//@modules.0/@classifiers.26"/>
          </classifierTypeExpr>
          <initialValue xsi:type="dbl:Cast">
            <op xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@extensionDefs.2/@mappingDef/@statements.10"/>
            <classifierTypeExpr>
              <referencedElement href="file:/Users/blunk/Projekte/Entwicklungen/dmx/runtime-plugins/Examples/src-dmx/base.xmi#//@modules.0/@classifiers.26"/>
            </classifierTypeExpr>
          </initialValue>
        </statements>
        <statements xsi:type="dbl:SetGenContextStatement" addAfterContext="true">
          <context xsi:type="dbl:IdExpr">
            <parentIdExpr>
              <parentIdExpr referencedElement="//@modules.0/@extensionDefs.2/@mappingDef/@statements.11"/>
              <referencedElement href="file:/Users/blunk/Projekte/Entwicklungen/dmx/runtime-plugins/Examples/src-dmx/base.xmi#//@modules.0/@classifiers.5/@methods.0"/>
              <arguments/>
            </parentIdExpr>
            <predefinedId xsi:type="dbl:FirstInSet"/>
          </context>
        </statements>
        <statements xsi:type="dbl:MappingStatement">
          <parts xsi:type="dbl:FixedMappingPart" code="&#xA;&#x9;&#x9;&#x9;active class Timer {&#xA;&#x9;&#x9;&#x9;&#x9;"/>
          <parts xsi:type="dbl:DynamicMappingPart">
            <expr xsi:type="dbl:IdExpr">
              <parentIdExpr referencedElement="//@modules.0/@extensionDefs.2/@mappingDef/@statements.12"/>
              <referencedElement href="file:/Users/blunk/Projekte/Entwicklungen/dmx/runtime-plugins/Examples/src-dmx/base.xmi#//@modules.0/@classifiers.33/@methods.0"/>
              <arguments/>
            </expr>
          </parts>
          <parts xsi:type="dbl:FixedMappingPart" code=" sm;&#xA;&#x9;&#x9;&#x9;&#x9;int delay = 1;&#xA;&#x9;&#x9;&#x9;&#x9;boolean invalid = false;&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;actions {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;advance delay;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (!invalid) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;place self into sm.eventPool;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reactivate sm;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;"/>
        </statements>
      </mappingDef>
    </extensionDefs>
  </modules>
</dbl:Model>
