#import "sml"

module sml_application {

	boolean debug = true;

	void trace(string msg) {
		if (debug) {
			print time + " - " + active + ": " + msg + "\n";
		}
	}

	//signal Start;
	//signal Pause;
	//signal Resume;
	//signal Reset;
	class Start {}
	class Pause {}
	class Resume {}
	class Reset {}

	active class Counter {
		int count;
		int limit = 10;
		//1000000;
		int step = 1;
		
		stateMachine CounterBehavior {
			initial -> StandBy;
			state StandBy (
				Start / { count=0; } -> Active,
				Resume -> Active
			);
			state Active (
				[count >= limit] / {
					trace("Finished.");
				} -> final,
				after(step) [count < limit] / {
					count=count+1;
					trace("Tick " + count);
				} -> Active,
				Pause -> StandBy,
				Reset / {
					count=0;
				} -> Active
			);
		}
	}
	
	void main() {
		Counter c1 = new Counter;
		activate c1;
		
		Counter c2 = new Counter;
		activate c2 priority 2;

		send new Start to c1;
		send new Start to c2;
		
		advance c1.limit+1;
	}
	
}

