<?xml version="1.0" encoding="ASCII"?>
<dbl:Model xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dbl="http://www.informatik.hu-berlin.de/sam/dbl">
  <imports file="../stdlib">
    <model href="../stdlib.xmi#/"/>
  </imports>
  <module name="singleTrainOnlyFilterWithStatePatternInClass">
    <classifiers xsi:type="dbl:Class" name="Train">
      <attributes name="number">
        <primitiveType xsi:type="dbl:IntType"/>
      </attributes>
    </classifiers>
    <classifiers xsi:type="dbl:Class" name="Transition">
      <attributes name="internal">
        <primitiveType xsi:type="dbl:BoolType"/>
      </attributes>
      <attributes name="nextState">
        <primitiveType xsi:type="dbl:IntType"/>
      </attributes>
      <constructors>
        <statements xsi:type="dbl:Assignment">
          <variable>
            <idExpr referencedElement="//@module/@classifiers.1/@constructors.0/@parameters.0">
              <parentIdExpr>
                <predefinedId xsi:type="dbl:MeLiteral"/>
              </parentIdExpr>
            </idExpr>
          </variable>
          <value xsi:type="dbl:IdExpr" referencedElement="//@module/@classifiers.1/@constructors.0/@parameters.0"/>
        </statements>
        <statements xsi:type="dbl:Assignment">
          <variable>
            <idExpr referencedElement="//@module/@classifiers.1/@constructors.0/@parameters.1">
              <parentIdExpr>
                <predefinedId xsi:type="dbl:MeLiteral"/>
              </parentIdExpr>
            </idExpr>
          </variable>
          <value xsi:type="dbl:IdExpr" referencedElement="//@module/@classifiers.1/@constructors.0/@parameters.1"/>
        </statements>
        <parameters name="internal">
          <primitiveType xsi:type="dbl:BoolType"/>
        </parameters>
        <parameters name="nextState">
          <primitiveType xsi:type="dbl:IntType"/>
        </parameters>
      </constructors>
    </classifiers>
    <classifiers xsi:type="dbl:ActiveClass" name="Filter">
      <attributes name="latestTrain">
        <classifierType referencedElement="//@module/@classifiers.0"/>
      </attributes>
      <attributes xsi:type="dbl:ControlVariable" name="enabled">
        <primitiveType xsi:type="dbl:BoolType"/>
        <initialValue xsi:type="dbl:FalseLiteral"/>
      </attributes>
      <attributes xsi:type="dbl:ControlVariable" name="signal">
        <classifierType>
          <referencedElement href="../stdlib.xmi#//@module/@classifiers.1"/>
        </classifierType>
      </attributes>
      <attributes name="timer1">
        <classifierType referencedElement="//@module/@classifiers.3"/>
      </attributes>
      <methods name="enter">
        <primitiveType xsi:type="dbl:VoidType"/>
        <statements xsi:type="dbl:SwitchStatement">
          <variable>
            <idExpr referencedElement="//@module/@classifiers.2/@methods.0/@parameters.0"/>
          </variable>
          <cases>
            <value xsi:type="dbl:IntLiteral"/>
            <body xsi:type="dbl:FunctionCall">
              <callIdExpr referencedElement="//@module/@classifiers.2/@methods.4">
                <callPart/>
              </callIdExpr>
            </body>
            <body xsi:type="dbl:BreakStatement"/>
          </cases>
          <cases>
            <value xsi:type="dbl:IntLiteral" value="1"/>
            <body xsi:type="dbl:FunctionCall">
              <callIdExpr referencedElement="//@module/@classifiers.2/@methods.6">
                <callPart/>
              </callIdExpr>
            </body>
            <body xsi:type="dbl:BreakStatement"/>
          </cases>
          <cases>
            <value xsi:type="dbl:IntLiteral" value="2"/>
            <body xsi:type="dbl:FunctionCall">
              <callIdExpr referencedElement="//@module/@classifiers.2/@methods.8">
                <callPart/>
              </callIdExpr>
            </body>
            <body xsi:type="dbl:BreakStatement"/>
          </cases>
        </statements>
        <parameters name="currentState">
          <primitiveType xsi:type="dbl:IntType"/>
        </parameters>
      </methods>
      <methods name="send">
        <primitiveType xsi:type="dbl:VoidType"/>
        <statements xsi:type="dbl:Assignment">
          <variable>
            <idExpr referencedElement="//@module/@classifiers.2/@attributes.2"/>
          </variable>
          <value xsi:type="dbl:IdExpr" referencedElement="//@module/@classifiers.2/@methods.1/@parameters.0"/>
        </statements>
        <parameters name="newSignal">
          <classifierType>
            <referencedElement href="../stdlib.xmi#//@module/@classifiers.1"/>
          </classifierType>
        </parameters>
      </methods>
      <methods name="publish">
        <primitiveType xsi:type="dbl:VoidType"/>
        <statements xsi:type="dbl:FunctionCall">
          <callIdExpr>
            <parentIdExpr>
              <referencedElement href="../stdlib.xmi#//@module/@classifiers.3"/>
            </parentIdExpr>
            <referencedElement href="../stdlib.xmi#//@module/@classifiers.3/@methods.1"/>
            <callPart>
              <callArguments xsi:type="dbl:Plus">
                <op1 xsi:type="dbl:StringLiteral" value="published train at "/>
                <op2 xsi:type="dbl:TimeLiteral"/>
              </callArguments>
            </callPart>
          </callIdExpr>
        </statements>
      </methods>
      <methods name="update">
        <primitiveType xsi:type="dbl:VoidType"/>
        <statements xsi:type="dbl:FunctionCall">
          <callIdExpr>
            <parentIdExpr>
              <referencedElement href="../stdlib.xmi#//@module/@classifiers.3"/>
            </parentIdExpr>
            <referencedElement href="../stdlib.xmi#//@module/@classifiers.3/@methods.1"/>
            <callPart>
              <callArguments xsi:type="dbl:Plus">
                <op1 xsi:type="dbl:StringLiteral" value="received update at "/>
                <op2 xsi:type="dbl:TimeLiteral"/>
              </callArguments>
            </callPart>
          </callIdExpr>
        </statements>
        <statements xsi:type="dbl:Assignment">
          <variable>
            <idExpr referencedElement="//@module/@classifiers.2/@attributes.0"/>
          </variable>
          <value xsi:type="dbl:IdExpr" referencedElement="//@module/@classifiers.2/@methods.3/@parameters.0"/>
        </statements>
        <parameters name="train">
          <classifierType referencedElement="//@module/@classifiers.0"/>
        </parameters>
      </methods>
      <methods name="checking_enter">
        <primitiveType xsi:type="dbl:VoidType"/>
      </methods>
      <methods name="checking_wait">
        <classifierType referencedElement="//@module/@classifiers.1"/>
        <statements xsi:type="dbl:WaitUntil">
          <condition xsi:type="dbl:Or">
            <op1 xsi:type="dbl:Not">
              <op xsi:type="dbl:IdExpr" referencedElement="//@module/@classifiers.2/@attributes.1"/>
            </op1>
            <op2 xsi:type="dbl:And">
              <op1 xsi:type="dbl:NotEqual">
                <op1 xsi:type="dbl:IdExpr" referencedElement="//@module/@classifiers.2/@attributes.2"/>
                <op2 xsi:type="dbl:NullLiteral"/>
              </op1>
              <op2 xsi:type="dbl:InstanceOf">
                <op1 xsi:type="dbl:IdExpr" referencedElement="//@module/@classifiers.2/@attributes.2"/>
                <op2 xsi:type="dbl:TypeAccess">
                  <idExpr referencedElement="//@module/@classifiers.0"/>
                </op2>
              </op2>
            </op2>
          </condition>
        </statements>
        <statements xsi:type="dbl:IfStatement">
          <condition xsi:type="dbl:Not">
            <op xsi:type="dbl:IdExpr" referencedElement="//@module/@classifiers.2/@attributes.1"/>
          </condition>
          <trueCase xsi:type="dbl:LocalScopeStatement">
            <statements xsi:type="dbl:Return">
              <value xsi:type="dbl:CreateObject">
                <classifierType referencedElement="//@module/@classifiers.1">
                  <callPart>
                    <callArguments xsi:type="dbl:FalseLiteral"/>
                    <callArguments xsi:type="dbl:IntLiteral" value="2"/>
                  </callPart>
                </classifierType>
              </value>
            </statements>
          </trueCase>
        </statements>
        <statements xsi:type="dbl:IfStatement">
          <condition xsi:type="dbl:And">
            <op1 xsi:type="dbl:NotEqual">
              <op1 xsi:type="dbl:IdExpr" referencedElement="//@module/@classifiers.2/@attributes.2"/>
              <op2 xsi:type="dbl:NullLiteral"/>
            </op1>
            <op2 xsi:type="dbl:InstanceOf">
              <op1 xsi:type="dbl:IdExpr" referencedElement="//@module/@classifiers.2/@attributes.2"/>
              <op2 xsi:type="dbl:TypeAccess">
                <idExpr referencedElement="//@module/@classifiers.0"/>
              </op2>
            </op2>
          </condition>
          <trueCase xsi:type="dbl:LocalScopeStatement">
            <statements xsi:type="dbl:FunctionCall">
              <callIdExpr referencedElement="//@module/@classifiers.2/@methods.3">
                <callPart>
                  <callArguments xsi:type="dbl:Cast">
                    <classifierType referencedElement="//@module/@classifiers.0"/>
                    <op xsi:type="dbl:IdExpr" referencedElement="//@module/@classifiers.2/@attributes.2"/>
                  </callArguments>
                </callPart>
              </callIdExpr>
            </statements>
            <statements xsi:type="dbl:Assignment">
              <variable>
                <idExpr referencedElement="//@module/@classifiers.2/@attributes.2"/>
              </variable>
              <value xsi:type="dbl:NullLiteral"/>
            </statements>
            <statements xsi:type="dbl:Return">
              <value xsi:type="dbl:CreateObject">
                <classifierType referencedElement="//@module/@classifiers.1">
                  <callPart>
                    <callArguments xsi:type="dbl:FalseLiteral"/>
                    <callArguments xsi:type="dbl:IntLiteral" value="1"/>
                  </callPart>
                </classifierType>
              </value>
            </statements>
          </trueCase>
        </statements>
        <statements xsi:type="dbl:Return">
          <value xsi:type="dbl:NullLiteral"/>
        </statements>
      </methods>
      <methods name="filtering_enter">
        <primitiveType xsi:type="dbl:VoidType"/>
        <statements xsi:type="dbl:Assignment">
          <variable>
            <idExpr referencedElement="//@module/@classifiers.2/@attributes.3"/>
          </variable>
          <value xsi:type="dbl:CreateObject">
            <classifierType referencedElement="//@module/@classifiers.3">
              <callPart>
                <callArguments xsi:type="dbl:IntLiteral" value="6"/>
              </callPart>
            </classifierType>
          </value>
        </statements>
        <statements xsi:type="dbl:ActivateObject">
          <objectAccess xsi:type="dbl:IdExpr" referencedElement="//@module/@classifiers.2/@attributes.3"/>
        </statements>
      </methods>
      <methods name="filtering_wait">
        <classifierType referencedElement="//@module/@classifiers.1"/>
        <statements xsi:type="dbl:WaitUntil">
          <condition xsi:type="dbl:Or">
            <op1 xsi:type="dbl:Or">
              <op1 xsi:type="dbl:IdExpr" referencedElement="//@module/@classifiers.3/@attributes.1">
                <parentIdExpr referencedElement="//@module/@classifiers.2/@attributes.3"/>
              </op1>
              <op2 xsi:type="dbl:And">
                <op1 xsi:type="dbl:NotEqual">
                  <op1 xsi:type="dbl:IdExpr" referencedElement="//@module/@classifiers.2/@attributes.2"/>
                  <op2 xsi:type="dbl:NullLiteral"/>
                </op1>
                <op2 xsi:type="dbl:InstanceOf">
                  <op1 xsi:type="dbl:IdExpr" referencedElement="//@module/@classifiers.2/@attributes.2"/>
                  <op2 xsi:type="dbl:TypeAccess">
                    <idExpr referencedElement="//@module/@classifiers.0"/>
                  </op2>
                </op2>
              </op2>
            </op1>
            <op2 xsi:type="dbl:Not">
              <op xsi:type="dbl:IdExpr" referencedElement="//@module/@classifiers.2/@attributes.1"/>
            </op2>
          </condition>
        </statements>
        <statements xsi:type="dbl:IfStatement">
          <condition xsi:type="dbl:IdExpr" referencedElement="//@module/@classifiers.3/@attributes.1">
            <parentIdExpr referencedElement="//@module/@classifiers.2/@attributes.3"/>
          </condition>
          <trueCase xsi:type="dbl:LocalScopeStatement">
            <statements xsi:type="dbl:Assignment">
              <variable>
                <idExpr referencedElement="//@module/@classifiers.3/@attributes.1">
                  <parentIdExpr referencedElement="//@module/@classifiers.2/@attributes.3"/>
                </idExpr>
              </variable>
              <value xsi:type="dbl:FalseLiteral"/>
            </statements>
            <statements xsi:type="dbl:FunctionCall">
              <callIdExpr referencedElement="//@module/@classifiers.2/@methods.2">
                <callPart/>
              </callIdExpr>
            </statements>
            <statements xsi:type="dbl:Return">
              <value xsi:type="dbl:CreateObject">
                <classifierType referencedElement="//@module/@classifiers.1">
                  <callPart>
                    <callArguments xsi:type="dbl:FalseLiteral"/>
                    <callArguments xsi:type="dbl:IntLiteral"/>
                  </callPart>
                </classifierType>
              </value>
            </statements>
          </trueCase>
        </statements>
        <statements xsi:type="dbl:IfStatement">
          <condition xsi:type="dbl:And">
            <op1 xsi:type="dbl:NotEqual">
              <op1 xsi:type="dbl:IdExpr" referencedElement="//@module/@classifiers.2/@attributes.2"/>
              <op2 xsi:type="dbl:NullLiteral"/>
            </op1>
            <op2 xsi:type="dbl:InstanceOf">
              <op1 xsi:type="dbl:IdExpr" referencedElement="//@module/@classifiers.2/@attributes.2"/>
              <op2 xsi:type="dbl:TypeAccess">
                <idExpr referencedElement="//@module/@classifiers.0"/>
              </op2>
            </op2>
          </condition>
          <trueCase xsi:type="dbl:LocalScopeStatement">
            <statements xsi:type="dbl:FunctionCall">
              <callIdExpr referencedElement="//@module/@classifiers.2/@methods.3">
                <callPart>
                  <callArguments xsi:type="dbl:Cast">
                    <classifierType referencedElement="//@module/@classifiers.0"/>
                    <op xsi:type="dbl:IdExpr" referencedElement="//@module/@classifiers.2/@attributes.2"/>
                  </callArguments>
                </callPart>
              </callIdExpr>
            </statements>
            <statements xsi:type="dbl:Assignment">
              <variable>
                <idExpr referencedElement="//@module/@classifiers.2/@attributes.2"/>
              </variable>
              <value xsi:type="dbl:NullLiteral"/>
            </statements>
            <statements xsi:type="dbl:Return">
              <value xsi:type="dbl:CreateObject">
                <classifierType referencedElement="//@module/@classifiers.1">
                  <callPart>
                    <callArguments xsi:type="dbl:TrueLiteral"/>
                    <callArguments xsi:type="dbl:IntLiteral" value="1"/>
                  </callPart>
                </classifierType>
              </value>
            </statements>
          </trueCase>
        </statements>
        <statements xsi:type="dbl:IfStatement">
          <condition xsi:type="dbl:Not">
            <op xsi:type="dbl:IdExpr" referencedElement="//@module/@classifiers.2/@attributes.1"/>
          </condition>
          <trueCase xsi:type="dbl:LocalScopeStatement">
            <statements xsi:type="dbl:Return">
              <value xsi:type="dbl:CreateObject">
                <classifierType referencedElement="//@module/@classifiers.1">
                  <callPart>
                    <callArguments xsi:type="dbl:FalseLiteral"/>
                    <callArguments xsi:type="dbl:IntLiteral" value="2"/>
                  </callPart>
                </classifierType>
              </value>
            </statements>
          </trueCase>
        </statements>
        <statements xsi:type="dbl:Return">
          <value xsi:type="dbl:NullLiteral"/>
        </statements>
      </methods>
      <methods name="disabled_enter">
        <primitiveType xsi:type="dbl:VoidType"/>
      </methods>
      <methods name="disabled_wait">
        <classifierType referencedElement="//@module/@classifiers.1"/>
        <statements xsi:type="dbl:WaitUntil">
          <condition xsi:type="dbl:IdExpr" referencedElement="//@module/@classifiers.2/@attributes.1"/>
        </statements>
        <statements xsi:type="dbl:IfStatement">
          <condition xsi:type="dbl:IdExpr" referencedElement="//@module/@classifiers.2/@attributes.1"/>
          <trueCase xsi:type="dbl:Return">
            <value xsi:type="dbl:CreateObject">
              <classifierType referencedElement="//@module/@classifiers.1">
                <callPart>
                  <callArguments xsi:type="dbl:FalseLiteral"/>
                  <callArguments xsi:type="dbl:IntLiteral"/>
                </callPart>
              </classifierType>
            </value>
          </trueCase>
        </statements>
        <statements xsi:type="dbl:Return">
          <value xsi:type="dbl:NullLiteral"/>
        </statements>
      </methods>
      <actionsBlock>
        <statements xsi:type="dbl:Variable" name="initialState">
          <primitiveType xsi:type="dbl:IntType"/>
          <initialValue xsi:type="dbl:IntLiteral"/>
        </statements>
        <statements xsi:type="dbl:Variable" name="initialTransition">
          <classifierType referencedElement="//@module/@classifiers.1"/>
          <initialValue xsi:type="dbl:CreateObject">
            <classifierType referencedElement="//@module/@classifiers.1">
              <callPart>
                <callArguments xsi:type="dbl:FalseLiteral"/>
                <callArguments xsi:type="dbl:IdExpr" referencedElement="//@module/@classifiers.2/@actionsBlock/@statements.0"/>
              </callPart>
            </classifierType>
          </initialValue>
        </statements>
        <statements xsi:type="dbl:Variable" name="currentState">
          <primitiveType xsi:type="dbl:IntType"/>
          <initialValue xsi:type="dbl:IdExpr" referencedElement="//@module/@classifiers.1/@attributes.1">
            <parentIdExpr referencedElement="//@module/@classifiers.2/@actionsBlock/@statements.1"/>
          </initialValue>
        </statements>
        <statements xsi:type="dbl:Variable" name="lastFired">
          <classifierType referencedElement="//@module/@classifiers.1"/>
          <initialValue xsi:type="dbl:IdExpr" referencedElement="//@module/@classifiers.2/@actionsBlock/@statements.1"/>
        </statements>
        <statements xsi:type="dbl:WhileStatement">
          <condition xsi:type="dbl:NotEqual">
            <op1 xsi:type="dbl:IdExpr" referencedElement="//@module/@classifiers.2/@actionsBlock/@statements.2"/>
            <op2 xsi:type="dbl:Neg">
              <op xsi:type="dbl:IntLiteral" value="1"/>
            </op2>
          </condition>
          <body xsi:type="dbl:LocalScopeStatement">
            <statements xsi:type="dbl:IfStatement">
              <condition xsi:type="dbl:And">
                <op1 xsi:type="dbl:NotEqual">
                  <op1 xsi:type="dbl:IdExpr" referencedElement="//@module/@classifiers.2/@actionsBlock/@statements.3"/>
                  <op2 xsi:type="dbl:NullLiteral"/>
                </op1>
                <op2 xsi:type="dbl:Not">
                  <op xsi:type="dbl:IdExpr" referencedElement="//@module/@classifiers.1/@attributes.0">
                    <parentIdExpr referencedElement="//@module/@classifiers.2/@actionsBlock/@statements.3"/>
                  </op>
                </op2>
              </condition>
              <trueCase xsi:type="dbl:LocalScopeStatement">
                <statements xsi:type="dbl:FunctionCall">
                  <callIdExpr referencedElement="//@module/@classifiers.2/@methods.0">
                    <callPart>
                      <callArguments xsi:type="dbl:IdExpr" referencedElement="//@module/@classifiers.2/@actionsBlock/@statements.2"/>
                    </callPart>
                  </callIdExpr>
                </statements>
              </trueCase>
            </statements>
            <statements xsi:type="dbl:SwitchStatement">
              <variable>
                <idExpr referencedElement="//@module/@classifiers.2/@actionsBlock/@statements.2"/>
              </variable>
              <cases>
                <value xsi:type="dbl:IntLiteral"/>
                <body xsi:type="dbl:Assignment">
                  <variable>
                    <idExpr referencedElement="//@module/@classifiers.2/@actionsBlock/@statements.3"/>
                  </variable>
                  <value xsi:type="dbl:IdExpr" referencedElement="//@module/@classifiers.2/@methods.5">
                    <callPart/>
                  </value>
                </body>
                <body xsi:type="dbl:BreakStatement"/>
              </cases>
              <cases>
                <value xsi:type="dbl:IntLiteral" value="1"/>
                <body xsi:type="dbl:Assignment">
                  <variable>
                    <idExpr referencedElement="//@module/@classifiers.2/@actionsBlock/@statements.3"/>
                  </variable>
                  <value xsi:type="dbl:IdExpr" referencedElement="//@module/@classifiers.2/@methods.7">
                    <callPart/>
                  </value>
                </body>
                <body xsi:type="dbl:BreakStatement"/>
              </cases>
              <cases>
                <value xsi:type="dbl:IntLiteral" value="2"/>
                <body xsi:type="dbl:Assignment">
                  <variable>
                    <idExpr referencedElement="//@module/@classifiers.2/@actionsBlock/@statements.3"/>
                  </variable>
                  <value xsi:type="dbl:IdExpr" referencedElement="//@module/@classifiers.2/@methods.9">
                    <callPart/>
                  </value>
                </body>
                <body xsi:type="dbl:BreakStatement"/>
              </cases>
            </statements>
            <statements xsi:type="dbl:IfStatement">
              <condition xsi:type="dbl:NotEqual">
                <op1 xsi:type="dbl:IdExpr" referencedElement="//@module/@classifiers.2/@actionsBlock/@statements.3"/>
                <op2 xsi:type="dbl:NullLiteral"/>
              </condition>
              <trueCase xsi:type="dbl:LocalScopeStatement">
                <statements xsi:type="dbl:Assignment">
                  <variable>
                    <idExpr referencedElement="//@module/@classifiers.2/@actionsBlock/@statements.2"/>
                  </variable>
                  <value xsi:type="dbl:IdExpr" referencedElement="//@module/@classifiers.1/@attributes.1">
                    <parentIdExpr referencedElement="//@module/@classifiers.2/@actionsBlock/@statements.3"/>
                  </value>
                </statements>
              </trueCase>
              <falseCase xsi:type="dbl:LocalScopeStatement">
                <statements xsi:type="dbl:Assignment">
                  <variable>
                    <idExpr referencedElement="//@module/@classifiers.2/@actionsBlock/@statements.2"/>
                  </variable>
                  <value xsi:type="dbl:Neg">
                    <op xsi:type="dbl:IntLiteral" value="1"/>
                  </value>
                </statements>
              </falseCase>
            </statements>
          </body>
        </statements>
      </actionsBlock>
    </classifiers>
    <classifiers xsi:type="dbl:ActiveClass" name="Timer">
      <attributes name="duration">
        <primitiveType xsi:type="dbl:IntType"/>
      </attributes>
      <attributes xsi:type="dbl:ControlVariable" name="expired">
        <primitiveType xsi:type="dbl:BoolType"/>
        <initialValue xsi:type="dbl:FalseLiteral"/>
      </attributes>
      <constructors>
        <statements xsi:type="dbl:Assignment">
          <variable>
            <idExpr referencedElement="//@module/@classifiers.3/@constructors.0/@parameters.0">
              <parentIdExpr>
                <predefinedId xsi:type="dbl:MeLiteral"/>
              </parentIdExpr>
            </idExpr>
          </variable>
          <value xsi:type="dbl:IdExpr" referencedElement="//@module/@classifiers.3/@constructors.0/@parameters.0"/>
        </statements>
        <parameters name="duration">
          <primitiveType xsi:type="dbl:IntType"/>
        </parameters>
      </constructors>
      <actionsBlock>
        <statements xsi:type="dbl:Advance">
          <time xsi:type="dbl:IdExpr" referencedElement="//@module/@classifiers.3/@attributes.0"/>
        </statements>
        <statements xsi:type="dbl:Assignment">
          <variable>
            <idExpr referencedElement="//@module/@classifiers.3/@attributes.1"/>
          </variable>
          <value xsi:type="dbl:TrueLiteral"/>
        </statements>
      </actionsBlock>
    </classifiers>
    <classifiers xsi:type="dbl:ActiveClass" name="TrainArrival">
      <attributes name="filter">
        <classifierType referencedElement="//@module/@classifiers.2"/>
      </attributes>
      <actionsBlock>
        <statements xsi:type="dbl:WhileStatement">
          <condition xsi:type="dbl:TrueLiteral"/>
          <body xsi:type="dbl:LocalScopeStatement">
            <statements xsi:type="dbl:Advance">
              <time xsi:type="dbl:IntLiteral" value="2"/>
            </statements>
            <statements xsi:type="dbl:Variable" name="train">
              <classifierType referencedElement="//@module/@classifiers.0"/>
              <initialValue xsi:type="dbl:CreateObject">
                <classifierType referencedElement="//@module/@classifiers.0">
                  <callPart/>
                </classifierType>
              </initialValue>
            </statements>
            <statements xsi:type="dbl:Assignment">
              <variable>
                <idExpr referencedElement="//@module/@classifiers.0/@attributes.0">
                  <parentIdExpr referencedElement="//@module/@classifiers.4/@actionsBlock/@statements.0/@body/@statements.1"/>
                </idExpr>
              </variable>
              <value xsi:type="dbl:IntLiteral" value="2"/>
            </statements>
            <statements xsi:type="dbl:FunctionCall">
              <callIdExpr referencedElement="//@module/@classifiers.2/@methods.1">
                <parentIdExpr referencedElement="//@module/@classifiers.4/@attributes.0"/>
                <callPart>
                  <callArguments xsi:type="dbl:IdExpr" referencedElement="//@module/@classifiers.4/@actionsBlock/@statements.0/@body/@statements.1"/>
                </callPart>
              </callIdExpr>
            </statements>
          </body>
        </statements>
      </actionsBlock>
    </classifiers>
    <functions name="main">
      <primitiveType xsi:type="dbl:VoidType"/>
      <statements xsi:type="dbl:Variable" name="filter">
        <classifierType referencedElement="//@module/@classifiers.2"/>
        <initialValue xsi:type="dbl:CreateObject">
          <classifierType referencedElement="//@module/@classifiers.2">
            <callPart/>
          </classifierType>
        </initialValue>
      </statements>
      <statements xsi:type="dbl:ActivateObject">
        <objectAccess xsi:type="dbl:IdExpr" referencedElement="//@module/@functions.0/@statements.0"/>
      </statements>
      <statements xsi:type="dbl:Variable" name="arrival">
        <classifierType referencedElement="//@module/@classifiers.4"/>
        <initialValue xsi:type="dbl:CreateObject">
          <classifierType referencedElement="//@module/@classifiers.4">
            <callPart/>
          </classifierType>
        </initialValue>
      </statements>
      <statements xsi:type="dbl:ActivateObject">
        <objectAccess xsi:type="dbl:IdExpr" referencedElement="//@module/@functions.0/@statements.2"/>
      </statements>
      <statements xsi:type="dbl:Assignment">
        <variable>
          <idExpr referencedElement="//@module/@functions.0/@statements.0">
            <parentIdExpr referencedElement="//@module/@functions.0/@statements.2"/>
          </idExpr>
        </variable>
        <value xsi:type="dbl:IdExpr" referencedElement="//@module/@functions.0/@statements.0"/>
      </statements>
      <statements xsi:type="dbl:Advance">
        <time xsi:type="dbl:IntLiteral" value="10"/>
      </statements>
      <statements xsi:type="dbl:Assignment">
        <variable>
          <idExpr referencedElement="//@module/@classifiers.2/@attributes.1">
            <parentIdExpr referencedElement="//@module/@functions.0/@statements.0"/>
          </idExpr>
        </variable>
        <value xsi:type="dbl:TrueLiteral"/>
      </statements>
      <statements xsi:type="dbl:Advance">
        <time xsi:type="dbl:IntLiteral" value="15"/>
      </statements>
      <statements xsi:type="dbl:Assignment">
        <variable>
          <idExpr referencedElement="//@module/@classifiers.2/@attributes.1">
            <parentIdExpr referencedElement="//@module/@functions.0/@statements.0"/>
          </idExpr>
        </variable>
        <value xsi:type="dbl:FalseLiteral"/>
      </statements>
      <statements xsi:type="dbl:Advance">
        <time xsi:type="dbl:IntLiteral" value="10"/>
      </statements>
    </functions>
  </module>
</dbl:Model>
