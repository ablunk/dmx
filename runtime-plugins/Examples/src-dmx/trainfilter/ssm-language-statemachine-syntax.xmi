<?xml version="1.0" encoding="ASCII"?>
<dbl:Model xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dbl="http://www.informatik.hu-berlin.de/sam/dbl">
  <imports file="../dbl">
    <model href="../dbl.xmi#/"/>
  </imports>
  <imports file="../stdlib">
    <model href="../stdlib.xmi#/"/>
  </imports>
  <imports file="../stdx">
    <model href="../stdx.xmi#/"/>
  </imports>
  <module name="ssmsyntax">
    <extensions name="StateMachine" concreteSyntax="extension StateMachine extends dbl ClassContentExtension {&#xA;&#x9;start StateMachine;&#xA;&#x9;&#xA;&#x9;StateMachine -> &quot;state&quot; &quot;machine&quot; &quot;{&quot; ManyStates &quot;}&quot;;&#xA;&#x9;ManyStates -> ;&#xA;&#x9;ManyStates -> states : list State ManyStates;&#xA;&#x9;&#xA;&#x9;State -> InitialModifier &quot;state&quot; name:ID &quot;{&quot;&#xA;&#x9;&#x9;ManyTransitions&#xA;&#x9;&quot;}&quot;;&#xA;&#x9;InitialModifier -> initial:&quot;initial&quot;;&#xA;&#x9;InitialModifier -> ;&#xA;&#x9;&#xA;&#x9;ManyTransitions -> ;&#xA;&#x9;ManyTransitions -> outgoing : list Transition ManyTransitions;&#xA;&#xA;&#x9;Transition -> InternalTransition;&#xA;&#x9;Transition -> ExternalTransition;&#xA;&#x9;&#xA;&#x9;InternalTransition -> internal:&quot;internal&quot; Trigger;&#xA;&#x9;ExternalTransition -> Trigger &quot;->&quot; TargetState;&#xA;&#x9;&#xA;&#x9;Trigger -> &quot;when&quot; condition:Expression Effects;&#xA;&#x9;Trigger -> &quot;signal&quot; messageVariable:Variable Effects;&#xA;&#x9;Trigger -> &quot;after&quot; timeDuration:Expression Effects;&#xA;&#x9;Effects -> ;&#xA;&#x9;Effects -> &quot;do&quot; effects : SimpleStatement;&#xA;&#x9;&#x9;&#xA;&#x9;TargetState -> target:$$State;&#xA;&#x9;TargetState -> stop:&quot;stop&quot;;&#xA;}">
      <extensionPoint href="../dbl.xmi#//@module/@classifiers.11"/>
      <syntaxDefinition concreteSyntax="{&#xA;&#x9;start StateMachine;&#xA;&#x9;&#xA;&#x9;StateMachine -> &quot;state&quot; &quot;machine&quot; &quot;{&quot; ManyStates &quot;}&quot;;&#xA;&#x9;ManyStates -> ;&#xA;&#x9;ManyStates -> states : list State ManyStates;&#xA;&#x9;&#xA;&#x9;State -> InitialModifier &quot;state&quot; name:ID &quot;{&quot;&#xA;&#x9;&#x9;ManyTransitions&#xA;&#x9;&quot;}&quot;;&#xA;&#x9;InitialModifier -> initial:&quot;initial&quot;;&#xA;&#x9;InitialModifier -> ;&#xA;&#x9;&#xA;&#x9;ManyTransitions -> ;&#xA;&#x9;ManyTransitions -> outgoing : list Transition ManyTransitions;&#xA;&#xA;&#x9;Transition -> InternalTransition;&#xA;&#x9;Transition -> ExternalTransition;&#xA;&#x9;&#xA;&#x9;InternalTransition -> internal:&quot;internal&quot; Trigger;&#xA;&#x9;ExternalTransition -> Trigger &quot;->&quot; TargetState;&#xA;&#x9;&#xA;&#x9;Trigger -> &quot;when&quot; condition:Expression Effects;&#xA;&#x9;Trigger -> &quot;signal&quot; messageVariable:Variable Effects;&#xA;&#x9;Trigger -> &quot;after&quot; timeDuration:Expression Effects;&#xA;&#x9;Effects -> ;&#xA;&#x9;Effects -> &quot;do&quot; effects : SimpleStatement;&#xA;&#x9;&#x9;&#xA;&#x9;TargetState -> target:$$State;&#xA;&#x9;TargetState -> stop:&quot;stop&quot;;&#xA;}" startSymbol="//@module/@extensions.0/@syntaxDefinition/@symbols.0">
        <symbols name="StateMachine" concreteSyntax="StateMachine -> &quot;state&quot; &quot;machine&quot; &quot;{&quot; ManyStates &quot;}&quot;;">
          <possibleSyntax xsi:type="dbl:SymbolSequence">
            <sequence xsi:type="dbl:PlainSymbolReference">
              <ownedClassifier xsi:type="dbl:Keyword" concreteSyntax="&quot;state&quot;" keyword="state"/>
            </sequence>
            <sequence xsi:type="dbl:PlainSymbolReference">
              <ownedClassifier xsi:type="dbl:Keyword" concreteSyntax="&quot;machine&quot;" keyword="machine"/>
            </sequence>
            <sequence xsi:type="dbl:PlainSymbolReference">
              <ownedClassifier xsi:type="dbl:Keyword" concreteSyntax="&quot;{&quot;" keyword="{"/>
            </sequence>
            <sequence xsi:type="dbl:PlainSymbolReference" referencedClassifier="//@module/@extensions.0/@syntaxDefinition/@symbols.2"/>
            <sequence xsi:type="dbl:PlainSymbolReference">
              <ownedClassifier xsi:type="dbl:Keyword" concreteSyntax="&quot;}&quot;" keyword="}"/>
            </sequence>
          </possibleSyntax>
        </symbols>
        <symbols name="ManyStates" concreteSyntax="ManyStates -> ;">
          <possibleSyntax xsi:type="dbl:SymbolSequence"/>
        </symbols>
        <symbols name="ManyStates" concreteSyntax="ManyStates -> states : list State ManyStates;">
          <possibleSyntax xsi:type="dbl:SymbolSequence">
            <sequence xsi:type="dbl:StructuralSymbolReference" name="states" referencedClassifier="//@module/@extensions.0/@syntaxDefinition/@symbols.3" list="true"/>
            <sequence xsi:type="dbl:PlainSymbolReference" referencedClassifier="//@module/@extensions.0/@syntaxDefinition/@symbols.2"/>
          </possibleSyntax>
        </symbols>
        <symbols name="State" concreteSyntax="State -> InitialModifier &quot;state&quot; name:ID &quot;{&quot;&#xA;&#x9;&#x9;ManyTransitions&#xA;&#x9;&quot;}&quot;;">
          <possibleSyntax xsi:type="dbl:SymbolSequence">
            <sequence xsi:type="dbl:PlainSymbolReference" referencedClassifier="//@module/@extensions.0/@syntaxDefinition/@symbols.5"/>
            <sequence xsi:type="dbl:PlainSymbolReference">
              <ownedClassifier xsi:type="dbl:Keyword" concreteSyntax="&quot;state&quot;" keyword="state"/>
            </sequence>
            <sequence xsi:type="dbl:StructuralSymbolReference" name="name">
              <ownedClassifier xsi:type="dbl:IdSymbol" concreteSyntax="ID"/>
            </sequence>
            <sequence xsi:type="dbl:PlainSymbolReference">
              <ownedClassifier xsi:type="dbl:Keyword" concreteSyntax="&quot;{&quot;" keyword="{"/>
            </sequence>
            <sequence xsi:type="dbl:PlainSymbolReference" referencedClassifier="//@module/@extensions.0/@syntaxDefinition/@symbols.7"/>
            <sequence xsi:type="dbl:PlainSymbolReference">
              <ownedClassifier xsi:type="dbl:Keyword" concreteSyntax="&quot;}&quot;" keyword="}"/>
            </sequence>
          </possibleSyntax>
        </symbols>
        <symbols name="InitialModifier" concreteSyntax="InitialModifier -> initial:&quot;initial&quot;;">
          <possibleSyntax xsi:type="dbl:SymbolSequence">
            <sequence xsi:type="dbl:StructuralSymbolReference" name="initial">
              <ownedClassifier xsi:type="dbl:Keyword" concreteSyntax="&quot;initial&quot;" keyword="initial"/>
            </sequence>
          </possibleSyntax>
        </symbols>
        <symbols name="InitialModifier" concreteSyntax="InitialModifier -> ;">
          <possibleSyntax xsi:type="dbl:SymbolSequence"/>
        </symbols>
        <symbols name="ManyTransitions" concreteSyntax="ManyTransitions -> ;">
          <possibleSyntax xsi:type="dbl:SymbolSequence"/>
        </symbols>
        <symbols name="ManyTransitions" concreteSyntax="ManyTransitions -> outgoing : list Transition ManyTransitions;">
          <possibleSyntax xsi:type="dbl:SymbolSequence">
            <sequence xsi:type="dbl:StructuralSymbolReference" name="outgoing" referencedClassifier="//@module/@extensions.0/@syntaxDefinition/@symbols.9" list="true"/>
            <sequence xsi:type="dbl:PlainSymbolReference" referencedClassifier="//@module/@extensions.0/@syntaxDefinition/@symbols.7"/>
          </possibleSyntax>
        </symbols>
        <symbols name="Transition" concreteSyntax="Transition -> InternalTransition;">
          <possibleSyntax xsi:type="dbl:SymbolSequence">
            <sequence xsi:type="dbl:PlainSymbolReference" referencedClassifier="//@module/@extensions.0/@syntaxDefinition/@symbols.10"/>
          </possibleSyntax>
        </symbols>
        <symbols name="Transition" concreteSyntax="Transition -> ExternalTransition;">
          <possibleSyntax xsi:type="dbl:SymbolSequence">
            <sequence xsi:type="dbl:PlainSymbolReference" referencedClassifier="//@module/@extensions.0/@syntaxDefinition/@symbols.11"/>
          </possibleSyntax>
        </symbols>
        <symbols name="InternalTransition" concreteSyntax="InternalTransition -> internal:&quot;internal&quot; Trigger;">
          <possibleSyntax xsi:type="dbl:SymbolSequence">
            <sequence xsi:type="dbl:StructuralSymbolReference" name="internal">
              <ownedClassifier xsi:type="dbl:Keyword" concreteSyntax="&quot;internal&quot;" keyword="internal"/>
            </sequence>
            <sequence xsi:type="dbl:PlainSymbolReference" referencedClassifier="//@module/@extensions.0/@syntaxDefinition/@symbols.12"/>
          </possibleSyntax>
        </symbols>
        <symbols name="ExternalTransition" concreteSyntax="ExternalTransition -> Trigger &quot;->&quot; TargetState;">
          <possibleSyntax xsi:type="dbl:SymbolSequence">
            <sequence xsi:type="dbl:PlainSymbolReference" referencedClassifier="//@module/@extensions.0/@syntaxDefinition/@symbols.12"/>
            <sequence xsi:type="dbl:PlainSymbolReference">
              <ownedClassifier xsi:type="dbl:Keyword" concreteSyntax="&quot;->&quot;" keyword="->"/>
            </sequence>
            <sequence xsi:type="dbl:PlainSymbolReference" referencedClassifier="//@module/@extensions.0/@syntaxDefinition/@symbols.18"/>
          </possibleSyntax>
        </symbols>
        <symbols name="Trigger" concreteSyntax="Trigger -> &quot;when&quot; condition:Expression Effects;">
          <possibleSyntax xsi:type="dbl:SymbolSequence">
            <sequence xsi:type="dbl:PlainSymbolReference">
              <ownedClassifier xsi:type="dbl:Keyword" concreteSyntax="&quot;when&quot;" keyword="when"/>
            </sequence>
            <sequence xsi:type="dbl:StructuralSymbolReference" name="condition">
              <referencedClassifier href="../dbl.xmi#//@module/@classifiers.58"/>
            </sequence>
            <sequence xsi:type="dbl:PlainSymbolReference" referencedClassifier="//@module/@extensions.0/@syntaxDefinition/@symbols.16"/>
          </possibleSyntax>
        </symbols>
        <symbols name="Trigger" concreteSyntax="Trigger -> &quot;signal&quot; messageVariable:Variable Effects;">
          <possibleSyntax xsi:type="dbl:SymbolSequence">
            <sequence xsi:type="dbl:PlainSymbolReference">
              <ownedClassifier xsi:type="dbl:Keyword" concreteSyntax="&quot;signal&quot;" keyword="signal"/>
            </sequence>
            <sequence xsi:type="dbl:StructuralSymbolReference" name="messageVariable">
              <referencedClassifier href="../dbl.xmi#//@module/@classifiers.31"/>
            </sequence>
            <sequence xsi:type="dbl:PlainSymbolReference" referencedClassifier="//@module/@extensions.0/@syntaxDefinition/@symbols.16"/>
          </possibleSyntax>
        </symbols>
        <symbols name="Trigger" concreteSyntax="Trigger -> &quot;after&quot; timeDuration:Expression Effects;">
          <possibleSyntax xsi:type="dbl:SymbolSequence">
            <sequence xsi:type="dbl:PlainSymbolReference">
              <ownedClassifier xsi:type="dbl:Keyword" concreteSyntax="&quot;after&quot;" keyword="after"/>
            </sequence>
            <sequence xsi:type="dbl:StructuralSymbolReference" name="timeDuration">
              <referencedClassifier href="../dbl.xmi#//@module/@classifiers.58"/>
            </sequence>
            <sequence xsi:type="dbl:PlainSymbolReference" referencedClassifier="//@module/@extensions.0/@syntaxDefinition/@symbols.16"/>
          </possibleSyntax>
        </symbols>
        <symbols name="Effects" concreteSyntax="Effects -> ;">
          <possibleSyntax xsi:type="dbl:SymbolSequence"/>
        </symbols>
        <symbols name="Effects" concreteSyntax="Effects -> &quot;do&quot; effects : SimpleStatement;">
          <possibleSyntax xsi:type="dbl:SymbolSequence">
            <sequence xsi:type="dbl:PlainSymbolReference">
              <ownedClassifier xsi:type="dbl:Keyword" concreteSyntax="&quot;do&quot;" keyword="do"/>
            </sequence>
            <sequence xsi:type="dbl:StructuralSymbolReference" name="effects">
              <referencedClassifier href="../dbl.xmi#//@module/@classifiers.37"/>
            </sequence>
          </possibleSyntax>
        </symbols>
        <symbols name="TargetState" concreteSyntax="TargetState -> target:$$State;">
          <possibleSyntax xsi:type="dbl:SymbolSequence">
            <sequence xsi:type="dbl:StructuralSymbolReference" name="target" referencedClassifier="//@module/@extensions.0/@syntaxDefinition/@symbols.3" globalScopedReference="true"/>
          </possibleSyntax>
        </symbols>
        <symbols name="TargetState" concreteSyntax="TargetState -> stop:&quot;stop&quot;;">
          <possibleSyntax xsi:type="dbl:SymbolSequence">
            <sequence xsi:type="dbl:StructuralSymbolReference" name="stop">
              <ownedClassifier xsi:type="dbl:Keyword" concreteSyntax="&quot;stop&quot;" keyword="stop"/>
            </sequence>
          </possibleSyntax>
        </symbols>
      </syntaxDefinition>
    </extensions>
  </module>
</dbl:Model>
