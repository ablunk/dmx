<?xml version="1.0" encoding="ASCII"?>
<dbl:Model xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dbl="http://www.informatik.hu-berlin.de/sam/dbl">
  <imports file="ssm-language-signaldefinition">
    <model href="ssm-language-signaldefinition.xmi#/"/>
  </imports>
  <imports file="ssm-language-statemachine-syntax">
    <model href="ssm-language-statemachine-syntax.xmi#/"/>
  </imports>
  <imports file="ssm-language-statemachine-semantics">
    <model href="ssm-language-statemachine-semantics.xmi#/"/>
  </imports>
  <imports file="../stdlib">
    <model href="../stdlib.xmi#/"/>
  </imports>
  <module name="ssmtest">
    <classifiers xsi:type="dbl:SignalDefinition_SignalDefinition_extension" name="Train" concreteSyntax="signal Train(int number);" instanceOfExtensionDefinition="true">
      <attributes name="number" concreteSyntax="int number">
        <primitiveType xsi:type="dbl:IntType"/>
      </attributes>
    </classifiers>
    <classifiers xsi:type="dbl:ActiveClass" name="X" concreteSyntax="active class X {&#xA;&#x9;&#x9;state machine {&#xA;&#x9;&#x9;&#x9;initial state s1 {&#xA;&#x9;&#x9;&#x9;&#x9;signal Train t do {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;SystemOut.println(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;received train &quot;);&#xA;&#x9;&#x9;&#x9;&#x9;} -> s1&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} &#xA;&#x9;}">
      <contentExtensions xsi:type="dbl:StateMachine_StateMachine_extension" concreteSyntax="state machine {&#xA;&#x9;&#x9;&#x9;initial state s1 {&#xA;&#x9;&#x9;&#x9;&#x9;signal Train t do {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;SystemOut.println(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;received train &quot;);&#xA;&#x9;&#x9;&#x9;&#x9;} -> s1&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}" instanceOfExtensionDefinition="true">
        <states name="s1" concreteSyntax="initial state s1 {&#xA;&#x9;&#x9;&#x9;&#x9;signal Train t do {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;SystemOut.println(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;received train &quot;);&#xA;&#x9;&#x9;&#x9;&#x9;} -> s1&#xA;&#x9;&#x9;&#x9;}" initial="true">
          <outgoing xsi:type="dbl:StateMachine_ExternalTransition_extension" concreteSyntax="signal Train t do {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;SystemOut.println(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;received train &quot;);&#xA;&#x9;&#x9;&#x9;&#x9;} -> s1" target="//@module/@classifiers.1/@contentExtensions.0/@states.0">
            <effects xsi:type="dbl:LocalScopeStatement" concreteSyntax="{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;SystemOut.println(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;received train &quot;);&#xA;&#x9;&#x9;&#x9;&#x9;}">
              <statements xsi:type="dbl:FunctionCall" concreteSyntax="SystemOut.println(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;received train &quot;)">
                <callIdExpr concreteSyntax="SystemOut.println(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;received train &quot;)">
                  <parentIdExpr concreteSyntax="SystemOut">
                    <referencedElement href="../stdlib.xmi#//@module/@classifiers.3"/>
                  </parentIdExpr>
                  <referencedElement href="../stdlib.xmi#//@module/@classifiers.3/@methods.1"/>
                  <callPart>
                    <callArguments xsi:type="dbl:StringLiteral" concreteSyntax="&quot;received train &quot;" value="received train "/>
                  </callPart>
                </callIdExpr>
              </statements>
            </effects>
            <messageVariable name="t" concreteSyntax="Train t">
              <classifierType concreteSyntax="Train" referencedElement="//@module/@classifiers.0"/>
            </messageVariable>
          </outgoing>
        </states>
      </contentExtensions>
    </classifiers>
    <functions name="main">
      <primitiveType xsi:type="dbl:VoidType"/>
      <statements xsi:type="dbl:Variable" name="train" concreteSyntax="Train train = new Train(2)">
        <classifierType concreteSyntax="Train" referencedElement="//@module/@classifiers.0"/>
        <initialValue xsi:type="dbl:CreateObject" concreteSyntax="new Train(2)">
          <classifierType concreteSyntax="Train(2)" referencedElement="//@module/@classifiers.0">
            <callPart>
              <callArguments xsi:type="dbl:IntLiteral" concreteSyntax="2" value="2"/>
            </callPart>
          </classifierType>
        </initialValue>
      </statements>
      <statements xsi:type="dbl:FunctionCall" concreteSyntax="SystemOut.println(&quot;created train &quot; + train.number)">
        <callIdExpr concreteSyntax="SystemOut.println(&quot;created train &quot; + train.number)">
          <parentIdExpr concreteSyntax="SystemOut">
            <referencedElement href="../stdlib.xmi#//@module/@classifiers.3"/>
          </parentIdExpr>
          <referencedElement href="../stdlib.xmi#//@module/@classifiers.3/@methods.1"/>
          <callPart>
            <callArguments xsi:type="dbl:Plus" concreteSyntax="&quot;created train &quot; + train.number">
              <op1 xsi:type="dbl:StringLiteral" concreteSyntax="&quot;created train &quot;" value="created train "/>
              <op2 xsi:type="dbl:IdExpr" concreteSyntax="train.number" referencedElement="//@module/@classifiers.0/@attributes.0">
                <parentIdExpr concreteSyntax="train" referencedElement="//@module/@functions.0/@statements.0"/>
              </op2>
            </callArguments>
          </callPart>
        </callIdExpr>
      </statements>
      <statements xsi:type="dbl:Variable" name="x" concreteSyntax="X x = new X()">
        <classifierType concreteSyntax="X" referencedElement="//@module/@classifiers.1"/>
        <initialValue xsi:type="dbl:CreateObject" concreteSyntax="new X()">
          <classifierType concreteSyntax="X()" referencedElement="//@module/@classifiers.1">
            <callPart/>
          </classifierType>
        </initialValue>
      </statements>
      <statements xsi:type="dbl:ActivateObject" concreteSyntax="activate x">
        <objectAccess xsi:type="dbl:IdExpr" concreteSyntax="x" referencedElement="//@module/@functions.0/@statements.2"/>
      </statements>
      <statements xsi:type="dbl:Advance" concreteSyntax="advance 2">
        <time xsi:type="dbl:IntLiteral" concreteSyntax="2" value="2"/>
      </statements>
    </functions>
  </module>
</dbl:Model>
