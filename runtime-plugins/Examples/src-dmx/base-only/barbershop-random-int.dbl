module BarberShop {

	interface Object {}
	
	class UniformInt(string name, int min, int max) {
		bindings {
			"desmoj" -> "hub.sam.dmx.javasim.desmoj.dist.IntDistUniform",
			"slx" -> "IntDistUniform",
			"odemx" -> "odemx::random::dmx::Uniform",
			"jist" -> "hub.sam.dmx.javasim.generic.dist.IntDistUniform"
		}
		int sample() {}
	}
	
	int stopTime = 48000*1000;
	UniformInt arrivalTime = new UniformInt("arrival1", 12*1000, 24*1000);
	UniformInt serviceTime = new UniformInt("arrival1", 12*1000, 18*1000);
	boolean debug = true;

	void main() {
		CustomerArrival arrival = new CustomerArrival;
		activate arrival;
		
		advance stopTime;
	}

	void trace(string msg) {
		if (debug) {
			print time + " - " + active + ": " + msg + "\n";
		}
	}
	
	class Facility {
		boolean busy = false;
		list(Object) waiting;
		
		void seize() {
			if (busy) {
				trace("facility busy. waiting.");
				place active into waiting;
				wait;
				remove active from waiting;
			}
			trace("facility seized.");
			busy = true;
		}
		
		void release() {
			busy = false;
			if (waiting.size > 0) {
				trace("activate waiting process.");
				reactivate waiting.first;
			}
			trace("facility released.");
		}
	}
	
	Facility joe = new Facility;

	active class Customer {		
		actions {
			joe.seize();
			advance serviceTime.sample();
			joe.release();
		}
	}
	
	active class CustomerArrival {
		actions {
			while (time <= stopTime) {
				advance arrivalTime.sample();
				Customer c = new Customer;
				activate c;
				trace("new customer created.");
			}
		}
	}

}