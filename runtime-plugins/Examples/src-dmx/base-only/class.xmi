<?xml version="1.0" encoding="ASCII"?>
<dbl:Model xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dbl="http://www.informatik.hu-berlin.de/sam/dbl">
  <imports file="lib">
    <model href="lib.xmi#/"/>
  </imports>
  <modules name="Container2">
    <classes name="Safari">
      <constructors/>
      <methods name="f">
        <primitiveType xsi:type="dbl:IntType"/>
        <statements xsi:type="dbl:Print">
          <outputs xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classes.0/@methods.0/@parameters.0"/>
        </statements>
        <statements xsi:type="dbl:Assignment">
          <variable>
            <idExpr referencedElement="//@modules.0/@variables.1"/>
          </variable>
          <value xsi:type="dbl:IdExpr">
            <predefinedId xsi:type="dbl:MeLiteral"/>
          </value>
        </statements>
        <statements xsi:type="dbl:FunctionCall">
          <callIdExpr>
            <parentIdExpr referencedElement="//@modules.0/@variables.0"/>
            <referencedElement href="lib.xmi#//@modules.0/@classes.3/@methods.0"/>
            <callPart>
              <callArguments xsi:type="dbl:IdExpr">
                <predefinedId xsi:type="dbl:MeLiteral"/>
              </callArguments>
            </callPart>
          </callIdExpr>
        </statements>
        <statements xsi:type="dbl:FunctionCall">
          <callIdExpr>
            <parentIdExpr referencedElement="//@modules.0/@variables.0"/>
            <referencedElement href="lib.xmi#//@modules.0/@classes.3/@methods.0"/>
            <callPart>
              <callArguments xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@variables.1"/>
            </callPart>
          </callIdExpr>
        </statements>
        <parameters name="par">
          <primitiveType xsi:type="dbl:StringType"/>
        </parameters>
      </methods>
    </classes>
    <variables name="lizz">
      <classifierType>
        <referencedElement href="lib.xmi#//@modules.0/@classes.4"/>
      </classifierType>
      <initialValue xsi:type="dbl:CreateObject">
        <classifierType>
          <referencedElement href="lib.xmi#//@modules.0/@classes.4"/>
        </classifierType>
      </initialValue>
    </variables>
    <variables name="om">
      <classifierType>
        <referencedElement href="lib.xmi#//@modules.0/@classes.0"/>
      </classifierType>
    </variables>
  </modules>
  <modules name="Container">
    <classes name="Zuper">
      <attributes name="beo">
        <classifierType referencedElement="//@modules.1/@classes.1"/>
        <initialValue xsi:type="dbl:CreateObject">
          <classifierType referencedElement="//@modules.1/@classes.1">
            <callPart/>
          </classifierType>
        </initialValue>
      </attributes>
      <attributes name="lup">
        <classifierType referencedElement="//@modules.1/@classes.2"/>
        <initialValue xsi:type="dbl:CreateObject">
          <classifierType referencedElement="//@modules.1/@classes.2">
            <callPart/>
          </classifierType>
        </initialValue>
      </attributes>
      <methods name="f">
        <primitiveType xsi:type="dbl:IntType"/>
      </methods>
    </classes>
    <classes name="Example">
      <constructors>
        <statements xsi:type="dbl:Print">
          <outputs xsi:type="dbl:StringLiteral" value="Example starts here"/>
        </statements>
      </constructors>
      <attributes name="z">
        <classifierType referencedElement="//@modules.1/@classes.0"/>
      </attributes>
      <attributes name="s">
        <classifierType referencedElement="//@modules.0/@classes.0"/>
      </attributes>
      <methods name="procedure">
        <classifierType referencedElement="//@modules.1/@classes.2"/>
        <statements xsi:type="dbl:Return">
          <value xsi:type="dbl:CreateObject">
            <classifierType referencedElement="//@modules.1/@classes.2">
              <callPart/>
            </classifierType>
          </value>
        </statements>
      </methods>
    </classes>
    <classes name="anotherClass">
      <constructors>
        <statements xsi:type="dbl:Print">
          <outputs xsi:type="dbl:StringLiteral" value="anotherClass starts here"/>
        </statements>
      </constructors>
      <attributes name="ef">
        <classifierType referencedElement="//@modules.1/@classes.1"/>
        <initialValue xsi:type="dbl:CreateObject">
          <classifierType referencedElement="//@modules.1/@classes.1"/>
        </initialValue>
      </attributes>
    </classes>
    <functions name="main">
      <primitiveType xsi:type="dbl:IntType"/>
      <statements xsi:type="dbl:Variable" name="ex">
        <classifierType referencedElement="//@modules.1/@classes.2"/>
        <initialValue xsi:type="dbl:CreateObject">
          <classifierType referencedElement="//@modules.1/@classes.2">
            <callPart/>
          </classifierType>
        </initialValue>
      </statements>
      <statements xsi:type="dbl:Variable" name="ex2">
        <classifierType referencedElement="//@modules.1/@classes.2"/>
        <initialValue xsi:type="dbl:IdExpr" referencedElement="//@modules.1/@classes.1/@methods.0">
          <parentIdExpr referencedElement="//@modules.1/@classes.2/@attributes.0">
            <parentIdExpr referencedElement="//@modules.1/@functions.0/@statements.0"/>
          </parentIdExpr>
          <callPart/>
        </initialValue>
      </statements>
      <statements xsi:type="dbl:Variable" name="z">
        <classifierType referencedElement="//@modules.1/@classes.0"/>
        <initialValue xsi:type="dbl:CreateObject">
          <classifierType referencedElement="//@modules.1/@classes.0">
            <callPart/>
          </classifierType>
        </initialValue>
      </statements>
      <statements xsi:type="dbl:Variable" name="s">
        <classifierType referencedElement="//@modules.0/@classes.0"/>
        <initialValue xsi:type="dbl:CreateObject">
          <classifierType referencedElement="//@modules.0/@classes.0">
            <callPart/>
          </classifierType>
        </initialValue>
      </statements>
      <statements xsi:type="dbl:FunctionCall">
        <callIdExpr referencedElement="//@modules.0/@classes.0/@methods.0">
          <parentIdExpr referencedElement="//@modules.1/@functions.0/@statements.3"/>
          <callPart>
            <callArguments xsi:type="dbl:StringLiteral" value=""/>
          </callPart>
        </callIdExpr>
      </statements>
    </functions>
    <variables name="o">
      <classifierType>
        <referencedElement href="lib.xmi#//@modules.0/@classes.0"/>
      </classifierType>
    </variables>
  </modules>
</dbl:Model>
