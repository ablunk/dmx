module BarberShop {

	interface Object {}
	
	int stopTime = 40;
	int halfTime = stopTime / 2;
	
	int a1 = 1;
	int s1 = 2;
	int a2 = 2;
	int s2 = 1;
	
	boolean debug = true;

	void main() {
		CustomerArrival arrival = new CustomerArrival;
		activate arrival;
		
		advance stopTime;
	}

	void trace(string msg) {
		if (debug) {
			print time + " - " + active + ": " + msg + "\n";
		}
	}
	
	class Facility {
		boolean busy = false;
		list(Object) waiting;
		
		void seize() {
			if (busy) {
				trace("facility busy. waiting.");
				place active into waiting;
				wait;
				remove active from waiting;
			}
			trace("facility seized.");
			busy = true;
		}
		
		void release() {
			busy = false;
			if (waiting.size > 0) {
				trace("activate waiting process.");
				reactivate waiting.first;
			}
			trace("facility released.");
		}
	}
	
	Facility joe = new Facility;

	active class Customer {		
		actions {
			joe.seize();
			if (time < halfTime) {
				advance s1;
			}
			else {
				advance s2;
			}
			joe.release();
		}
	}
	
	active class CustomerArrival {
		actions {
			while (time <= stopTime) {
				if (time < halfTime) {
					advance a1;
				}
				else {
					advance a2;
				}
				Customer c = new Customer;
				activate c;
				trace("new customer created.");
			}
		}
	}

}