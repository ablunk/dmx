#import "lib"

module BarberShop {

	int stopTime = 40;
	int halfTime = stopTime / 2;
	
	int a1 = 1;
	int s1 = 2;
	int a2 = 2;
	int s2 = 1;
	
	boolean debug = true;

	void main() {
		CustomerArrival arrival = new CustomerArrival(1,"CustomerArrival");
		activate arrival;
		
		advance stopTime;
	}

	void trace(string msg) {
		if (debug) {
			print time + " - " + active + ": " + msg + "\n";
		}
	}
	
	active class Facility(int prio2, string label2) {
		boolean busy = false;
		List waiting = new ArrayList;
		
		void seize() {
			if (busy) {
				trace("facility busy. waiting.");
				waiting.insert(waiting.begin(),active);
				wait;
			}
			trace("facility seized.");
			busy = true;
		}
		
		void release() {
			busy = false;
			if (waiting.size() > 0) {
				Object nextWaiting = waiting.at(0);
				trace("activate waiting process " + nextWaiting);
				waiting.erase(waiting.begin());
				reactivate nextWaiting;
			}
			trace("facility released.");
		}
	}
	
	Facility joe = new Facility(1,"Facility");

	active class Customer(int prio, string label) {		
		actions {
			joe.seize();
			if (time < halfTime) {
				advance s1;
			}
			else {
				advance s2;
			}
			joe.release();
		}
	}
	
	active class CustomerArrival(int prio3, string label3) {
		actions {
			while (time <= stopTime) {
				if (time < halfTime) {
					advance a1;
				}
				else {
					advance a2;
				}
				Customer c = new Customer(1,"Customer");
				activate c;
				trace("new customer created.");
			}
		}
	}

}