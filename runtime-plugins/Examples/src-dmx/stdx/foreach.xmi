<?xml version="1.0" encoding="ASCII"?>
<dbl:Model xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dbl="http://www.informatik.hu-berlin.de/sam/dbl">
  <imports file="../dbl">
    <model href="../dbl.xmi#/"/>
  </imports>
  <imports file="../stdlib">
    <model href="../stdlib.xmi#/"/>
  </imports>
  <modules name="stdx_foreach">
    <extensionDefinitions name="ForEach" concreteSyntax="extension ForEach extends dbl LocalScopeStatement {&#xA;&#x9;start ForEach;&#xA;&#x9;ForEach -> &quot;foreach&quot; &quot;(&quot; statements:list(Variable) &quot;in&quot; collection:Expression &quot;)&quot; body:LocalScopeStatement;&#xA;}">
      <extendedConcept xsi:type="dbl:Class" href="../dbl.xmi#//@modules.0/@classes.42"/>
      <textualSyntaxDef concreteSyntax=" {&#xA;&#x9;start ForEach;&#xA;&#x9;ForEach -> &quot;foreach&quot; &quot;(&quot; statements:list(Variable) &quot;in&quot; collection:Expression &quot;)&quot; body:LocalScopeStatement;&#xA;}" startRule="//@modules.0/@extensionDefinitions.0/@textualSyntaxDef/@rules.0">
        <rules name="ForEach" concreteSyntax="ForEach -> &quot;foreach&quot; &quot;(&quot; statements:list(Variable) &quot;in&quot; collection:Expression &quot;)&quot; body:LocalScopeStatement;">
          <rhs xsi:type="dbl:SequenceExpr">
            <sequence xsi:type="dbl:TerminalExpr" terminal="foreach"/>
            <sequence xsi:type="dbl:TerminalExpr" terminal="("/>
            <sequence xsi:type="dbl:PropertyBindingExpr" name="statements">
              <propertyType xsi:type="dbl:CompositePropertyType" list="true">
                <type xsi:type="dbl:Class" href="../dbl.xmi#//@modules.0/@classes.23"/>
              </propertyType>
            </sequence>
            <sequence xsi:type="dbl:TerminalExpr" terminal="in"/>
            <sequence xsi:type="dbl:PropertyBindingExpr" name="collection">
              <propertyType xsi:type="dbl:CompositePropertyType">
                <type xsi:type="dbl:Class" href="../dbl.xmi#//@modules.0/@classes.49"/>
              </propertyType>
            </sequence>
            <sequence xsi:type="dbl:TerminalExpr" terminal=")"/>
            <sequence xsi:type="dbl:PropertyBindingExpr" name="body">
              <propertyType xsi:type="dbl:CompositePropertyType">
                <type xsi:type="dbl:Class" href="../dbl.xmi#//@modules.0/@classes.42"/>
              </propertyType>
            </sequence>
          </rhs>
        </rules>
      </textualSyntaxDef>
    </extensionDefinitions>
    <extensionSemanticsDefinitions concreteSyntax="semantics for ForEach {&#x9;&#xA;&#x9;Variable varDef = statements.get(0) as Variable;&#xA;&#x9;&#xA;&#x9;expand &quot;Iterator it = &quot; collection &quot;.iterator();&quot;;&#xA;&#x9;expand &quot;while (it.hasNext()) {&quot;;&#xA;&#x9;expand &quot;&#x9;Object object = it.next();&quot;;&#xA;&#x9;expand &#x9;&#x9;varDef &quot; = object as &quot; varDef.classifierType &quot;;&quot;;&#xA;&#x9;expand&#x9;&#x9;body;&#xA;&#x9;expand &quot;}&quot;;&#xA;}" syntaxDefinition="//@modules.0/@extensionDefinitions.0">
      <statements xsi:type="dbl:Variable" name="varDef" concreteSyntax="Variable varDef = statements.get(0) as Variable">
        <classifierType concreteSyntax="Variable">
          <referencedElement href="../dbl.xmi#//@modules.0/@classes.23"/>
        </classifierType>
        <initialValue xsi:type="dbl:Cast" concreteSyntax="statements.get(0) as Variable">
          <classifierType concreteSyntax="Variable">
            <referencedElement href="../dbl.xmi#//@modules.0/@classes.23"/>
          </classifierType>
          <op xsi:type="dbl:IdExpr" concreteSyntax="statements.get(0)">
            <parentIdExpr concreteSyntax="statements" referencedElement="//@modules.0/@extensionDefinitions.0/@textualSyntaxDef/@rules.0/@rhs/@sequence.2"/>
            <referencedElement href="../stdlib.xmi#//@modules.0/@classes.3/@methods.5"/>
            <callPart>
              <callArguments xsi:type="dbl:IntLiteral" concreteSyntax="0"/>
            </callPart>
          </op>
        </initialValue>
      </statements>
      <statements xsi:type="dbl:ExpansionStatement" concreteSyntax="expand &quot;Iterator it = &quot; collection &quot;.iterator();&quot;">
        <parts xsi:type="dbl:ExpandTextPart" text="Iterator it = "/>
        <parts xsi:type="dbl:ExpandVariablePart">
          <expr xsi:type="dbl:IdExpr" concreteSyntax="collection" referencedElement="//@modules.0/@extensionDefinitions.0/@textualSyntaxDef/@rules.0/@rhs/@sequence.4"/>
        </parts>
        <parts xsi:type="dbl:ExpandTextPart" text=".iterator();"/>
      </statements>
      <statements xsi:type="dbl:ExpansionStatement" concreteSyntax="expand &quot;while (it.hasNext()) {&quot;">
        <parts xsi:type="dbl:ExpandTextPart" text="while (it.hasNext()) {"/>
      </statements>
      <statements xsi:type="dbl:ExpansionStatement" concreteSyntax="expand &quot;&#x9;Object object = it.next();&quot;">
        <parts xsi:type="dbl:ExpandTextPart" text="&#x9;Object object = it.next();"/>
      </statements>
      <statements xsi:type="dbl:ExpansionStatement" concreteSyntax="expand &#x9;&#x9;varDef &quot; = object as &quot; varDef.classifierType &quot;;&quot;">
        <parts xsi:type="dbl:ExpandVariablePart">
          <expr xsi:type="dbl:IdExpr" concreteSyntax="varDef" referencedElement="//@modules.0/@extensionSemanticsDefinitions.0/@statements.0"/>
        </parts>
        <parts xsi:type="dbl:ExpandTextPart" text=" = object as "/>
        <parts xsi:type="dbl:ExpandVariablePart">
          <expr xsi:type="dbl:IdExpr" concreteSyntax="varDef.classifierType">
            <parentIdExpr concreteSyntax="varDef" referencedElement="//@modules.0/@extensionSemanticsDefinitions.0/@statements.0"/>
            <referencedElement href="../dbl.xmi#//@modules.0/@classes.9/@attributes.2"/>
          </expr>
        </parts>
        <parts xsi:type="dbl:ExpandTextPart" text=";"/>
      </statements>
      <statements xsi:type="dbl:ExpansionStatement" concreteSyntax="expand&#x9;&#x9;body">
        <parts xsi:type="dbl:ExpandVariablePart">
          <expr xsi:type="dbl:IdExpr" concreteSyntax="body" referencedElement="//@modules.0/@extensionDefinitions.0/@textualSyntaxDef/@rules.0/@rhs/@sequence.6"/>
        </parts>
      </statements>
      <statements xsi:type="dbl:ExpansionStatement" concreteSyntax="expand &quot;}&quot;">
        <parts xsi:type="dbl:ExpandTextPart" text="}"/>
      </statements>
    </extensionSemanticsDefinitions>
  </modules>
</dbl:Model>
