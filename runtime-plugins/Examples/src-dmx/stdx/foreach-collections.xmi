<?xml version="1.0" encoding="ASCII"?>
<dbl:Model xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dbl="http://www.informatik.hu-berlin.de/sam/dbl">
  <imports file="../dbl">
    <model href="../dbl.xmi#/"/>
  </imports>
  <imports file="../stdlib">
    <model href="../stdlib.xmi#/"/>
  </imports>
  <module name="stdx_foreach_collections">
    <extensions name="ForEach" concreteSyntax="extension ForEach extends dbl LocalScopeStatement {&#xA;&#x9;start ForEach;&#xA;&#x9;ForEach -> &quot;foreach&quot; &quot;(&quot; statements : list Variable &quot;in&quot; collection : Expression &quot;)&quot;&#xA;&#x9;&#x9;body : LocalScopeStatement;&#xA;}">
      <extensionPoint href="../dbl.xmi#//@module/@classifiers.51"/>
      <syntaxDefinition concreteSyntax="{&#xA;&#x9;start ForEach;&#xA;&#x9;ForEach -> &quot;foreach&quot; &quot;(&quot; statements : list Variable &quot;in&quot; collection : Expression &quot;)&quot;&#xA;&#x9;&#x9;body : LocalScopeStatement;&#xA;}" startSymbol="//@module/@extensions.0/@syntaxDefinition/@symbols.0">
        <symbols name="ForEach" concreteSyntax="ForEach -> &quot;foreach&quot; &quot;(&quot; statements : list Variable &quot;in&quot; collection : Expression &quot;)&quot;&#xA;&#x9;&#x9;body : LocalScopeStatement;">
          <possibleSyntax xsi:type="dbl:SymbolSequence">
            <sequence xsi:type="dbl:PlainSymbolReference">
              <ownedClassifier xsi:type="dbl:Keyword" concreteSyntax="&quot;foreach&quot;" keyword="foreach"/>
            </sequence>
            <sequence xsi:type="dbl:PlainSymbolReference">
              <ownedClassifier xsi:type="dbl:Keyword" concreteSyntax="&quot;(&quot;" keyword="("/>
            </sequence>
            <sequence xsi:type="dbl:StructuralSymbolReference" name="statements" list="true">
              <referencedClassifier href="../dbl.xmi#//@module/@classifiers.31"/>
            </sequence>
            <sequence xsi:type="dbl:PlainSymbolReference">
              <ownedClassifier xsi:type="dbl:Keyword" concreteSyntax="&quot;in&quot;" keyword="in"/>
            </sequence>
            <sequence xsi:type="dbl:StructuralSymbolReference" name="collection">
              <referencedClassifier href="../dbl.xmi#//@module/@classifiers.58"/>
            </sequence>
            <sequence xsi:type="dbl:PlainSymbolReference">
              <ownedClassifier xsi:type="dbl:Keyword" concreteSyntax="&quot;)&quot;" keyword=")"/>
            </sequence>
            <sequence xsi:type="dbl:StructuralSymbolReference" name="body">
              <referencedClassifier href="../dbl.xmi#//@module/@classifiers.51"/>
            </sequence>
          </possibleSyntax>
        </symbols>
      </syntaxDefinition>
    </extensions>
    <extensionSemantics concreteSyntax="semantics for ForEach {&#x9;&#xA;&#x9;Variable itemVariable = statements.get(0) as Variable;&#xA;&#xA;&#x9;ID it;&#xA;&#x9;ID item; &#xA;&#x9;expand &quot;Iterator &quot; it &quot; = &quot; collection &quot;.iterator();&quot;;&#xA;&#x9;expand &quot;while (&quot; it &quot;.hasNext()) {&quot;;&#xA;&#x9;expand &quot;&#x9;Object &quot; item &quot; = &quot; it &quot;.next();&quot;;&#xA;&#x9;expand &#x9;&#x9;itemVariable &quot; = &quot; item &quot; as &quot; itemVariable.getClassifierType() &quot;;&quot;;&#xA;&#x9;expand&#x9;&#x9;body;&#xA;&#x9;expand &quot;}&quot;;&#xA;}" syntaxDefinition="//@module/@extensions.0">
      <statements xsi:type="dbl:Variable" name="itemVariable" concreteSyntax="Variable itemVariable = statements.get(0) as Variable">
        <classifierType concreteSyntax="Variable">
          <referencedElement href="../dbl.xmi#//@module/@classifiers.31"/>
        </classifierType>
        <initialValue xsi:type="dbl:Cast" concreteSyntax="statements.get(0) as Variable">
          <classifierType concreteSyntax="Variable">
            <referencedElement href="../dbl.xmi#//@module/@classifiers.31"/>
          </classifierType>
          <op xsi:type="dbl:IdExpr" concreteSyntax="statements.get(0)">
            <parentIdExpr concreteSyntax="statements" referencedElement="//@module/@extensions.0/@syntaxDefinition/@symbols.0/@possibleSyntax/@sequence.2"/>
            <referencedElement href="../stdlib.xmi#//@module/@classifiers.5/@methods.5"/>
            <callPart>
              <callArguments xsi:type="dbl:IntLiteral" concreteSyntax="0"/>
            </callPart>
          </op>
        </initialValue>
      </statements>
      <statements xsi:type="dbl:CreateIdStatement" name="it" concreteSyntax="ID it"/>
      <statements xsi:type="dbl:CreateIdStatement" name="item" concreteSyntax="ID item"/>
      <statements xsi:type="dbl:ExpansionStatement" concreteSyntax="expand &quot;Iterator &quot; it &quot; = &quot; collection &quot;.iterator();&quot;">
        <parts xsi:type="dbl:ExpandTextPart" text="Iterator "/>
        <parts xsi:type="dbl:ExpandVariablePart">
          <expr xsi:type="dbl:IdExpr" concreteSyntax="it" referencedElement="//@module/@extensionSemantics.0/@statements.1"/>
        </parts>
        <parts xsi:type="dbl:ExpandTextPart" text=" = "/>
        <parts xsi:type="dbl:ExpandVariablePart">
          <expr xsi:type="dbl:IdExpr" concreteSyntax="collection" referencedElement="//@module/@extensions.0/@syntaxDefinition/@symbols.0/@possibleSyntax/@sequence.4"/>
        </parts>
        <parts xsi:type="dbl:ExpandTextPart" text=".iterator();"/>
      </statements>
      <statements xsi:type="dbl:ExpansionStatement" concreteSyntax="expand &quot;while (&quot; it &quot;.hasNext()) {&quot;">
        <parts xsi:type="dbl:ExpandTextPart" text="while ("/>
        <parts xsi:type="dbl:ExpandVariablePart">
          <expr xsi:type="dbl:IdExpr" concreteSyntax="it" referencedElement="//@module/@extensionSemantics.0/@statements.1"/>
        </parts>
        <parts xsi:type="dbl:ExpandTextPart" text=".hasNext()) {"/>
      </statements>
      <statements xsi:type="dbl:ExpansionStatement" concreteSyntax="expand &quot;&#x9;Object &quot; item &quot; = &quot; it &quot;.next();&quot;">
        <parts xsi:type="dbl:ExpandTextPart" text="&#x9;Object "/>
        <parts xsi:type="dbl:ExpandVariablePart">
          <expr xsi:type="dbl:IdExpr" concreteSyntax="item" referencedElement="//@module/@extensionSemantics.0/@statements.2"/>
        </parts>
        <parts xsi:type="dbl:ExpandTextPart" text=" = "/>
        <parts xsi:type="dbl:ExpandVariablePart">
          <expr xsi:type="dbl:IdExpr" concreteSyntax="it" referencedElement="//@module/@extensionSemantics.0/@statements.1"/>
        </parts>
        <parts xsi:type="dbl:ExpandTextPart" text=".next();"/>
      </statements>
      <statements xsi:type="dbl:ExpansionStatement" concreteSyntax="expand &#x9;&#x9;itemVariable &quot; = &quot; item &quot; as &quot; itemVariable.getClassifierType() &quot;;&quot;">
        <parts xsi:type="dbl:ExpandVariablePart">
          <expr xsi:type="dbl:IdExpr" concreteSyntax="itemVariable" referencedElement="//@module/@extensionSemantics.0/@statements.0"/>
        </parts>
        <parts xsi:type="dbl:ExpandTextPart" text=" = "/>
        <parts xsi:type="dbl:ExpandVariablePart">
          <expr xsi:type="dbl:IdExpr" concreteSyntax="item" referencedElement="//@module/@extensionSemantics.0/@statements.2"/>
        </parts>
        <parts xsi:type="dbl:ExpandTextPart" text=" as "/>
        <parts xsi:type="dbl:ExpandVariablePart">
          <expr xsi:type="dbl:IdExpr" concreteSyntax="itemVariable.getClassifierType()">
            <parentIdExpr concreteSyntax="itemVariable" referencedElement="//@module/@extensionSemantics.0/@statements.0"/>
            <referencedElement href="../dbl.xmi#//@module/@classifiers.13/@methods.2"/>
            <callPart/>
          </expr>
        </parts>
        <parts xsi:type="dbl:ExpandTextPart" text=";"/>
      </statements>
      <statements xsi:type="dbl:ExpansionStatement" concreteSyntax="expand&#x9;&#x9;body">
        <parts xsi:type="dbl:ExpandVariablePart">
          <expr xsi:type="dbl:IdExpr" concreteSyntax="body" referencedElement="//@module/@extensions.0/@syntaxDefinition/@symbols.0/@possibleSyntax/@sequence.6"/>
        </parts>
      </statements>
      <statements xsi:type="dbl:ExpansionStatement" concreteSyntax="expand &quot;}&quot;">
        <parts xsi:type="dbl:ExpandTextPart" text="}"/>
      </statements>
    </extensionSemantics>
  </module>
</dbl:Model>
