<?xml version="1.0" encoding="ASCII"?>
<dbl:Model xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dbl="http://www.informatik.hu-berlin.de/sam/dbl">
  <imports file="empirical">
    <model href="empirical.xmi#/"/>
  </imports>
  <modules name="NativeTest">
    <classifiers xsi:type="dbl:Clazz" name="EmpiricalInt">
      <bindings targetLanguage="desmoj" targetType="hub.sam.dmx.javasim.desmoj.dist.IntDistEmpirical"/>
      <methods name="sample" concreteSyntax="int sample() {}">
        <primitiveType xsi:type="dbl:IntType"/>
      </methods>
      <methods name="addEntry" concreteSyntax="void addEntry(int value, double cumFrequency) {}">
        <primitiveType xsi:type="dbl:VoidType"/>
        <parameters name="value">
          <primitiveType xsi:type="dbl:IntType"/>
        </parameters>
        <parameters name="cumFrequency">
          <primitiveType xsi:type="dbl:DoubleType"/>
        </parameters>
      </methods>
      <constructor>
        <parameters name="name">
          <primitiveType xsi:type="dbl:StringType"/>
        </parameters>
      </constructor>
    </classifiers>
    <procedures name="main" concreteSyntax="void main() {&#xA;&#x9;&#x9;discreteEmpirical myde {&#xA;&#x9;&#x9;&#x9;10  : 450,&#xA;&#x9;&#x9;&#x9;29  : 750,&#xA;&#x9;&#x9;&#x9;61  : 1000,&#xA;&#x9;&#x9;&#x9;85  : 500,&#xA;&#x9;&#x9;&#x9;100 : 3000&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;int i=0;&#xA;&#x9;&#x9;while (i &lt; 8) {&#xA;&#x9;&#x9;&#x9;print sample of myde + &quot;\n&quot;;&#xA;&#x9;&#x9;&#x9;i=i+1;&#xA;&#x9;&#x9;}&#xA;&#x9;}">
      <primitiveType xsi:type="dbl:VoidType"/>
      <statements xsi:type="dbl:DiscreteEmpirical" name="myde" concreteSyntax="discreteEmpirical myde {&#xA;&#x9;&#x9;&#x9;10  : 450,&#xA;&#x9;&#x9;&#x9;29  : 750,&#xA;&#x9;&#x9;&#x9;61  : 1000,&#xA;&#x9;&#x9;&#x9;85  : 500,&#xA;&#x9;&#x9;&#x9;100 : 3000&#xA;&#x9;&#x9;}">
        <entries concreteSyntax="10  : 450" cumPercent="10" value="450"/>
        <entries concreteSyntax="29  : 750" cumPercent="29" value="750"/>
        <entries concreteSyntax="61  : 1000" cumPercent="61" value="1000"/>
        <entries concreteSyntax="85  : 500" cumPercent="85" value="500"/>
        <entries concreteSyntax="100 : 3000" cumPercent="100" value="3000"/>
      </statements>
      <statements xsi:type="dbl:Variable" name="i" concreteSyntax="int i=0">
        <primitiveType xsi:type="dbl:IntType"/>
        <initialValue xsi:type="dbl:IntLiteral" concreteSyntax="0"/>
      </statements>
      <statements xsi:type="dbl:WhileStatement" concreteSyntax="while (i &lt; 8) {&#xA;&#x9;&#x9;&#x9;print sample of myde + &quot;\n&quot;;&#xA;&#x9;&#x9;&#x9;i=i+1;&#xA;&#x9;&#x9;}">
        <condition xsi:type="dbl:Less" concreteSyntax="i &lt; 8">
          <op1 xsi:type="dbl:IdExpr" concreteSyntax="i" referencedElement="//@modules.0/@procedures.0/@statements.1"/>
          <op2 xsi:type="dbl:IntLiteral" concreteSyntax="8" value="8"/>
        </condition>
        <whileBlock concreteSyntax="{&#xA;&#x9;&#x9;&#x9;print sample of myde + &quot;\n&quot;;&#xA;&#x9;&#x9;&#x9;i=i+1;&#xA;&#x9;&#x9;}">
          <statements xsi:type="dbl:Print" concreteSyntax="print sample of myde + &quot;\n&quot;">
            <outputs xsi:type="dbl:Plus" concreteSyntax="sample of myde + &quot;\n&quot;">
              <op1 xsi:type="dbl:SampleDiscreteEmpirical" concreteSyntax="sample of myde" de="//@modules.0/@procedures.0/@statements.0"/>
              <op2 xsi:type="dbl:StringLiteral" concreteSyntax="&quot;\n&quot;" value="\n"/>
            </outputs>
          </statements>
          <statements xsi:type="dbl:Assignment" concreteSyntax="i=i+1">
            <variable concreteSyntax="i">
              <idExpr concreteSyntax="i" referencedElement="//@modules.0/@procedures.0/@statements.1"/>
            </variable>
            <value xsi:type="dbl:Plus" concreteSyntax="i+1">
              <op1 xsi:type="dbl:IdExpr" concreteSyntax="i" referencedElement="//@modules.0/@procedures.0/@statements.1"/>
              <op2 xsi:type="dbl:IntLiteral" concreteSyntax="1" value="1"/>
            </value>
          </statements>
        </whileBlock>
      </statements>
    </procedures>
  </modules>
</dbl:Model>
