<?xml version="1.0" encoding="ASCII"?>
<dbl:Model xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dbl="http://www.informatik.hu-berlin.de/sam/dbl">
  <imports file="../dbl">
    <model href="../dbl.xmi#/"/>
  </imports>
  <modules name="CosalExtension">
    <extensions name="CosalClassifier" concreteSyntax="extension CosalClassifier extends dbl Class {&#xA;&#x9;start CosalClassifier;&#xA;&#x9;CosalClassifier -> &quot;cosal&quot; &quot;class&quot; name:ID&#xA;&#x9;&#x9;&quot;{&quot; initial:InitialState StatesOptional &quot;}&quot;;&#xA;&#x9;&#xA;&#x9;StatesOptional -> states:State StatesOptional;&#xA;&#x9;StatesOptional -> ;&#xA;&#x9;&#xA;&#x9;State -> NormalState;&#xA;&#x9;State -> FinalState;&#xA;&#x9;&#xA;&#x9;NormalState -> &quot;state&quot; name:ID OutgoingOptionalFirst;&#xA;&#x9;InitialState -> &quot;initial&quot; outgoing:Transition;&#xA;&#x9;FinalState -> &quot;final&quot; name:ID;&#xA;&#x9;&#xA;&#x9;OutgoingOptionalFirst -> &quot;;&quot;;&#xA;&#x9;OutgoingOptionalFirst -> &quot;{&quot; OutgoingOptional &quot;}&quot;;&#xA;&#x9;OutgoingOptional -> outgoing:Transition OutgoingOptional;&#xA;&#x9;OutgoingOptional -> ;&#xA;&#x9;&#xA;&#x9;Transition -> InputOptional &quot;to&quot; target:$$State;&#xA;&#x9;InputOptional -> &quot;on&quot; input:STRING;&#xA;&#x9;InputOptional -> ;&#xA;}">
      <extensionPoint href="../dbl.xmi#//@modules.0/@classes.21"/>
      <syntaxDefinition concreteSyntax="{&#xA;&#x9;start CosalClassifier;&#xA;&#x9;CosalClassifier -> &quot;cosal&quot; &quot;class&quot; name:ID&#xA;&#x9;&#x9;&quot;{&quot; initial:InitialState StatesOptional &quot;}&quot;;&#xA;&#x9;&#xA;&#x9;StatesOptional -> states:State StatesOptional;&#xA;&#x9;StatesOptional -> ;&#xA;&#x9;&#xA;&#x9;State -> NormalState;&#xA;&#x9;State -> FinalState;&#xA;&#x9;&#xA;&#x9;NormalState -> &quot;state&quot; name:ID OutgoingOptionalFirst;&#xA;&#x9;InitialState -> &quot;initial&quot; outgoing:Transition;&#xA;&#x9;FinalState -> &quot;final&quot; name:ID;&#xA;&#x9;&#xA;&#x9;OutgoingOptionalFirst -> &quot;;&quot;;&#xA;&#x9;OutgoingOptionalFirst -> &quot;{&quot; OutgoingOptional &quot;}&quot;;&#xA;&#x9;OutgoingOptional -> outgoing:Transition OutgoingOptional;&#xA;&#x9;OutgoingOptional -> ;&#xA;&#x9;&#xA;&#x9;Transition -> InputOptional &quot;to&quot; target:$$State;&#xA;&#x9;InputOptional -> &quot;on&quot; input:STRING;&#xA;&#x9;InputOptional -> ;&#xA;}" startSymbol="//@modules.0/@extensions.0/@syntaxDefinition/@symbols.0">
        <symbols name="CosalClassifier" concreteSyntax="CosalClassifier -> &quot;cosal&quot; &quot;class&quot; name:ID&#xA;&#x9;&#x9;&quot;{&quot; initial:InitialState StatesOptional &quot;}&quot;;">
          <possibleSyntax xsi:type="dbl:SymbolSequence">
            <sequence xsi:type="dbl:PlainSymbolReference">
              <ownedClassifier xsi:type="dbl:Keyword" concreteSyntax="&quot;cosal&quot;" keyword="cosal"/>
            </sequence>
            <sequence xsi:type="dbl:PlainSymbolReference">
              <ownedClassifier xsi:type="dbl:Keyword" concreteSyntax="&quot;class&quot;" keyword="class"/>
            </sequence>
            <sequence xsi:type="dbl:StructuralSymbolReference" name="name">
              <ownedClassifier xsi:type="dbl:IdSymbol" concreteSyntax="ID"/>
            </sequence>
            <sequence xsi:type="dbl:PlainSymbolReference">
              <ownedClassifier xsi:type="dbl:Keyword" concreteSyntax="&quot;{&quot;" keyword="{"/>
            </sequence>
            <sequence xsi:type="dbl:StructuralSymbolReference" name="initial" referencedClassifier="//@modules.0/@extensions.0/@syntaxDefinition/@symbols.6"/>
            <sequence xsi:type="dbl:PlainSymbolReference" referencedClassifier="//@modules.0/@extensions.0/@syntaxDefinition/@symbols.1"/>
            <sequence xsi:type="dbl:PlainSymbolReference">
              <ownedClassifier xsi:type="dbl:Keyword" concreteSyntax="&quot;}&quot;" keyword="}"/>
            </sequence>
          </possibleSyntax>
        </symbols>
        <symbols name="StatesOptional" concreteSyntax="StatesOptional -> states:State StatesOptional;">
          <possibleSyntax xsi:type="dbl:SymbolSequence">
            <sequence xsi:type="dbl:StructuralSymbolReference" name="states" referencedClassifier="//@modules.0/@extensions.0/@syntaxDefinition/@symbols.3"/>
            <sequence xsi:type="dbl:PlainSymbolReference" referencedClassifier="//@modules.0/@extensions.0/@syntaxDefinition/@symbols.1"/>
          </possibleSyntax>
        </symbols>
        <symbols name="StatesOptional" concreteSyntax="StatesOptional -> ;">
          <possibleSyntax xsi:type="dbl:SymbolSequence"/>
        </symbols>
        <symbols name="State" concreteSyntax="State -> NormalState;">
          <possibleSyntax xsi:type="dbl:SymbolSequence">
            <sequence xsi:type="dbl:PlainSymbolReference" referencedClassifier="//@modules.0/@extensions.0/@syntaxDefinition/@symbols.5"/>
          </possibleSyntax>
        </symbols>
        <symbols name="State" concreteSyntax="State -> FinalState;">
          <possibleSyntax xsi:type="dbl:SymbolSequence">
            <sequence xsi:type="dbl:PlainSymbolReference" referencedClassifier="//@modules.0/@extensions.0/@syntaxDefinition/@symbols.7"/>
          </possibleSyntax>
        </symbols>
        <symbols name="NormalState" concreteSyntax="NormalState -> &quot;state&quot; name:ID OutgoingOptionalFirst;">
          <possibleSyntax xsi:type="dbl:SymbolSequence">
            <sequence xsi:type="dbl:PlainSymbolReference">
              <ownedClassifier xsi:type="dbl:Keyword" concreteSyntax="&quot;state&quot;" keyword="state"/>
            </sequence>
            <sequence xsi:type="dbl:StructuralSymbolReference" name="name">
              <ownedClassifier xsi:type="dbl:IdSymbol" concreteSyntax="ID"/>
            </sequence>
            <sequence xsi:type="dbl:PlainSymbolReference" referencedClassifier="//@modules.0/@extensions.0/@syntaxDefinition/@symbols.9"/>
          </possibleSyntax>
        </symbols>
        <symbols name="InitialState" concreteSyntax="InitialState -> &quot;initial&quot; outgoing:Transition;">
          <possibleSyntax xsi:type="dbl:SymbolSequence">
            <sequence xsi:type="dbl:PlainSymbolReference">
              <ownedClassifier xsi:type="dbl:Keyword" concreteSyntax="&quot;initial&quot;" keyword="initial"/>
            </sequence>
            <sequence xsi:type="dbl:StructuralSymbolReference" name="outgoing" referencedClassifier="//@modules.0/@extensions.0/@syntaxDefinition/@symbols.12"/>
          </possibleSyntax>
        </symbols>
        <symbols name="FinalState" concreteSyntax="FinalState -> &quot;final&quot; name:ID;">
          <possibleSyntax xsi:type="dbl:SymbolSequence">
            <sequence xsi:type="dbl:PlainSymbolReference">
              <ownedClassifier xsi:type="dbl:Keyword" concreteSyntax="&quot;final&quot;" keyword="final"/>
            </sequence>
            <sequence xsi:type="dbl:StructuralSymbolReference" name="name">
              <ownedClassifier xsi:type="dbl:IdSymbol" concreteSyntax="ID"/>
            </sequence>
          </possibleSyntax>
        </symbols>
        <symbols name="OutgoingOptionalFirst" concreteSyntax="OutgoingOptionalFirst -> &quot;;&quot;;">
          <possibleSyntax xsi:type="dbl:SymbolSequence">
            <sequence xsi:type="dbl:PlainSymbolReference">
              <ownedClassifier xsi:type="dbl:Keyword" concreteSyntax="&quot;;&quot;" keyword=";"/>
            </sequence>
          </possibleSyntax>
        </symbols>
        <symbols name="OutgoingOptionalFirst" concreteSyntax="OutgoingOptionalFirst -> &quot;{&quot; OutgoingOptional &quot;}&quot;;">
          <possibleSyntax xsi:type="dbl:SymbolSequence">
            <sequence xsi:type="dbl:PlainSymbolReference">
              <ownedClassifier xsi:type="dbl:Keyword" concreteSyntax="&quot;{&quot;" keyword="{"/>
            </sequence>
            <sequence xsi:type="dbl:PlainSymbolReference" referencedClassifier="//@modules.0/@extensions.0/@syntaxDefinition/@symbols.11"/>
            <sequence xsi:type="dbl:PlainSymbolReference">
              <ownedClassifier xsi:type="dbl:Keyword" concreteSyntax="&quot;}&quot;" keyword="}"/>
            </sequence>
          </possibleSyntax>
        </symbols>
        <symbols name="OutgoingOptional" concreteSyntax="OutgoingOptional -> outgoing:Transition OutgoingOptional;">
          <possibleSyntax xsi:type="dbl:SymbolSequence">
            <sequence xsi:type="dbl:StructuralSymbolReference" name="outgoing" referencedClassifier="//@modules.0/@extensions.0/@syntaxDefinition/@symbols.12"/>
            <sequence xsi:type="dbl:PlainSymbolReference" referencedClassifier="//@modules.0/@extensions.0/@syntaxDefinition/@symbols.11"/>
          </possibleSyntax>
        </symbols>
        <symbols name="OutgoingOptional" concreteSyntax="OutgoingOptional -> ;">
          <possibleSyntax xsi:type="dbl:SymbolSequence"/>
        </symbols>
        <symbols name="Transition" concreteSyntax="Transition -> InputOptional &quot;to&quot; target:$$State;">
          <possibleSyntax xsi:type="dbl:SymbolSequence">
            <sequence xsi:type="dbl:PlainSymbolReference" referencedClassifier="//@modules.0/@extensions.0/@syntaxDefinition/@symbols.13"/>
            <sequence xsi:type="dbl:PlainSymbolReference">
              <ownedClassifier xsi:type="dbl:Keyword" concreteSyntax="&quot;to&quot;" keyword="to"/>
            </sequence>
            <sequence xsi:type="dbl:StructuralSymbolReference" name="target" referencedClassifier="//@modules.0/@extensions.0/@syntaxDefinition/@symbols.3" globalScopedReference="true"/>
          </possibleSyntax>
        </symbols>
        <symbols name="InputOptional" concreteSyntax="InputOptional -> &quot;on&quot; input:STRING;">
          <possibleSyntax xsi:type="dbl:SymbolSequence">
            <sequence xsi:type="dbl:PlainSymbolReference">
              <ownedClassifier xsi:type="dbl:Keyword" concreteSyntax="&quot;on&quot;" keyword="on"/>
            </sequence>
            <sequence xsi:type="dbl:StructuralSymbolReference" name="input">
              <ownedClassifier xsi:type="dbl:StringSymbol" concreteSyntax="STRING"/>
            </sequence>
          </possibleSyntax>
        </symbols>
        <symbols name="InputOptional" concreteSyntax="InputOptional -> ;">
          <possibleSyntax xsi:type="dbl:SymbolSequence"/>
        </symbols>
      </syntaxDefinition>
    </extensions>
    <extensions name="CosalInstance" concreteSyntax="extension CosalInstance extends dbl Variable {&#xA;&#x9;start CosalInstance;&#xA;&#x9;CosalInstance -> &quot;cosal&quot; &quot;object&quot; cosalClassifier:$$CosalClassifier name:ID;&#xA;}">
      <extensionPoint href="../dbl.xmi#//@modules.0/@classes.24"/>
      <syntaxDefinition concreteSyntax="{&#xA;&#x9;start CosalInstance;&#xA;&#x9;CosalInstance -> &quot;cosal&quot; &quot;object&quot; cosalClassifier:$$CosalClassifier name:ID;&#xA;}" startSymbol="//@modules.0/@extensions.1/@syntaxDefinition/@symbols.0">
        <symbols name="CosalInstance" concreteSyntax="CosalInstance -> &quot;cosal&quot; &quot;object&quot; cosalClassifier:$$CosalClassifier name:ID;">
          <possibleSyntax xsi:type="dbl:SymbolSequence">
            <sequence xsi:type="dbl:PlainSymbolReference">
              <ownedClassifier xsi:type="dbl:Keyword" concreteSyntax="&quot;cosal&quot;" keyword="cosal"/>
            </sequence>
            <sequence xsi:type="dbl:PlainSymbolReference">
              <ownedClassifier xsi:type="dbl:Keyword" concreteSyntax="&quot;object&quot;" keyword="object"/>
            </sequence>
            <sequence xsi:type="dbl:StructuralSymbolReference" name="cosalClassifier" referencedClassifier="//@modules.0/@extensions.0" globalScopedReference="true"/>
            <sequence xsi:type="dbl:StructuralSymbolReference" name="name">
              <ownedClassifier xsi:type="dbl:IdSymbol" concreteSyntax="ID"/>
            </sequence>
          </possibleSyntax>
        </symbols>
      </syntaxDefinition>
    </extensions>
    <extensions name="CosalInputList" concreteSyntax="extension CosalInputList extends dbl Statement {&#xA;&#x9;start CosalInputList;&#xA;&#x9;CosalInputList -> &quot;send&quot; inputs:Input MoreInputs &quot;to&quot; cosalInstance:$$CosalInstance &quot;;&quot;;&#xA;&#x9;MoreInputs -> inputs:Input MoreInputs;&#xA;&#x9;MoreInputs -> ;&#xA;&#x9;Input -> input:STRING;&#xA;}">
      <extensionPoint href="../dbl.xmi#//@modules.0/@classes.27"/>
      <syntaxDefinition concreteSyntax="{&#xA;&#x9;start CosalInputList;&#xA;&#x9;CosalInputList -> &quot;send&quot; inputs:Input MoreInputs &quot;to&quot; cosalInstance:$$CosalInstance &quot;;&quot;;&#xA;&#x9;MoreInputs -> inputs:Input MoreInputs;&#xA;&#x9;MoreInputs -> ;&#xA;&#x9;Input -> input:STRING;&#xA;}" startSymbol="//@modules.0/@extensions.2/@syntaxDefinition/@symbols.0">
        <symbols name="CosalInputList" concreteSyntax="CosalInputList -> &quot;send&quot; inputs:Input MoreInputs &quot;to&quot; cosalInstance:$$CosalInstance &quot;;&quot;;">
          <possibleSyntax xsi:type="dbl:SymbolSequence">
            <sequence xsi:type="dbl:PlainSymbolReference">
              <ownedClassifier xsi:type="dbl:Keyword" concreteSyntax="&quot;send&quot;" keyword="send"/>
            </sequence>
            <sequence xsi:type="dbl:StructuralSymbolReference" name="inputs" referencedClassifier="//@modules.0/@extensions.2/@syntaxDefinition/@symbols.3"/>
            <sequence xsi:type="dbl:PlainSymbolReference" referencedClassifier="//@modules.0/@extensions.2/@syntaxDefinition/@symbols.2"/>
            <sequence xsi:type="dbl:PlainSymbolReference">
              <ownedClassifier xsi:type="dbl:Keyword" concreteSyntax="&quot;to&quot;" keyword="to"/>
            </sequence>
            <sequence xsi:type="dbl:StructuralSymbolReference" name="cosalInstance" referencedClassifier="//@modules.0/@extensions.1" globalScopedReference="true"/>
            <sequence xsi:type="dbl:PlainSymbolReference">
              <ownedClassifier xsi:type="dbl:Keyword" concreteSyntax="&quot;;&quot;" keyword=";"/>
            </sequence>
          </possibleSyntax>
        </symbols>
        <symbols name="MoreInputs" concreteSyntax="MoreInputs -> inputs:Input MoreInputs;">
          <possibleSyntax xsi:type="dbl:SymbolSequence">
            <sequence xsi:type="dbl:StructuralSymbolReference" name="inputs" referencedClassifier="//@modules.0/@extensions.2/@syntaxDefinition/@symbols.3"/>
            <sequence xsi:type="dbl:PlainSymbolReference" referencedClassifier="//@modules.0/@extensions.2/@syntaxDefinition/@symbols.2"/>
          </possibleSyntax>
        </symbols>
        <symbols name="MoreInputs" concreteSyntax="MoreInputs -> ;">
          <possibleSyntax xsi:type="dbl:SymbolSequence"/>
        </symbols>
        <symbols name="Input" concreteSyntax="Input -> input:STRING;">
          <possibleSyntax xsi:type="dbl:SymbolSequence">
            <sequence xsi:type="dbl:StructuralSymbolReference" name="input">
              <ownedClassifier xsi:type="dbl:StringSymbol" concreteSyntax="STRING"/>
            </sequence>
          </possibleSyntax>
        </symbols>
      </syntaxDefinition>
    </extensions>
  </modules>
</dbl:Model>
