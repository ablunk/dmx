<?xml version="1.0" encoding="ASCII"?>
<dbl:Model xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dbl="http://www.informatik.hu-berlin.de/sam/dbl">
  <imports file="../../stdlib">
    <model href="../../stdlib.xmi#/"/>
  </imports>
  <imports file="../../dbl">
    <model href="../../dbl.xmi#/"/>
  </imports>
  <imports file="../../stdx">
    <model href="../../stdx.xmi#/"/>
  </imports>
  <module name="ssmruntime">
    <classifiers xsi:type="dbl:Class" name="Event" concreteSyntax="class Event {}"/>
    <classifiers xsi:type="dbl:Class" name="Signal" concreteSyntax="class Signal extends Event {}" superClass="//@module/@classifiers.0"/>
    <classifiers xsi:type="dbl:Class" name="TimeEvent" concreteSyntax="class TimeEvent extends Event {}" superClass="//@module/@classifiers.0"/>
    <classifiers xsi:type="dbl:ActiveClass" name="ObjectWithStateMachine" concreteSyntax="active class ObjectWithStateMachine {&#xA;&#x9;StateMachineRuntime stateMachineRuntime;&#xA;&#x9;&#xA;&#x9;new() {&#xA;&#x9;&#x9;stateMachineRuntime = createStateMachineRuntime(self);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;StateMachineRuntime createStateMachineRuntime(Object context) {&#x9;&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void sendSignal(Signal signal) {&#xA;&#x9;&#x9;stateMachineRuntime.enterEvent(signal);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;actions {&#xA;&#x9;&#x9;print(&quot;running state machine\n&quot;);&#xA;&#x9;&#x9;activate stateMachineRuntime;&#xA;&#x9;}&#xA;}">
      <attributes name="stateMachineRuntime" concreteSyntax="StateMachineRuntime stateMachineRuntime">
        <classifierType concreteSyntax="StateMachineRuntime" referencedElement="//@module/@classifiers.9"/>
      </attributes>
      <constructors>
        <statements xsi:type="dbl:Assignment" concreteSyntax="stateMachineRuntime = createStateMachineRuntime(self)">
          <variable concreteSyntax="stateMachineRuntime">
            <idExpr concreteSyntax="stateMachineRuntime" referencedElement="//@module/@classifiers.3/@attributes.0"/>
          </variable>
          <value xsi:type="dbl:IdExpr" concreteSyntax="createStateMachineRuntime(self)" referencedElement="//@module/@classifiers.3/@methods.0">
            <callPart>
              <callArguments xsi:type="dbl:IdExpr" concreteSyntax="self">
                <predefinedId xsi:type="dbl:MeLiteral"/>
              </callArguments>
            </callPart>
          </value>
        </statements>
      </constructors>
      <methods name="createStateMachineRuntime">
        <classifierType concreteSyntax="StateMachineRuntime" referencedElement="//@module/@classifiers.9"/>
        <statements xsi:type="dbl:Return" concreteSyntax="return null">
          <value xsi:type="dbl:NullLiteral" concreteSyntax="null"/>
        </statements>
        <parameters name="context">
          <classifierType concreteSyntax="Object">
            <referencedElement href="../../stdlib.xmi#//@module/@classifiers.1"/>
          </classifierType>
        </parameters>
      </methods>
      <methods name="sendSignal">
        <primitiveType xsi:type="dbl:VoidType"/>
        <statements xsi:type="dbl:FunctionCall" concreteSyntax="stateMachineRuntime.enterEvent(signal)">
          <callIdExpr concreteSyntax="stateMachineRuntime.enterEvent(signal)" referencedElement="//@module/@classifiers.9/@methods.4">
            <parentIdExpr concreteSyntax="stateMachineRuntime" referencedElement="//@module/@classifiers.3/@attributes.0"/>
            <callPart>
              <callArguments xsi:type="dbl:IdExpr" concreteSyntax="signal" referencedElement="//@module/@classifiers.3/@methods.1/@parameters.0"/>
            </callPart>
          </callIdExpr>
        </statements>
        <parameters name="signal">
          <classifierType concreteSyntax="Signal" referencedElement="//@module/@classifiers.1"/>
        </parameters>
      </methods>
      <actionsBlock>
        <statements xsi:type="dbl:Print" concreteSyntax="print(&quot;running state machine\n&quot;)">
          <outputs xsi:type="dbl:StringLiteral" concreteSyntax="&quot;running state machine\n&quot;" value="running state machine\n"/>
        </statements>
        <statements xsi:type="dbl:ActivateObject" concreteSyntax="activate stateMachineRuntime">
          <objectAccess xsi:type="dbl:IdExpr" concreteSyntax="stateMachineRuntime" referencedElement="//@module/@classifiers.3/@attributes.0"/>
        </statements>
      </actionsBlock>
    </classifiers>
    <classifiers xsi:type="dbl:Class" name="StateMachine" concreteSyntax="class StateMachine {&#xA;&#x9;Object context;&#xA;&#x9;List states;&#xA;&#x9;State initialState;&#xA;&#x9;&#xA;&#x9;new() {&#xA;&#x9;&#x9;self.states = new ArrayList;&#x9;&#xA;&#x9;}&#xA;}">
      <attributes name="context" concreteSyntax="Object context">
        <classifierType concreteSyntax="Object">
          <referencedElement href="../../stdlib.xmi#//@module/@classifiers.1"/>
        </classifierType>
      </attributes>
      <attributes name="states" concreteSyntax="List states">
        <classifierType concreteSyntax="List">
          <referencedElement href="../../stdlib.xmi#//@module/@classifiers.5"/>
        </classifierType>
      </attributes>
      <attributes name="initialState" concreteSyntax="State initialState">
        <classifierType concreteSyntax="State" referencedElement="//@module/@classifiers.5"/>
      </attributes>
      <constructors>
        <statements xsi:type="dbl:Assignment" concreteSyntax="self.states = new ArrayList">
          <variable concreteSyntax="self.states">
            <idExpr concreteSyntax="self.states" referencedElement="//@module/@classifiers.4/@attributes.1">
              <parentIdExpr concreteSyntax="self">
                <predefinedId xsi:type="dbl:MeLiteral"/>
              </parentIdExpr>
            </idExpr>
          </variable>
          <value xsi:type="dbl:CreateObject" concreteSyntax="new ArrayList">
            <classifierType concreteSyntax="ArrayList">
              <referencedElement href="../../stdlib.xmi#//@module/@classifiers.6"/>
            </classifierType>
          </value>
        </statements>
      </constructors>
    </classifiers>
    <classifiers xsi:type="dbl:Class" name="State" concreteSyntax="class State {&#xA;&#x9;string name;&#xA;&#x9;List outgoingTransitions;&#xA;&#x9;&#xA;&#x9;new() {&#xA;&#x9;&#x9;self.outgoingTransitions = new ArrayList;&#xA;&#x9;}&#xA;}">
      <attributes name="name" concreteSyntax="string name">
        <primitiveType xsi:type="dbl:StringType"/>
      </attributes>
      <attributes name="outgoingTransitions" concreteSyntax="List outgoingTransitions">
        <classifierType concreteSyntax="List">
          <referencedElement href="../../stdlib.xmi#//@module/@classifiers.5"/>
        </classifierType>
      </attributes>
      <constructors>
        <statements xsi:type="dbl:Assignment" concreteSyntax="self.outgoingTransitions = new ArrayList">
          <variable concreteSyntax="self.outgoingTransitions">
            <idExpr concreteSyntax="self.outgoingTransitions" referencedElement="//@module/@classifiers.5/@attributes.1">
              <parentIdExpr concreteSyntax="self">
                <predefinedId xsi:type="dbl:MeLiteral"/>
              </parentIdExpr>
            </idExpr>
          </variable>
          <value xsi:type="dbl:CreateObject" concreteSyntax="new ArrayList">
            <classifierType concreteSyntax="ArrayList">
              <referencedElement href="../../stdlib.xmi#//@module/@classifiers.6"/>
            </classifierType>
          </value>
        </statements>
      </constructors>
    </classifiers>
    <classifiers xsi:type="dbl:Class" name="Transition" concreteSyntax="class Transition {&#xA;&#x9;State target;&#xA;&#x9;Variable messageVariable;&#xA;}">
      <attributes name="target" concreteSyntax="State target">
        <classifierType concreteSyntax="State" referencedElement="//@module/@classifiers.5"/>
      </attributes>
      <attributes name="messageVariable" concreteSyntax="Variable messageVariable">
        <classifierType concreteSyntax="Variable">
          <referencedElement href="../../dbl.xmi#//@module/@classifiers.31"/>
        </classifierType>
      </attributes>
    </classifiers>
    <classifiers xsi:type="dbl:Class" name="CompiledState" concreteSyntax="class CompiledState implements Object {&#xA;&#x9;State state;&#xA;&#x9;List compiledTransitions;&#xA;&#x9;List timers;&#xA;&#x9;&#xA;&#x9;new(State state) {&#xA;&#x9;&#x9;self.state = state;&#xA;&#x9;&#x9;self.compiledTransitions = new ArrayList();&#xA;&#x9;&#x9;self.timers = new ArrayList();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void enter() {&#xA;&#x9;&#x9;startTimers();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void startTimers() {&#xA;&#x9;&#x9;foreach (Timer timer in timers) {&#xA;&#x9;&#x9;&#x9;timer.start();&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void leave() {&#xA;&#x9;&#x9;cancelRunningTimers();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void cancelRunningTimers() {&#xA;&#x9;&#x9;foreach (Timer timer in timers) {&#xA;&#x9;&#x9;&#x9;timer.cancel();&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addTimer(Timer timer) {&#xA;&#x9;&#x9;timers.add(timer);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addCompiledTransition(CompiledTransition compiledTransition) {&#xA;&#x9;&#x9;compiledTransitions.add(compiledTransition);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;State consumeEvent(Event event, Object context) {&#xA;&#x9;&#x9;print(&quot;consuming event\n&quot;);&#xA;&#x9;&#x9;foreach (CompiledTransition compiledTransition in compiledTransitions) {&#xA;&#x9;&#x9;&#x9;if (compiledTransition.canHandle(event)) {&#xA;&#x9;&#x9;&#x9;&#x9;print(&quot;executing effects\n&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;compiledTransition.executeEffects(context, event);&#xA;&#x9;&#x9;&#x9;&#x9;compiledTransition.reset();&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;Transition transition = compiledTransition.transition;&#xA;&#x9;&#x9;&#x9;&#x9;return transition.target;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return null;&#x9;&#x9;&#xA;&#x9;}&#x9;&#xA;}">
      <superInterfaces href="../../stdlib.xmi#//@module/@classifiers.1"/>
      <attributes name="state" concreteSyntax="State state">
        <classifierType concreteSyntax="State" referencedElement="//@module/@classifiers.5"/>
      </attributes>
      <attributes name="compiledTransitions" concreteSyntax="List compiledTransitions">
        <classifierType concreteSyntax="List">
          <referencedElement href="../../stdlib.xmi#//@module/@classifiers.5"/>
        </classifierType>
      </attributes>
      <attributes name="timers" concreteSyntax="List timers">
        <classifierType concreteSyntax="List">
          <referencedElement href="../../stdlib.xmi#//@module/@classifiers.5"/>
        </classifierType>
      </attributes>
      <constructors>
        <statements xsi:type="dbl:Assignment" concreteSyntax="self.state = state">
          <variable concreteSyntax="self.state">
            <idExpr concreteSyntax="self.state" referencedElement="//@module/@classifiers.7/@constructors.0/@parameters.0">
              <parentIdExpr concreteSyntax="self">
                <predefinedId xsi:type="dbl:MeLiteral"/>
              </parentIdExpr>
            </idExpr>
          </variable>
          <value xsi:type="dbl:IdExpr" concreteSyntax="state" referencedElement="//@module/@classifiers.7/@constructors.0/@parameters.0"/>
        </statements>
        <statements xsi:type="dbl:Assignment" concreteSyntax="self.compiledTransitions = new ArrayList()">
          <variable concreteSyntax="self.compiledTransitions">
            <idExpr concreteSyntax="self.compiledTransitions" referencedElement="//@module/@classifiers.7/@attributes.1">
              <parentIdExpr concreteSyntax="self">
                <predefinedId xsi:type="dbl:MeLiteral"/>
              </parentIdExpr>
            </idExpr>
          </variable>
          <value xsi:type="dbl:CreateObject" concreteSyntax="new ArrayList()">
            <classifierType concreteSyntax="ArrayList()">
              <referencedElement href="../../stdlib.xmi#//@module/@classifiers.6"/>
              <callPart/>
            </classifierType>
          </value>
        </statements>
        <statements xsi:type="dbl:Assignment" concreteSyntax="self.timers = new ArrayList()">
          <variable concreteSyntax="self.timers">
            <idExpr concreteSyntax="self.timers" referencedElement="//@module/@classifiers.7/@attributes.2">
              <parentIdExpr concreteSyntax="self">
                <predefinedId xsi:type="dbl:MeLiteral"/>
              </parentIdExpr>
            </idExpr>
          </variable>
          <value xsi:type="dbl:CreateObject" concreteSyntax="new ArrayList()">
            <classifierType concreteSyntax="ArrayList()">
              <referencedElement href="../../stdlib.xmi#//@module/@classifiers.6"/>
              <callPart/>
            </classifierType>
          </value>
        </statements>
        <parameters name="state">
          <classifierType concreteSyntax="State" referencedElement="//@module/@classifiers.5"/>
        </parameters>
      </constructors>
      <methods name="enter">
        <primitiveType xsi:type="dbl:VoidType"/>
        <statements xsi:type="dbl:FunctionCall" concreteSyntax="startTimers()">
          <callIdExpr concreteSyntax="startTimers()" referencedElement="//@module/@classifiers.7/@methods.1">
            <callPart/>
          </callIdExpr>
        </statements>
      </methods>
      <methods name="startTimers">
        <primitiveType xsi:type="dbl:VoidType"/>
        <statements xsi:type="dbl:ForEach_ForEach_extension" concreteSyntax="foreach (Timer timer in timers) {&#xA;&#x9;&#x9;&#x9;timer.start();&#xA;&#x9;&#x9;}" instanceOfExtensionDefinition="true">
          <statements xsi:type="dbl:Variable" name="timer" concreteSyntax="Timer timer">
            <classifierType concreteSyntax="Timer" referencedElement="//@module/@classifiers.11"/>
          </statements>
          <collection xsi:type="dbl:IdExpr" concreteSyntax="timers" referencedElement="//@module/@classifiers.7/@attributes.2"/>
          <body concreteSyntax="{&#xA;&#x9;&#x9;&#x9;timer.start();&#xA;&#x9;&#x9;}">
            <statements xsi:type="dbl:FunctionCall" concreteSyntax="timer.start()">
              <callIdExpr concreteSyntax="timer.start()" referencedElement="//@module/@classifiers.11/@methods.0">
                <parentIdExpr concreteSyntax="timer" referencedElement="//@module/@classifiers.7/@methods.1/@statements.0/@statements.0"/>
                <callPart/>
              </callIdExpr>
            </statements>
          </body>
        </statements>
      </methods>
      <methods name="leave">
        <primitiveType xsi:type="dbl:VoidType"/>
        <statements xsi:type="dbl:FunctionCall" concreteSyntax="cancelRunningTimers()">
          <callIdExpr concreteSyntax="cancelRunningTimers()" referencedElement="//@module/@classifiers.7/@methods.3">
            <callPart/>
          </callIdExpr>
        </statements>
      </methods>
      <methods name="cancelRunningTimers">
        <primitiveType xsi:type="dbl:VoidType"/>
        <statements xsi:type="dbl:ForEach_ForEach_extension" concreteSyntax="foreach (Timer timer in timers) {&#xA;&#x9;&#x9;&#x9;timer.cancel();&#xA;&#x9;&#x9;}" instanceOfExtensionDefinition="true">
          <statements xsi:type="dbl:Variable" name="timer" concreteSyntax="Timer timer">
            <classifierType concreteSyntax="Timer" referencedElement="//@module/@classifiers.11"/>
          </statements>
          <collection xsi:type="dbl:IdExpr" concreteSyntax="timers" referencedElement="//@module/@classifiers.7/@attributes.2"/>
          <body concreteSyntax="{&#xA;&#x9;&#x9;&#x9;timer.cancel();&#xA;&#x9;&#x9;}">
            <statements xsi:type="dbl:FunctionCall" concreteSyntax="timer.cancel()">
              <callIdExpr concreteSyntax="timer.cancel()" referencedElement="//@module/@classifiers.11/@methods.1">
                <parentIdExpr concreteSyntax="timer" referencedElement="//@module/@classifiers.7/@methods.3/@statements.0/@statements.0"/>
                <callPart/>
              </callIdExpr>
            </statements>
          </body>
        </statements>
      </methods>
      <methods name="addTimer">
        <primitiveType xsi:type="dbl:VoidType"/>
        <statements xsi:type="dbl:FunctionCall" concreteSyntax="timers.add(timer)">
          <callIdExpr concreteSyntax="timers.add(timer)">
            <parentIdExpr concreteSyntax="timers" referencedElement="//@module/@classifiers.7/@attributes.2"/>
            <referencedElement href="../../stdlib.xmi#//@module/@classifiers.5/@methods.0"/>
            <callPart>
              <callArguments xsi:type="dbl:IdExpr" concreteSyntax="timer" referencedElement="//@module/@classifiers.7/@methods.4/@parameters.0"/>
            </callPart>
          </callIdExpr>
        </statements>
        <parameters name="timer">
          <classifierType concreteSyntax="Timer" referencedElement="//@module/@classifiers.11"/>
        </parameters>
      </methods>
      <methods name="addCompiledTransition">
        <primitiveType xsi:type="dbl:VoidType"/>
        <statements xsi:type="dbl:FunctionCall" concreteSyntax="compiledTransitions.add(compiledTransition)">
          <callIdExpr concreteSyntax="compiledTransitions.add(compiledTransition)">
            <parentIdExpr concreteSyntax="compiledTransitions" referencedElement="//@module/@classifiers.7/@attributes.1"/>
            <referencedElement href="../../stdlib.xmi#//@module/@classifiers.5/@methods.0"/>
            <callPart>
              <callArguments xsi:type="dbl:IdExpr" concreteSyntax="compiledTransition" referencedElement="//@module/@classifiers.7/@methods.5/@parameters.0"/>
            </callPart>
          </callIdExpr>
        </statements>
        <parameters name="compiledTransition">
          <classifierType concreteSyntax="CompiledTransition" referencedElement="//@module/@classifiers.10"/>
        </parameters>
      </methods>
      <methods name="consumeEvent">
        <classifierType concreteSyntax="State" referencedElement="//@module/@classifiers.5"/>
        <statements xsi:type="dbl:Print" concreteSyntax="print(&quot;consuming event\n&quot;)">
          <outputs xsi:type="dbl:StringLiteral" concreteSyntax="&quot;consuming event\n&quot;" value="consuming event\n"/>
        </statements>
        <statements xsi:type="dbl:ForEach_ForEach_extension" concreteSyntax="foreach (CompiledTransition compiledTransition in compiledTransitions) {&#xA;&#x9;&#x9;&#x9;if (compiledTransition.canHandle(event)) {&#xA;&#x9;&#x9;&#x9;&#x9;print(&quot;executing effects\n&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;compiledTransition.executeEffects(context, event);&#xA;&#x9;&#x9;&#x9;&#x9;compiledTransition.reset();&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;Transition transition = compiledTransition.transition;&#xA;&#x9;&#x9;&#x9;&#x9;return transition.target;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}" instanceOfExtensionDefinition="true">
          <statements xsi:type="dbl:Variable" name="compiledTransition" concreteSyntax="CompiledTransition compiledTransition">
            <classifierType concreteSyntax="CompiledTransition" referencedElement="//@module/@classifiers.10"/>
          </statements>
          <collection xsi:type="dbl:IdExpr" concreteSyntax="compiledTransitions" referencedElement="//@module/@classifiers.7/@attributes.1"/>
          <body concreteSyntax="{&#xA;&#x9;&#x9;&#x9;if (compiledTransition.canHandle(event)) {&#xA;&#x9;&#x9;&#x9;&#x9;print(&quot;executing effects\n&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;compiledTransition.executeEffects(context, event);&#xA;&#x9;&#x9;&#x9;&#x9;compiledTransition.reset();&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;Transition transition = compiledTransition.transition;&#xA;&#x9;&#x9;&#x9;&#x9;return transition.target;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}">
            <statements xsi:type="dbl:IfStatement" concreteSyntax="if (compiledTransition.canHandle(event)) {&#xA;&#x9;&#x9;&#x9;&#x9;print(&quot;executing effects\n&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;compiledTransition.executeEffects(context, event);&#xA;&#x9;&#x9;&#x9;&#x9;compiledTransition.reset();&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;Transition transition = compiledTransition.transition;&#xA;&#x9;&#x9;&#x9;&#x9;return transition.target;&#xA;&#x9;&#x9;&#x9;}">
              <condition xsi:type="dbl:IdExpr" concreteSyntax="compiledTransition.canHandle(event)" referencedElement="//@module/@classifiers.10/@methods.0">
                <parentIdExpr concreteSyntax="compiledTransition" referencedElement="//@module/@classifiers.7/@methods.6/@statements.1/@statements.0"/>
                <callPart>
                  <callArguments xsi:type="dbl:IdExpr" concreteSyntax="event" referencedElement="//@module/@classifiers.7/@methods.6/@parameters.0"/>
                </callPart>
              </condition>
              <trueCase xsi:type="dbl:LocalScopeStatement" concreteSyntax="{&#xA;&#x9;&#x9;&#x9;&#x9;print(&quot;executing effects\n&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;compiledTransition.executeEffects(context, event);&#xA;&#x9;&#x9;&#x9;&#x9;compiledTransition.reset();&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;Transition transition = compiledTransition.transition;&#xA;&#x9;&#x9;&#x9;&#x9;return transition.target;&#xA;&#x9;&#x9;&#x9;}">
                <statements xsi:type="dbl:Print" concreteSyntax="print(&quot;executing effects\n&quot;)">
                  <outputs xsi:type="dbl:StringLiteral" concreteSyntax="&quot;executing effects\n&quot;" value="executing effects\n"/>
                </statements>
                <statements xsi:type="dbl:FunctionCall" concreteSyntax="compiledTransition.executeEffects(context, event)">
                  <callIdExpr concreteSyntax="compiledTransition.executeEffects(context, event)" referencedElement="//@module/@classifiers.10/@methods.3">
                    <parentIdExpr concreteSyntax="compiledTransition" referencedElement="//@module/@classifiers.7/@methods.6/@statements.1/@statements.0"/>
                    <callPart>
                      <callArguments xsi:type="dbl:IdExpr" concreteSyntax="context" referencedElement="//@module/@classifiers.7/@methods.6/@parameters.1"/>
                      <callArguments xsi:type="dbl:IdExpr" concreteSyntax="event" referencedElement="//@module/@classifiers.7/@methods.6/@parameters.0"/>
                    </callPart>
                  </callIdExpr>
                </statements>
                <statements xsi:type="dbl:FunctionCall" concreteSyntax="compiledTransition.reset()">
                  <callIdExpr concreteSyntax="compiledTransition.reset()" referencedElement="//@module/@classifiers.10/@methods.2">
                    <parentIdExpr concreteSyntax="compiledTransition" referencedElement="//@module/@classifiers.7/@methods.6/@statements.1/@statements.0"/>
                    <callPart/>
                  </callIdExpr>
                </statements>
                <statements xsi:type="dbl:Variable" name="transition" concreteSyntax="Transition transition = compiledTransition.transition">
                  <classifierType concreteSyntax="Transition" referencedElement="//@module/@classifiers.6"/>
                  <initialValue xsi:type="dbl:IdExpr" concreteSyntax="compiledTransition.transition" referencedElement="//@module/@classifiers.7/@methods.6/@statements.1/@body/@statements.0/@trueCase/@statements.3">
                    <parentIdExpr concreteSyntax="compiledTransition" referencedElement="//@module/@classifiers.7/@methods.6/@statements.1/@statements.0"/>
                  </initialValue>
                </statements>
                <statements xsi:type="dbl:Return" concreteSyntax="return transition.target">
                  <value xsi:type="dbl:IdExpr" concreteSyntax="transition.target" referencedElement="//@module/@classifiers.6/@attributes.0">
                    <parentIdExpr concreteSyntax="transition" referencedElement="//@module/@classifiers.7/@methods.6/@statements.1/@body/@statements.0/@trueCase/@statements.3"/>
                  </value>
                </statements>
              </trueCase>
            </statements>
          </body>
        </statements>
        <statements xsi:type="dbl:Return" concreteSyntax="return null">
          <value xsi:type="dbl:NullLiteral" concreteSyntax="null"/>
        </statements>
        <parameters name="event">
          <classifierType concreteSyntax="Event" referencedElement="//@module/@classifiers.0"/>
        </parameters>
        <parameters name="context">
          <classifierType concreteSyntax="Object">
            <referencedElement href="../../stdlib.xmi#//@module/@classifiers.1"/>
          </classifierType>
        </parameters>
      </methods>
    </classifiers>
    <classifiers xsi:type="dbl:Class" name="ControlList" concreteSyntax="class ControlList implements List {&#xA;&#x9;List actualList = new ArrayList;&#xA;&#x9;control int size;&#xA;&#x9;control int mysize;&#xA;&#x9;&#xA;&#x9;void add(Object object) {&#xA;&#x9;&#x9;actualList.add(object);&#xA;&#x9;&#x9;size = size + 1;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;// other operations overridden as well&#xA;}">
      <superInterfaces href="../../stdlib.xmi#//@module/@classifiers.5"/>
      <attributes name="actualList" concreteSyntax="List actualList = new ArrayList">
        <classifierType concreteSyntax="List">
          <referencedElement href="../../stdlib.xmi#//@module/@classifiers.5"/>
        </classifierType>
        <initialValue xsi:type="dbl:CreateObject" concreteSyntax="new ArrayList">
          <classifierType concreteSyntax="ArrayList">
            <referencedElement href="../../stdlib.xmi#//@module/@classifiers.6"/>
          </classifierType>
        </initialValue>
      </attributes>
      <attributes xsi:type="dbl:ControlVariable" name="size" concreteSyntax="control int size">
        <primitiveType xsi:type="dbl:IntType"/>
      </attributes>
      <attributes xsi:type="dbl:ControlVariable" name="mysize" concreteSyntax="control int mysize">
        <primitiveType xsi:type="dbl:IntType"/>
      </attributes>
      <methods name="add">
        <primitiveType xsi:type="dbl:VoidType"/>
        <statements xsi:type="dbl:FunctionCall" concreteSyntax="actualList.add(object)">
          <callIdExpr concreteSyntax="actualList.add(object)">
            <parentIdExpr concreteSyntax="actualList" referencedElement="//@module/@classifiers.8/@attributes.0"/>
            <referencedElement href="../../stdlib.xmi#//@module/@classifiers.5/@methods.0"/>
            <callPart>
              <callArguments xsi:type="dbl:IdExpr" concreteSyntax="object" referencedElement="//@module/@classifiers.8/@methods.0/@parameters.0"/>
            </callPart>
          </callIdExpr>
        </statements>
        <statements xsi:type="dbl:Assignment" concreteSyntax="size = size + 1">
          <variable concreteSyntax="size">
            <idExpr concreteSyntax="size" referencedElement="//@module/@classifiers.8/@attributes.1"/>
          </variable>
          <value xsi:type="dbl:Plus" concreteSyntax="size + 1">
            <op1 xsi:type="dbl:IdExpr" concreteSyntax="size" referencedElement="//@module/@classifiers.8/@attributes.1"/>
            <op2 xsi:type="dbl:IntLiteral" concreteSyntax="1" value="1"/>
          </value>
        </statements>
        <parameters name="object">
          <classifierType concreteSyntax="Object">
            <referencedElement href="../../stdlib.xmi#//@module/@classifiers.1"/>
          </classifierType>
        </parameters>
      </methods>
    </classifiers>
    <classifiers xsi:type="dbl:ActiveClass" name="StateMachineRuntime" concreteSyntax="active class StateMachineRuntime {&#xA;&#x9;StateMachine stateMachine;&#xA;&#x9;&#xA;&#x9;Map stateToCompiledState = new HashMap;&#xA;&#x9;ControlList eventQueue = new ControlList;&#xA;&#x9;CompiledState currentState;&#xA;&#x9;&#xA;&#x9;new(StateMachine stateMachine) {&#xA;&#x9;&#x9;self.stateMachine = stateMachine;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void setCompiledState(State state, CompiledState compiledState) {&#xA;&#x9;&#x9;stateToCompiledState.put(state, compiledState);&#xA;&#x9;}&#xA;&#xA;&#x9;actions {&#xA;&#x9;&#x9;currentState = stateToCompiledState.get(stateMachine.initialState) as CompiledState;&#xA;&#x9;&#x9;executeEventLoop();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void executeEventLoop() {&#xA;&#x9;&#x9;print(&quot;executing event loop\n&quot;);&#xA;&#x9;&#x9;while (currentState != null) {&#xA;&#x9;&#x9;&#x9;while (currentState != null and !eventQueue.isEmpty()) {&#xA;&#x9;&#x9;&#x9;&#x9;print(&quot;current state = &quot; + currentState.state.name + &quot;\n&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;Event nextEvent = popNextEvent();&#xA;&#x9;&#x9;&#x9;&#x9;State nextState = currentState.consumeEvent(nextEvent, stateMachine.context);&#xA;&#x9;&#x9;&#x9;&#x9;if (nextState != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;CompiledState compiledNextState = stateToCompiledState.get(nextState) as CompiledState;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;currentState = compiledNextState;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (currentState != compiledNextState) { // better use equals here&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;currentState.leave();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;currentState.enter();&#xA;&#x9;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;currentState = null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;print(&quot;there is no next state. exiting.\n&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;print(&quot;no more events, waiting\n&quot;);&#xA;&#x9;&#x9;&#x9;waitForEvent();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;print(&quot;current state is not set, exiting\n&quot;);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;// to be overriden&#xA;&#x9;void waitForEvent() {&#xA;&#x9;&#x9;wait;&#xA;&#x9;&#x9;// wait until eventQueue.size > 0 || someCondition;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;Event popNextEvent() {&#xA;&#x9;&#x9;Event nextEvent = eventQueue.get(0) as Event;&#xA;&#x9;&#x9;eventQueue.remove(nextEvent);&#xA;&#x9;&#x9;return nextEvent;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void enterEvent(Event event) {&#xA;&#x9;&#x9;eventQueue.add(event);&#xA;&#x9;&#x9;reactivate self;&#xA;&#x9;}&#xA;}">
      <attributes name="stateMachine" concreteSyntax="StateMachine stateMachine">
        <classifierType concreteSyntax="StateMachine" referencedElement="//@module/@classifiers.4"/>
      </attributes>
      <attributes name="stateToCompiledState" concreteSyntax="Map stateToCompiledState = new HashMap">
        <classifierType concreteSyntax="Map">
          <referencedElement href="../../stdlib.xmi#//@module/@classifiers.7"/>
        </classifierType>
        <initialValue xsi:type="dbl:CreateObject" concreteSyntax="new HashMap">
          <classifierType concreteSyntax="HashMap">
            <referencedElement href="../../stdlib.xmi#//@module/@classifiers.8"/>
          </classifierType>
        </initialValue>
      </attributes>
      <attributes name="eventQueue" concreteSyntax="ControlList eventQueue = new ControlList">
        <classifierType concreteSyntax="ControlList" referencedElement="//@module/@classifiers.8"/>
        <initialValue xsi:type="dbl:CreateObject" concreteSyntax="new ControlList">
          <classifierType concreteSyntax="ControlList" referencedElement="//@module/@classifiers.8"/>
        </initialValue>
      </attributes>
      <attributes name="currentState" concreteSyntax="CompiledState currentState">
        <classifierType concreteSyntax="CompiledState" referencedElement="//@module/@classifiers.7"/>
      </attributes>
      <constructors>
        <statements xsi:type="dbl:Assignment" concreteSyntax="self.stateMachine = stateMachine">
          <variable concreteSyntax="self.stateMachine">
            <idExpr concreteSyntax="self.stateMachine" referencedElement="//@module/@classifiers.9/@constructors.0/@parameters.0">
              <parentIdExpr concreteSyntax="self">
                <predefinedId xsi:type="dbl:MeLiteral"/>
              </parentIdExpr>
            </idExpr>
          </variable>
          <value xsi:type="dbl:IdExpr" concreteSyntax="stateMachine" referencedElement="//@module/@classifiers.9/@constructors.0/@parameters.0"/>
        </statements>
        <parameters name="stateMachine">
          <classifierType concreteSyntax="StateMachine" referencedElement="//@module/@classifiers.4"/>
        </parameters>
      </constructors>
      <methods name="setCompiledState">
        <primitiveType xsi:type="dbl:VoidType"/>
        <statements xsi:type="dbl:FunctionCall" concreteSyntax="stateToCompiledState.put(state, compiledState)">
          <callIdExpr concreteSyntax="stateToCompiledState.put(state, compiledState)">
            <parentIdExpr concreteSyntax="stateToCompiledState" referencedElement="//@module/@classifiers.9/@attributes.1"/>
            <referencedElement href="../../stdlib.xmi#//@module/@classifiers.7/@methods.1"/>
            <callPart>
              <callArguments xsi:type="dbl:IdExpr" concreteSyntax="state" referencedElement="//@module/@classifiers.9/@methods.0/@parameters.0"/>
              <callArguments xsi:type="dbl:IdExpr" concreteSyntax="compiledState" referencedElement="//@module/@classifiers.9/@methods.0/@parameters.1"/>
            </callPart>
          </callIdExpr>
        </statements>
        <parameters name="state">
          <classifierType concreteSyntax="State" referencedElement="//@module/@classifiers.5"/>
        </parameters>
        <parameters name="compiledState">
          <classifierType concreteSyntax="CompiledState" referencedElement="//@module/@classifiers.7"/>
        </parameters>
      </methods>
      <methods name="executeEventLoop">
        <primitiveType xsi:type="dbl:VoidType"/>
        <statements xsi:type="dbl:Print" concreteSyntax="print(&quot;executing event loop\n&quot;)">
          <outputs xsi:type="dbl:StringLiteral" concreteSyntax="&quot;executing event loop\n&quot;" value="executing event loop\n"/>
        </statements>
        <statements xsi:type="dbl:WhileStatement" concreteSyntax="while (currentState != null) {&#xA;&#x9;&#x9;&#x9;while (currentState != null and !eventQueue.isEmpty()) {&#xA;&#x9;&#x9;&#x9;&#x9;print(&quot;current state = &quot; + currentState.state.name + &quot;\n&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;Event nextEvent = popNextEvent();&#xA;&#x9;&#x9;&#x9;&#x9;State nextState = currentState.consumeEvent(nextEvent, stateMachine.context);&#xA;&#x9;&#x9;&#x9;&#x9;if (nextState != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;CompiledState compiledNextState = stateToCompiledState.get(nextState) as CompiledState;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;currentState = compiledNextState;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (currentState != compiledNextState) { // better use equals here&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;currentState.leave();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;currentState.enter();&#xA;&#x9;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;currentState = null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;print(&quot;there is no next state. exiting.\n&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;print(&quot;no more events, waiting\n&quot;);&#xA;&#x9;&#x9;&#x9;waitForEvent();&#xA;&#x9;&#x9;}">
          <condition xsi:type="dbl:NotEqual" concreteSyntax="currentState != null">
            <op1 xsi:type="dbl:IdExpr" concreteSyntax="currentState" referencedElement="//@module/@classifiers.9/@attributes.3"/>
            <op2 xsi:type="dbl:NullLiteral" concreteSyntax="null"/>
          </condition>
          <body xsi:type="dbl:LocalScopeStatement" concreteSyntax="{&#xA;&#x9;&#x9;&#x9;while (currentState != null and !eventQueue.isEmpty()) {&#xA;&#x9;&#x9;&#x9;&#x9;print(&quot;current state = &quot; + currentState.state.name + &quot;\n&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;Event nextEvent = popNextEvent();&#xA;&#x9;&#x9;&#x9;&#x9;State nextState = currentState.consumeEvent(nextEvent, stateMachine.context);&#xA;&#x9;&#x9;&#x9;&#x9;if (nextState != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;CompiledState compiledNextState = stateToCompiledState.get(nextState) as CompiledState;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;currentState = compiledNextState;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (currentState != compiledNextState) { // better use equals here&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;currentState.leave();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;currentState.enter();&#xA;&#x9;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;currentState = null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;print(&quot;there is no next state. exiting.\n&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;print(&quot;no more events, waiting\n&quot;);&#xA;&#x9;&#x9;&#x9;waitForEvent();&#xA;&#x9;&#x9;}">
            <statements xsi:type="dbl:WhileStatement" concreteSyntax="while (currentState != null and !eventQueue.isEmpty()) {&#xA;&#x9;&#x9;&#x9;&#x9;print(&quot;current state = &quot; + currentState.state.name + &quot;\n&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;Event nextEvent = popNextEvent();&#xA;&#x9;&#x9;&#x9;&#x9;State nextState = currentState.consumeEvent(nextEvent, stateMachine.context);&#xA;&#x9;&#x9;&#x9;&#x9;if (nextState != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;CompiledState compiledNextState = stateToCompiledState.get(nextState) as CompiledState;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;currentState = compiledNextState;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (currentState != compiledNextState) { // better use equals here&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;currentState.leave();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;currentState.enter();&#xA;&#x9;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;currentState = null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;print(&quot;there is no next state. exiting.\n&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}">
              <condition xsi:type="dbl:And" concreteSyntax="currentState != null and !eventQueue.isEmpty()">
                <op1 xsi:type="dbl:NotEqual" concreteSyntax="currentState != null">
                  <op1 xsi:type="dbl:IdExpr" concreteSyntax="currentState" referencedElement="//@module/@classifiers.9/@attributes.3"/>
                  <op2 xsi:type="dbl:NullLiteral" concreteSyntax="null"/>
                </op1>
                <op2 xsi:type="dbl:Not" concreteSyntax="!eventQueue.isEmpty()">
                  <op xsi:type="dbl:IdExpr" concreteSyntax="eventQueue.isEmpty()">
                    <parentIdExpr concreteSyntax="eventQueue" referencedElement="//@module/@classifiers.9/@attributes.2"/>
                    <referencedElement href="../../stdlib.xmi#//@module/@classifiers.5/@methods.7"/>
                    <callPart/>
                  </op>
                </op2>
              </condition>
              <body xsi:type="dbl:LocalScopeStatement" concreteSyntax="{&#xA;&#x9;&#x9;&#x9;&#x9;print(&quot;current state = &quot; + currentState.state.name + &quot;\n&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;Event nextEvent = popNextEvent();&#xA;&#x9;&#x9;&#x9;&#x9;State nextState = currentState.consumeEvent(nextEvent, stateMachine.context);&#xA;&#x9;&#x9;&#x9;&#x9;if (nextState != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;CompiledState compiledNextState = stateToCompiledState.get(nextState) as CompiledState;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;currentState = compiledNextState;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (currentState != compiledNextState) { // better use equals here&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;currentState.leave();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;currentState.enter();&#xA;&#x9;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;currentState = null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;print(&quot;there is no next state. exiting.\n&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}">
                <statements xsi:type="dbl:Print" concreteSyntax="print(&quot;current state = &quot; + currentState.state.name + &quot;\n&quot;)">
                  <outputs xsi:type="dbl:Plus" concreteSyntax="&quot;current state = &quot; + currentState.state.name + &quot;\n&quot;">
                    <op1 xsi:type="dbl:Plus" concreteSyntax="&quot;current state = &quot; + currentState.state.name">
                      <op1 xsi:type="dbl:StringLiteral" concreteSyntax="&quot;current state = &quot;" value="current state = "/>
                      <op2 xsi:type="dbl:IdExpr" concreteSyntax="currentState.state.name" referencedElement="//@module/@classifiers.5/@attributes.0">
                        <parentIdExpr concreteSyntax="currentState.state" referencedElement="//@module/@classifiers.7/@attributes.0">
                          <parentIdExpr concreteSyntax="currentState" referencedElement="//@module/@classifiers.9/@attributes.3"/>
                        </parentIdExpr>
                      </op2>
                    </op1>
                    <op2 xsi:type="dbl:StringLiteral" concreteSyntax="&quot;\n&quot;" value="\n"/>
                  </outputs>
                </statements>
                <statements xsi:type="dbl:Variable" name="nextEvent" concreteSyntax="Event nextEvent = popNextEvent()">
                  <classifierType concreteSyntax="Event" referencedElement="//@module/@classifiers.0"/>
                  <initialValue xsi:type="dbl:IdExpr" concreteSyntax="popNextEvent()" referencedElement="//@module/@classifiers.9/@methods.3">
                    <callPart/>
                  </initialValue>
                </statements>
                <statements xsi:type="dbl:Variable" name="nextState" concreteSyntax="State nextState = currentState.consumeEvent(nextEvent, stateMachine.context)">
                  <classifierType concreteSyntax="State" referencedElement="//@module/@classifiers.5"/>
                  <initialValue xsi:type="dbl:IdExpr" concreteSyntax="currentState.consumeEvent(nextEvent, stateMachine.context)" referencedElement="//@module/@classifiers.7/@methods.6">
                    <parentIdExpr concreteSyntax="currentState" referencedElement="//@module/@classifiers.9/@attributes.3"/>
                    <callPart>
                      <callArguments xsi:type="dbl:IdExpr" concreteSyntax="nextEvent" referencedElement="//@module/@classifiers.9/@methods.1/@statements.1/@body/@statements.0/@body/@statements.1"/>
                      <callArguments xsi:type="dbl:IdExpr" concreteSyntax="stateMachine.context" referencedElement="//@module/@classifiers.4/@attributes.0">
                        <parentIdExpr concreteSyntax="stateMachine" referencedElement="//@module/@classifiers.9/@attributes.0"/>
                      </callArguments>
                    </callPart>
                  </initialValue>
                </statements>
                <statements xsi:type="dbl:IfStatement" concreteSyntax="if (nextState != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;CompiledState compiledNextState = stateToCompiledState.get(nextState) as CompiledState;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;currentState = compiledNextState;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (currentState != compiledNextState) { // better use equals here&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;currentState.leave();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;currentState.enter();&#xA;&#x9;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;currentState = null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;print(&quot;there is no next state. exiting.\n&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;}">
                  <condition xsi:type="dbl:NotEqual" concreteSyntax="nextState != null">
                    <op1 xsi:type="dbl:IdExpr" concreteSyntax="nextState" referencedElement="//@module/@classifiers.9/@methods.1/@statements.1/@body/@statements.0/@body/@statements.2"/>
                    <op2 xsi:type="dbl:NullLiteral" concreteSyntax="null"/>
                  </condition>
                  <trueCase xsi:type="dbl:LocalScopeStatement" concreteSyntax="{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;CompiledState compiledNextState = stateToCompiledState.get(nextState) as CompiledState;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;currentState = compiledNextState;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (currentState != compiledNextState) { // better use equals here&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;currentState.leave();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;currentState.enter();&#xA;&#x9;&#x9;&#x9;&#x9;}">
                    <statements xsi:type="dbl:Variable" name="compiledNextState" concreteSyntax="CompiledState compiledNextState = stateToCompiledState.get(nextState) as CompiledState">
                      <classifierType concreteSyntax="CompiledState" referencedElement="//@module/@classifiers.7"/>
                      <initialValue xsi:type="dbl:Cast" concreteSyntax="stateToCompiledState.get(nextState) as CompiledState">
                        <classifierType concreteSyntax="CompiledState" referencedElement="//@module/@classifiers.7"/>
                        <op xsi:type="dbl:IdExpr" concreteSyntax="stateToCompiledState.get(nextState)">
                          <parentIdExpr concreteSyntax="stateToCompiledState" referencedElement="//@module/@classifiers.9/@attributes.1"/>
                          <referencedElement href="../../stdlib.xmi#//@module/@classifiers.7/@methods.0"/>
                          <callPart>
                            <callArguments xsi:type="dbl:IdExpr" concreteSyntax="nextState" referencedElement="//@module/@classifiers.9/@methods.1/@statements.1/@body/@statements.0/@body/@statements.2"/>
                          </callPart>
                        </op>
                      </initialValue>
                    </statements>
                    <statements xsi:type="dbl:Assignment" concreteSyntax="currentState = compiledNextState">
                      <variable concreteSyntax="currentState">
                        <idExpr concreteSyntax="currentState" referencedElement="//@module/@classifiers.9/@attributes.3"/>
                      </variable>
                      <value xsi:type="dbl:IdExpr" concreteSyntax="compiledNextState" referencedElement="//@module/@classifiers.9/@methods.1/@statements.1/@body/@statements.0/@body/@statements.3/@trueCase/@statements.0"/>
                    </statements>
                    <statements xsi:type="dbl:IfStatement" concreteSyntax="if (currentState != compiledNextState) { // better use equals here&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;currentState.leave();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}">
                      <condition xsi:type="dbl:NotEqual" concreteSyntax="currentState != compiledNextState">
                        <op1 xsi:type="dbl:IdExpr" concreteSyntax="currentState" referencedElement="//@module/@classifiers.9/@attributes.3"/>
                        <op2 xsi:type="dbl:IdExpr" concreteSyntax="compiledNextState" referencedElement="//@module/@classifiers.9/@methods.1/@statements.1/@body/@statements.0/@body/@statements.3/@trueCase/@statements.0"/>
                      </condition>
                      <trueCase xsi:type="dbl:LocalScopeStatement" concreteSyntax="{ // better use equals here&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;currentState.leave();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}">
                        <statements xsi:type="dbl:FunctionCall" concreteSyntax="currentState.leave()">
                          <callIdExpr concreteSyntax="currentState.leave()" referencedElement="//@module/@classifiers.7/@methods.2">
                            <parentIdExpr concreteSyntax="currentState" referencedElement="//@module/@classifiers.9/@attributes.3"/>
                            <callPart/>
                          </callIdExpr>
                        </statements>
                      </trueCase>
                    </statements>
                    <statements xsi:type="dbl:FunctionCall" concreteSyntax="currentState.enter()">
                      <callIdExpr concreteSyntax="currentState.enter()" referencedElement="//@module/@classifiers.7/@methods.0">
                        <parentIdExpr concreteSyntax="currentState" referencedElement="//@module/@classifiers.9/@attributes.3"/>
                        <callPart/>
                      </callIdExpr>
                    </statements>
                  </trueCase>
                  <falseCase xsi:type="dbl:LocalScopeStatement" concreteSyntax="{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;currentState = null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;print(&quot;there is no next state. exiting.\n&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;}">
                    <statements xsi:type="dbl:Assignment" concreteSyntax="currentState = null">
                      <variable concreteSyntax="currentState">
                        <idExpr concreteSyntax="currentState" referencedElement="//@module/@classifiers.9/@attributes.3"/>
                      </variable>
                      <value xsi:type="dbl:NullLiteral" concreteSyntax="null"/>
                    </statements>
                    <statements xsi:type="dbl:Print" concreteSyntax="print(&quot;there is no next state. exiting.\n&quot;)">
                      <outputs xsi:type="dbl:StringLiteral" concreteSyntax="&quot;there is no next state. exiting.\n&quot;" value="there is no next state. exiting.\n"/>
                    </statements>
                  </falseCase>
                </statements>
              </body>
            </statements>
            <statements xsi:type="dbl:Print" concreteSyntax="print(&quot;no more events, waiting\n&quot;)">
              <outputs xsi:type="dbl:StringLiteral" concreteSyntax="&quot;no more events, waiting\n&quot;" value="no more events, waiting\n"/>
            </statements>
            <statements xsi:type="dbl:FunctionCall" concreteSyntax="waitForEvent()">
              <callIdExpr concreteSyntax="waitForEvent()" referencedElement="//@module/@classifiers.9/@methods.2">
                <callPart/>
              </callIdExpr>
            </statements>
          </body>
        </statements>
        <statements xsi:type="dbl:Print" concreteSyntax="print(&quot;current state is not set, exiting\n&quot;)">
          <outputs xsi:type="dbl:StringLiteral" concreteSyntax="&quot;current state is not set, exiting\n&quot;" value="current state is not set, exiting\n"/>
        </statements>
      </methods>
      <methods name="waitForEvent">
        <primitiveType xsi:type="dbl:VoidType"/>
        <statements xsi:type="dbl:Wait" concreteSyntax="wait"/>
      </methods>
      <methods name="popNextEvent">
        <classifierType concreteSyntax="Event" referencedElement="//@module/@classifiers.0"/>
        <statements xsi:type="dbl:Variable" name="nextEvent" concreteSyntax="Event nextEvent = eventQueue.get(0) as Event">
          <classifierType concreteSyntax="Event" referencedElement="//@module/@classifiers.0"/>
          <initialValue xsi:type="dbl:Cast" concreteSyntax="eventQueue.get(0) as Event">
            <classifierType concreteSyntax="Event" referencedElement="//@module/@classifiers.0"/>
            <op xsi:type="dbl:IdExpr" concreteSyntax="eventQueue.get(0)">
              <parentIdExpr concreteSyntax="eventQueue" referencedElement="//@module/@classifiers.9/@attributes.2"/>
              <referencedElement href="../../stdlib.xmi#//@module/@classifiers.5/@methods.5"/>
              <callPart>
                <callArguments xsi:type="dbl:IntLiteral" concreteSyntax="0"/>
              </callPart>
            </op>
          </initialValue>
        </statements>
        <statements xsi:type="dbl:FunctionCall" concreteSyntax="eventQueue.remove(nextEvent)">
          <callIdExpr concreteSyntax="eventQueue.remove(nextEvent)">
            <parentIdExpr concreteSyntax="eventQueue" referencedElement="//@module/@classifiers.9/@attributes.2"/>
            <referencedElement href="../../stdlib.xmi#//@module/@classifiers.5/@methods.8"/>
            <callPart>
              <callArguments xsi:type="dbl:IdExpr" concreteSyntax="nextEvent" referencedElement="//@module/@classifiers.9/@methods.3/@statements.0"/>
            </callPart>
          </callIdExpr>
        </statements>
        <statements xsi:type="dbl:Return" concreteSyntax="return nextEvent">
          <value xsi:type="dbl:IdExpr" concreteSyntax="nextEvent" referencedElement="//@module/@classifiers.9/@methods.3/@statements.0"/>
        </statements>
      </methods>
      <methods name="enterEvent">
        <primitiveType xsi:type="dbl:VoidType"/>
        <statements xsi:type="dbl:FunctionCall" concreteSyntax="eventQueue.add(event)">
          <callIdExpr concreteSyntax="eventQueue.add(event)" referencedElement="//@module/@classifiers.8/@methods.0">
            <parentIdExpr concreteSyntax="eventQueue" referencedElement="//@module/@classifiers.9/@attributes.2"/>
            <callPart>
              <callArguments xsi:type="dbl:IdExpr" concreteSyntax="event" referencedElement="//@module/@classifiers.9/@methods.4/@parameters.0"/>
            </callPart>
          </callIdExpr>
        </statements>
        <statements xsi:type="dbl:Reactivate" concreteSyntax="reactivate self">
          <objectAccess xsi:type="dbl:IdExpr" concreteSyntax="self">
            <predefinedId xsi:type="dbl:MeLiteral"/>
          </objectAccess>
        </statements>
        <parameters name="event">
          <classifierType concreteSyntax="Event" referencedElement="//@module/@classifiers.0"/>
        </parameters>
      </methods>
      <actionsBlock>
        <statements xsi:type="dbl:Assignment" concreteSyntax="currentState = stateToCompiledState.get(stateMachine.initialState) as CompiledState">
          <variable concreteSyntax="currentState">
            <idExpr concreteSyntax="currentState" referencedElement="//@module/@classifiers.9/@attributes.3"/>
          </variable>
          <value xsi:type="dbl:Cast" concreteSyntax="stateToCompiledState.get(stateMachine.initialState) as CompiledState">
            <classifierType concreteSyntax="CompiledState" referencedElement="//@module/@classifiers.7"/>
            <op xsi:type="dbl:IdExpr" concreteSyntax="stateToCompiledState.get(stateMachine.initialState)">
              <parentIdExpr concreteSyntax="stateToCompiledState" referencedElement="//@module/@classifiers.9/@attributes.1"/>
              <referencedElement href="../../stdlib.xmi#//@module/@classifiers.7/@methods.0"/>
              <callPart>
                <callArguments xsi:type="dbl:IdExpr" concreteSyntax="stateMachine.initialState" referencedElement="//@module/@classifiers.4/@attributes.2">
                  <parentIdExpr concreteSyntax="stateMachine" referencedElement="//@module/@classifiers.9/@attributes.0"/>
                </callArguments>
              </callPart>
            </op>
          </value>
        </statements>
        <statements xsi:type="dbl:FunctionCall" concreteSyntax="executeEventLoop()">
          <callIdExpr concreteSyntax="executeEventLoop()" referencedElement="//@module/@classifiers.9/@methods.1">
            <callPart/>
          </callIdExpr>
        </statements>
      </actionsBlock>
    </classifiers>
    <classifiers xsi:type="dbl:Class" name="CompiledTransition" concreteSyntax="class CompiledTransition {&#xA;&#x9;Transition transition;&#xA;&#x9;TimeEvent assignedFiredTimeEvent;&#xA;&#x9;&#xA;&#x9;new(Transition transition) {&#xA;&#x9;&#x9;self.transition = transition;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;boolean canHandle(Event event) {&#xA;&#x9;&#x9;if (event instanceof Signal) {&#xA;&#x9;&#x9;&#x9;return canHandleSignal(event as Signal);&#xA;&#x9;&#x9;} else if (event instanceof TimeEvent) {&#xA;&#x9;&#x9;&#x9;return event == assignedFiredTimeEvent;&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;return false;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;boolean canHandleSignal(Signal message) {&#xA;&#x9;&#x9;return false;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void reset() {&#xA;&#x9;&#x9;assignedFiredTimeEvent = null;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;// to be overridden&#xA;&#x9;void executeEffects(Object context, Event event) {}&#xA;&#x9;&#xA;&#x9;// to be overridden&#xA;&#x9;int getTimeDuration() {&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;boolean isConditionSatisfied() {&#xA;&#x9;&#x9;return true;&#xA;&#x9;}&#xA;}">
      <attributes name="transition" concreteSyntax="Transition transition">
        <classifierType concreteSyntax="Transition" referencedElement="//@module/@classifiers.6"/>
      </attributes>
      <attributes name="assignedFiredTimeEvent" concreteSyntax="TimeEvent assignedFiredTimeEvent">
        <classifierType concreteSyntax="TimeEvent" referencedElement="//@module/@classifiers.2"/>
      </attributes>
      <constructors>
        <statements xsi:type="dbl:Assignment" concreteSyntax="self.transition = transition">
          <variable concreteSyntax="self.transition">
            <idExpr concreteSyntax="self.transition" referencedElement="//@module/@classifiers.10/@constructors.0/@parameters.0">
              <parentIdExpr concreteSyntax="self">
                <predefinedId xsi:type="dbl:MeLiteral"/>
              </parentIdExpr>
            </idExpr>
          </variable>
          <value xsi:type="dbl:IdExpr" concreteSyntax="transition" referencedElement="//@module/@classifiers.10/@constructors.0/@parameters.0"/>
        </statements>
        <parameters name="transition">
          <classifierType concreteSyntax="Transition" referencedElement="//@module/@classifiers.6"/>
        </parameters>
      </constructors>
      <methods name="canHandle">
        <primitiveType xsi:type="dbl:BoolType"/>
        <statements xsi:type="dbl:IfStatement" concreteSyntax="if (event instanceof Signal) {&#xA;&#x9;&#x9;&#x9;return canHandleSignal(event as Signal);&#xA;&#x9;&#x9;} else if (event instanceof TimeEvent) {&#xA;&#x9;&#x9;&#x9;return event == assignedFiredTimeEvent;&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;return false;&#xA;&#x9;&#x9;}">
          <condition xsi:type="dbl:InstanceOf" concreteSyntax="event instanceof Signal">
            <op1 xsi:type="dbl:IdExpr" concreteSyntax="event" referencedElement="//@module/@classifiers.10/@methods.0/@parameters.0"/>
            <op2 xsi:type="dbl:TypeAccess" concreteSyntax="Signal">
              <idExpr concreteSyntax="Signal" referencedElement="//@module/@classifiers.1"/>
            </op2>
          </condition>
          <trueCase xsi:type="dbl:LocalScopeStatement" concreteSyntax="{&#xA;&#x9;&#x9;&#x9;return canHandleSignal(event as Signal);&#xA;&#x9;&#x9;}">
            <statements xsi:type="dbl:Return" concreteSyntax="return canHandleSignal(event as Signal)">
              <value xsi:type="dbl:IdExpr" concreteSyntax="canHandleSignal(event as Signal)" referencedElement="//@module/@classifiers.10/@methods.1">
                <callPart>
                  <callArguments xsi:type="dbl:Cast" concreteSyntax="event as Signal">
                    <classifierType concreteSyntax="Signal" referencedElement="//@module/@classifiers.1"/>
                    <op xsi:type="dbl:IdExpr" concreteSyntax="event" referencedElement="//@module/@classifiers.10/@methods.0/@parameters.0"/>
                  </callArguments>
                </callPart>
              </value>
            </statements>
          </trueCase>
          <falseCase xsi:type="dbl:IfStatement" concreteSyntax="if (event instanceof TimeEvent) {&#xA;&#x9;&#x9;&#x9;return event == assignedFiredTimeEvent;&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;return false;&#xA;&#x9;&#x9;}">
            <condition xsi:type="dbl:InstanceOf" concreteSyntax="event instanceof TimeEvent">
              <op1 xsi:type="dbl:IdExpr" concreteSyntax="event" referencedElement="//@module/@classifiers.10/@methods.0/@parameters.0"/>
              <op2 xsi:type="dbl:TypeAccess" concreteSyntax="TimeEvent">
                <idExpr concreteSyntax="TimeEvent" referencedElement="//@module/@classifiers.2"/>
              </op2>
            </condition>
            <trueCase xsi:type="dbl:LocalScopeStatement" concreteSyntax="{&#xA;&#x9;&#x9;&#x9;return event == assignedFiredTimeEvent;&#xA;&#x9;&#x9;}">
              <statements xsi:type="dbl:Return" concreteSyntax="return event == assignedFiredTimeEvent">
                <value xsi:type="dbl:Equal" concreteSyntax="event == assignedFiredTimeEvent">
                  <op1 xsi:type="dbl:IdExpr" concreteSyntax="event" referencedElement="//@module/@classifiers.10/@methods.0/@parameters.0"/>
                  <op2 xsi:type="dbl:IdExpr" concreteSyntax="assignedFiredTimeEvent" referencedElement="//@module/@classifiers.10/@attributes.1"/>
                </value>
              </statements>
            </trueCase>
            <falseCase xsi:type="dbl:LocalScopeStatement" concreteSyntax="{&#xA;&#x9;&#x9;&#x9;return false;&#xA;&#x9;&#x9;}">
              <statements xsi:type="dbl:Return" concreteSyntax="return false">
                <value xsi:type="dbl:FalseLiteral" concreteSyntax="false"/>
              </statements>
            </falseCase>
          </falseCase>
        </statements>
        <parameters name="event">
          <classifierType concreteSyntax="Event" referencedElement="//@module/@classifiers.0"/>
        </parameters>
      </methods>
      <methods name="canHandleSignal">
        <primitiveType xsi:type="dbl:BoolType"/>
        <statements xsi:type="dbl:Return" concreteSyntax="return false">
          <value xsi:type="dbl:FalseLiteral" concreteSyntax="false"/>
        </statements>
        <parameters name="message">
          <classifierType concreteSyntax="Signal" referencedElement="//@module/@classifiers.1"/>
        </parameters>
      </methods>
      <methods name="reset">
        <primitiveType xsi:type="dbl:VoidType"/>
        <statements xsi:type="dbl:Assignment" concreteSyntax="assignedFiredTimeEvent = null">
          <variable concreteSyntax="assignedFiredTimeEvent">
            <idExpr concreteSyntax="assignedFiredTimeEvent" referencedElement="//@module/@classifiers.10/@attributes.1"/>
          </variable>
          <value xsi:type="dbl:NullLiteral" concreteSyntax="null"/>
        </statements>
      </methods>
      <methods name="executeEffects">
        <primitiveType xsi:type="dbl:VoidType"/>
        <parameters name="context">
          <classifierType concreteSyntax="Object">
            <referencedElement href="../../stdlib.xmi#//@module/@classifiers.1"/>
          </classifierType>
        </parameters>
        <parameters name="event">
          <classifierType concreteSyntax="Event" referencedElement="//@module/@classifiers.0"/>
        </parameters>
      </methods>
      <methods name="getTimeDuration">
        <primitiveType xsi:type="dbl:IntType"/>
        <statements xsi:type="dbl:Return" concreteSyntax="return 0">
          <value xsi:type="dbl:IntLiteral" concreteSyntax="0"/>
        </statements>
      </methods>
      <methods name="isConditionSatisfied">
        <primitiveType xsi:type="dbl:BoolType"/>
        <statements xsi:type="dbl:Return" concreteSyntax="return true">
          <value xsi:type="dbl:TrueLiteral" concreteSyntax="true"/>
        </statements>
      </methods>
    </classifiers>
    <classifiers xsi:type="dbl:ActiveClass" name="Timer" concreteSyntax="active class Timer {&#xA;&#x9;StateMachineRuntime stateMachineRuntime;&#xA;&#x9;CompiledTransition compiledTransition;&#xA;&#x9;boolean cancelled = false;&#xA;&#x9;&#xA;&#x9;void start() {&#xA;&#x9;&#x9;activate self;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void cancel() {&#xA;&#x9;&#x9;cancelled = true;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;actions {&#xA;&#x9;&#x9;advance compiledTransition.getTimeDuration();&#xA;&#x9;&#x9;if (!cancelled) {&#xA;&#x9;&#x9;&#x9;compiledTransition.assignedFiredTimeEvent = new TimeEvent();&#xA;&#x9;&#x9;&#x9;stateMachineRuntime.enterEvent(new TimeEvent());&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}">
      <attributes name="stateMachineRuntime" concreteSyntax="StateMachineRuntime stateMachineRuntime">
        <classifierType concreteSyntax="StateMachineRuntime" referencedElement="//@module/@classifiers.9"/>
      </attributes>
      <attributes name="compiledTransition" concreteSyntax="CompiledTransition compiledTransition">
        <classifierType concreteSyntax="CompiledTransition" referencedElement="//@module/@classifiers.10"/>
      </attributes>
      <attributes name="cancelled" concreteSyntax="boolean cancelled = false">
        <primitiveType xsi:type="dbl:BoolType"/>
        <initialValue xsi:type="dbl:FalseLiteral" concreteSyntax="false"/>
      </attributes>
      <methods name="start">
        <primitiveType xsi:type="dbl:VoidType"/>
        <statements xsi:type="dbl:ActivateObject" concreteSyntax="activate self">
          <objectAccess xsi:type="dbl:IdExpr" concreteSyntax="self">
            <predefinedId xsi:type="dbl:MeLiteral"/>
          </objectAccess>
        </statements>
      </methods>
      <methods name="cancel">
        <primitiveType xsi:type="dbl:VoidType"/>
        <statements xsi:type="dbl:Assignment" concreteSyntax="cancelled = true">
          <variable concreteSyntax="cancelled">
            <idExpr concreteSyntax="cancelled" referencedElement="//@module/@classifiers.11/@attributes.2"/>
          </variable>
          <value xsi:type="dbl:TrueLiteral" concreteSyntax="true"/>
        </statements>
      </methods>
      <actionsBlock>
        <statements xsi:type="dbl:Advance" concreteSyntax="advance compiledTransition.getTimeDuration()">
          <time xsi:type="dbl:IdExpr" concreteSyntax="compiledTransition.getTimeDuration()" referencedElement="//@module/@classifiers.10/@methods.4">
            <parentIdExpr concreteSyntax="compiledTransition" referencedElement="//@module/@classifiers.11/@attributes.1"/>
            <callPart/>
          </time>
        </statements>
        <statements xsi:type="dbl:IfStatement" concreteSyntax="if (!cancelled) {&#xA;&#x9;&#x9;&#x9;compiledTransition.assignedFiredTimeEvent = new TimeEvent();&#xA;&#x9;&#x9;&#x9;stateMachineRuntime.enterEvent(new TimeEvent());&#xA;&#x9;&#x9;}">
          <condition xsi:type="dbl:Not" concreteSyntax="!cancelled">
            <op xsi:type="dbl:IdExpr" concreteSyntax="cancelled" referencedElement="//@module/@classifiers.11/@attributes.2"/>
          </condition>
          <trueCase xsi:type="dbl:LocalScopeStatement" concreteSyntax="{&#xA;&#x9;&#x9;&#x9;compiledTransition.assignedFiredTimeEvent = new TimeEvent();&#xA;&#x9;&#x9;&#x9;stateMachineRuntime.enterEvent(new TimeEvent());&#xA;&#x9;&#x9;}">
            <statements xsi:type="dbl:Assignment" concreteSyntax="compiledTransition.assignedFiredTimeEvent = new TimeEvent()">
              <variable concreteSyntax="compiledTransition.assignedFiredTimeEvent">
                <idExpr concreteSyntax="compiledTransition.assignedFiredTimeEvent" referencedElement="//@module/@classifiers.10/@attributes.1">
                  <parentIdExpr concreteSyntax="compiledTransition" referencedElement="//@module/@classifiers.11/@attributes.1"/>
                </idExpr>
              </variable>
              <value xsi:type="dbl:CreateObject" concreteSyntax="new TimeEvent()">
                <classifierType concreteSyntax="TimeEvent()" referencedElement="//@module/@classifiers.2">
                  <callPart/>
                </classifierType>
              </value>
            </statements>
            <statements xsi:type="dbl:FunctionCall" concreteSyntax="stateMachineRuntime.enterEvent(new TimeEvent())">
              <callIdExpr concreteSyntax="stateMachineRuntime.enterEvent(new TimeEvent())" referencedElement="//@module/@classifiers.9/@methods.4">
                <parentIdExpr concreteSyntax="stateMachineRuntime" referencedElement="//@module/@classifiers.11/@attributes.0"/>
                <callPart>
                  <callArguments xsi:type="dbl:CreateObject" concreteSyntax="new TimeEvent()">
                    <classifierType concreteSyntax="TimeEvent()" referencedElement="//@module/@classifiers.2">
                      <callPart/>
                    </classifierType>
                  </callArguments>
                </callPart>
              </callIdExpr>
            </statements>
          </trueCase>
        </statements>
      </actionsBlock>
    </classifiers>
    <classifiers xsi:type="dbl:ActiveClass" name="ConditionWaiter" concreteSyntax="active class ConditionWaiter {&#xA;&#x9;StateMachineRuntime stateMachineRuntime;&#xA;&#x9;CompiledTransition compiledTransition;&#xA;&#xA;&#x9;actions {&#xA;&#x9;&#x9;wait until compiledTransition.isConditionSatisfied();&#xA;&#x9;}&#xA;}">
      <attributes name="stateMachineRuntime" concreteSyntax="StateMachineRuntime stateMachineRuntime">
        <classifierType concreteSyntax="StateMachineRuntime" referencedElement="//@module/@classifiers.9"/>
      </attributes>
      <attributes name="compiledTransition" concreteSyntax="CompiledTransition compiledTransition">
        <classifierType concreteSyntax="CompiledTransition" referencedElement="//@module/@classifiers.10"/>
      </attributes>
      <actionsBlock>
        <statements xsi:type="dbl:WaitUntil" concreteSyntax="wait until compiledTransition.isConditionSatisfied()">
          <condition xsi:type="dbl:IdExpr" concreteSyntax="compiledTransition.isConditionSatisfied()" referencedElement="//@module/@classifiers.10/@methods.5">
            <parentIdExpr concreteSyntax="compiledTransition" referencedElement="//@module/@classifiers.12/@attributes.1"/>
            <callPart/>
          </condition>
        </statements>
      </actionsBlock>
    </classifiers>
  </module>
</dbl:Model>
