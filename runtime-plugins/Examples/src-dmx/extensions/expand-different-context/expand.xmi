<?xml version="1.0" encoding="ASCII"?>
<dbl:Model xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dbl="http://www.informatik.hu-berlin.de/sam/dbl">
  <imports file="../../dbl">
    <model href="../../dbl.xmi#/"/>
  </imports>
  <module name="expand">
    <extensions name="X">
      <extensionPoint href="../../dbl.xmi#//@module/@classes.33"/>
      <syntaxDefinition startSymbol="//@module/@extensions.0/@syntaxDefinition/@symbols.0">
        <symbols name="XRule">
          <possibleSyntax xsi:type="dbl:SymbolSequence">
            <sequence xsi:type="dbl:PlainSymbolReference">
              <ownedClassifier xsi:type="dbl:Keyword" keyword="x"/>
            </sequence>
            <sequence xsi:type="dbl:PlainSymbolReference">
              <ownedClassifier xsi:type="dbl:Keyword" keyword=";"/>
            </sequence>
          </possibleSyntax>
        </symbols>
      </syntaxDefinition>
    </extensions>
    <extensionSemantics syntaxDefinition="//@module/@extensions.0">
      <statements xsi:type="dbl:Variable" name="container">
        <classifierType>
          <referencedElement href="../../ecore.xmi#//@module/@classes.13"/>
        </classifierType>
        <initialValue xsi:type="dbl:IdExpr" referencedElement="//@module/@functions.0">
          <callPart>
            <callArguments xsi:type="dbl:StringLiteral" value="Function"/>
            <callArguments xsi:type="dbl:IdExpr">
              <predefinedId xsi:type="dbl:MeLiteral"/>
            </callArguments>
          </callPart>
        </initialValue>
      </statements>
      <statements xsi:type="dbl:ExpansionStatement" classContext="true">
        <differingContext referencedElement="//@module/@extensionSemantics.0/@statements.0"/>
        <parts xsi:type="dbl:ExpandTextPart" text="class A { int i=2; }"/>
      </statements>
      <statements xsi:type="dbl:ExpansionStatement">
        <parts xsi:type="dbl:ExpandTextPart" text="A a = new A(); print a.i;"/>
      </statements>
    </extensionSemantics>
    <functions name="getContainer">
      <classifierType>
        <referencedElement href="../../ecore.xmi#//@module/@classes.13"/>
      </classifierType>
      <statements xsi:type="dbl:IfStatement">
        <condition xsi:type="dbl:NotEqual">
          <op1 xsi:type="dbl:IdExpr" referencedElement="//@module/@functions.0/@parameters.1"/>
          <op2 xsi:type="dbl:NullLiteral"/>
        </condition>
        <trueCase xsi:type="dbl:LocalScopeStatement">
          <statements xsi:type="dbl:Variable" name="eClassName">
            <classifierType>
              <referencedElement href="../../stdlib.xmi#//@module/@classes.2"/>
            </classifierType>
            <initialValue xsi:type="dbl:CreateObject">
              <classifierType>
                <referencedElement href="../../stdlib.xmi#//@module/@classes.2"/>
                <callPart>
                  <callArguments xsi:type="dbl:IdExpr">
                    <parentIdExpr>
                      <parentIdExpr referencedElement="//@module/@functions.0/@parameters.1"/>
                      <referencedElement href="../../ecore.xmi#//@module/@classes.13/@methods.1"/>
                      <callPart/>
                    </parentIdExpr>
                    <referencedElement href="../../ecore.xmi#//@module/@classes.9/@methods.0"/>
                    <callPart/>
                  </callArguments>
                </callPart>
              </classifierType>
            </initialValue>
          </statements>
          <statements xsi:type="dbl:IfStatement">
            <condition xsi:type="dbl:IdExpr">
              <parentIdExpr referencedElement="//@module/@functions.0/@statements.0/@trueCase/@statements.0"/>
              <referencedElement href="../../stdlib.xmi#//@module/@classes.1/@methods.0"/>
              <callPart>
                <callArguments xsi:type="dbl:IdExpr" referencedElement="//@module/@functions.0/@parameters.0"/>
              </callPart>
            </condition>
            <trueCase xsi:type="dbl:LocalScopeStatement">
              <statements xsi:type="dbl:Return">
                <value xsi:type="dbl:IdExpr" referencedElement="//@module/@functions.0/@parameters.1"/>
              </statements>
            </trueCase>
            <falseCase xsi:type="dbl:LocalScopeStatement">
              <statements xsi:type="dbl:Return">
                <value xsi:type="dbl:IdExpr" referencedElement="//@module/@functions.0">
                  <callPart>
                    <callArguments xsi:type="dbl:IdExpr" referencedElement="//@module/@functions.0/@parameters.0"/>
                    <callArguments xsi:type="dbl:IdExpr">
                      <parentIdExpr referencedElement="//@module/@functions.0/@parameters.1"/>
                      <referencedElement href="../../ecore.xmi#//@module/@classes.13/@methods.2"/>
                      <callPart/>
                    </callArguments>
                  </callPart>
                </value>
              </statements>
            </falseCase>
          </statements>
        </trueCase>
        <falseCase xsi:type="dbl:LocalScopeStatement">
          <statements xsi:type="dbl:Return">
            <value xsi:type="dbl:NullLiteral"/>
          </statements>
        </falseCase>
      </statements>
      <parameters name="containerName">
        <primitiveType xsi:type="dbl:StringType"/>
      </parameters>
      <parameters name="eObject">
        <classifierType>
          <referencedElement href="../../ecore.xmi#//@module/@classes.13"/>
        </classifierType>
      </parameters>
    </functions>
    <functions name="getContainerModuleNotWorking">
      <classifierType>
        <referencedElement href="../../dbl.xmi#//@module/@classes.4"/>
      </classifierType>
      <statements xsi:type="dbl:IfStatement">
        <condition xsi:type="dbl:NotEqual">
          <op1 xsi:type="dbl:IdExpr" referencedElement="//@module/@functions.1/@parameters.0"/>
          <op2 xsi:type="dbl:NullLiteral"/>
        </condition>
        <trueCase xsi:type="dbl:LocalScopeStatement">
          <statements xsi:type="dbl:IfStatement">
            <condition xsi:type="dbl:InstanceOf">
              <op1 xsi:type="dbl:IdExpr" referencedElement="//@module/@functions.1/@parameters.0"/>
              <op2 xsi:type="dbl:TypeAccess">
                <idExpr>
                  <referencedElement href="../../dbl.xmi#//@module/@classes.4"/>
                </idExpr>
              </op2>
            </condition>
            <trueCase xsi:type="dbl:LocalScopeStatement">
              <statements xsi:type="dbl:Return">
                <value xsi:type="dbl:Cast">
                  <classifierType>
                    <referencedElement href="../../dbl.xmi#//@module/@classes.4"/>
                  </classifierType>
                  <op xsi:type="dbl:IdExpr" referencedElement="//@module/@functions.1/@parameters.0"/>
                </value>
              </statements>
            </trueCase>
            <falseCase xsi:type="dbl:LocalScopeStatement">
              <statements xsi:type="dbl:Return">
                <value xsi:type="dbl:IdExpr" referencedElement="//@module/@functions.1">
                  <callPart>
                    <callArguments xsi:type="dbl:IdExpr">
                      <parentIdExpr referencedElement="//@module/@functions.1/@parameters.0"/>
                      <referencedElement href="../../ecore.xmi#//@module/@classes.13/@methods.2"/>
                      <callPart/>
                    </callArguments>
                  </callPart>
                </value>
              </statements>
            </falseCase>
          </statements>
        </trueCase>
        <falseCase xsi:type="dbl:LocalScopeStatement">
          <statements xsi:type="dbl:Return">
            <value xsi:type="dbl:NullLiteral"/>
          </statements>
        </falseCase>
      </statements>
      <parameters name="eObject">
        <classifierType>
          <referencedElement href="../../ecore.xmi#//@module/@classes.13"/>
        </classifierType>
      </parameters>
    </functions>
  </module>
</dbl:Model>
