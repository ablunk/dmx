<?xml version="1.0" encoding="ASCII"?>
<dbl:Model xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dbl="http://www.informatik.hu-berlin.de/sam/dbl">
  <imports file="ssm2">
    <model href="ssm2.xmi#/"/>
  </imports>
  <imports file="../../stdlib">
    <model href="../../stdlib.xmi#/"/>
  </imports>
  <modules name="simpleProcess">
    <classes name="E" concreteSyntax="class E {&#xA;&#x9;int i = 1;&#xA;}">
      <attributes name="i" concreteSyntax="int i = 1">
        <primitiveType xsi:type="dbl:IntType"/>
        <initialValue xsi:type="dbl:IntLiteral" concreteSyntax="1" value="1"/>
      </attributes>
    </classes>
    <classes name="A" concreteSyntax="active class A {&#xA;&#x9;Object message;&#xA;&#x9;&#xA;&#x9;stateMachine {&#xA;&#x9;&#x9;initial -> s1;&#xA;&#x9;&#x9;state s1 (&#xA;&#x9;&#x9;&#x9;on E e do {&#xA;&#x9;&#x9;&#x9;&#x9;E eMessage = message as E; // this is a workaround because e cannot be accessed from here&#xA;&#x9;&#x9;&#x9;&#x9;print &quot;on E with i=&quot; + eMessage.i + &quot;to s2&quot;;&#xA;&#x9;&#x9;&#x9;} -> s2&#xA;&#x9;&#x9;);&#xA;&#x9;&#x9;state s2 (&#xA;&#x9;&#x9;&#x9;after(1) do { print &quot;after 1 to final&quot;; } -> final&#xA;&#x9;&#x9;);&#xA;&#x9;}&#xA;}" active="true">
      <contentExtensions xsi:type="dbl:StateMachine_StateMachineSyntax_extension" concreteSyntax="stateMachine {&#xA;&#x9;&#x9;initial -> s1;&#xA;&#x9;&#x9;state s1 (&#xA;&#x9;&#x9;&#x9;on E e do {&#xA;&#x9;&#x9;&#x9;&#x9;E eMessage = message as E; // this is a workaround because e cannot be accessed from here&#xA;&#x9;&#x9;&#x9;&#x9;print &quot;on E with i=&quot; + eMessage.i + &quot;to s2&quot;;&#xA;&#x9;&#x9;&#x9;} -> s2&#xA;&#x9;&#x9;);&#xA;&#x9;&#x9;state s2 (&#xA;&#x9;&#x9;&#x9;after(1) do { print &quot;after 1 to final&quot;; } -> final&#xA;&#x9;&#x9;);&#xA;&#x9;}" instanceOfExtensionDefinition="true">
        <initialState concreteSyntax="initial -> s1;" target="//@modules.0/@classes.1/@contentExtensions.0/@states.0"/>
        <states name="s1" concreteSyntax="state s1 (&#xA;&#x9;&#x9;&#x9;on E e do {&#xA;&#x9;&#x9;&#x9;&#x9;E eMessage = message as E; // this is a workaround because e cannot be accessed from here&#xA;&#x9;&#x9;&#x9;&#x9;print &quot;on E with i=&quot; + eMessage.i + &quot;to s2&quot;;&#xA;&#x9;&#x9;&#x9;} -> s2&#xA;&#x9;&#x9;);">
          <outgoingTransitions concreteSyntax="on E e do {&#xA;&#x9;&#x9;&#x9;&#x9;E eMessage = message as E; // this is a workaround because e cannot be accessed from here&#xA;&#x9;&#x9;&#x9;&#x9;print &quot;on E with i=&quot; + eMessage.i + &quot;to s2&quot;;&#xA;&#x9;&#x9;&#x9;} -> s2" target="//@modules.0/@classes.1/@contentExtensions.0/@states.1">
            <trigger concreteSyntax="on E e do {&#xA;&#x9;&#x9;&#x9;&#x9;E eMessage = message as E; // this is a workaround because e cannot be accessed from here&#xA;&#x9;&#x9;&#x9;&#x9;print &quot;on E with i=&quot; + eMessage.i + &quot;to s2&quot;;&#xA;&#x9;&#x9;&#x9;}">
              <variable name="e" concreteSyntax="E e">
                <classifierType concreteSyntax="E" referencedElement="//@modules.0/@classes.0"/>
              </variable>
              <body concreteSyntax="{&#xA;&#x9;&#x9;&#x9;&#x9;E eMessage = message as E; // this is a workaround because e cannot be accessed from here&#xA;&#x9;&#x9;&#x9;&#x9;print &quot;on E with i=&quot; + eMessage.i + &quot;to s2&quot;;&#xA;&#x9;&#x9;&#x9;}">
                <statements xsi:type="dbl:Variable" name="eMessage" concreteSyntax="E eMessage = message as E">
                  <classifierType concreteSyntax="E" referencedElement="//@modules.0/@classes.0"/>
                  <initialValue xsi:type="dbl:Cast" concreteSyntax="message as E">
                    <classifierType concreteSyntax="E" referencedElement="//@modules.0/@classes.0"/>
                    <op xsi:type="dbl:IdExpr" concreteSyntax="message" referencedElement="//@modules.0/@classes.1/@attributes.0"/>
                  </initialValue>
                </statements>
                <statements xsi:type="dbl:Print" concreteSyntax="print &quot;on E with i=&quot; + eMessage.i + &quot;to s2&quot;">
                  <outputs xsi:type="dbl:Plus" concreteSyntax="&quot;on E with i=&quot; + eMessage.i + &quot;to s2&quot;">
                    <op1 xsi:type="dbl:Plus" concreteSyntax="&quot;on E with i=&quot; + eMessage.i">
                      <op1 xsi:type="dbl:StringLiteral" concreteSyntax="&quot;on E with i=&quot;" value="on E with i="/>
                      <op2 xsi:type="dbl:IdExpr" concreteSyntax="eMessage.i" referencedElement="//@modules.0/@classes.0/@attributes.0">
                        <parentIdExpr concreteSyntax="eMessage" referencedElement="//@modules.0/@classes.1/@contentExtensions.0/@states.0/@outgoingTransitions.0/@trigger/@body/@statements.0"/>
                      </op2>
                    </op1>
                    <op2 xsi:type="dbl:StringLiteral" concreteSyntax="&quot;to s2&quot;" value="to s2"/>
                  </outputs>
                </statements>
              </body>
            </trigger>
          </outgoingTransitions>
        </states>
        <states name="s2" concreteSyntax="state s2 (&#xA;&#x9;&#x9;&#x9;after(1) do { print &quot;after 1 to final&quot;; } -> final&#xA;&#x9;&#x9;);">
          <outgoingTransitions concreteSyntax="after(1) do { print &quot;after 1 to final&quot;; } -> final">
            <trigger concreteSyntax="after(1) do { print &quot;after 1 to final&quot;; }">
              <body concreteSyntax="{ print &quot;after 1 to final&quot;; }">
                <statements xsi:type="dbl:Print" concreteSyntax="print &quot;after 1 to final&quot;">
                  <outputs xsi:type="dbl:StringLiteral" concreteSyntax="&quot;after 1 to final&quot;" value="after 1 to final"/>
                </statements>
              </body>
              <duration concreteSyntax="(1)">
                <value xsi:type="dbl:IntLiteral" concreteSyntax="1" value="1"/>
              </duration>
            </trigger>
          </outgoingTransitions>
        </states>
      </contentExtensions>
      <attributes name="message" concreteSyntax="Object message">
        <classifierType concreteSyntax="Object">
          <referencedElement href="../../stdlib.xmi#//@modules.0/@classes.0"/>
        </classifierType>
      </attributes>
    </classes>
    <functions name="main">
      <primitiveType xsi:type="dbl:VoidType"/>
      <statements xsi:type="dbl:Variable" name="a" concreteSyntax="A a = new A()">
        <classifierType concreteSyntax="A" referencedElement="//@modules.0/@classes.1"/>
        <initialValue xsi:type="dbl:CreateObject" concreteSyntax="new A()">
          <classifierType concreteSyntax="A()" referencedElement="//@modules.0/@classes.1">
            <callPart/>
          </classifierType>
        </initialValue>
      </statements>
      <statements xsi:type="dbl:ActivateObject" concreteSyntax="activate a">
        <objectAccess xsi:type="dbl:IdExpr" concreteSyntax="a" referencedElement="//@modules.0/@functions.0/@statements.0"/>
      </statements>
      <statements xsi:type="dbl:Print" concreteSyntax="print &quot;sending E to a&quot;">
        <outputs xsi:type="dbl:StringLiteral" concreteSyntax="&quot;sending E to a&quot;" value="sending E to a"/>
      </statements>
      <statements xsi:type="dbl:SendStatement_SendStatementSyntax_extension" concreteSyntax="send new E() to a;" instanceOfExtensionDefinition="true">
        <signal xsi:type="dbl:CreateObject" concreteSyntax="new E()">
          <classifierType concreteSyntax="E()" referencedElement="//@modules.0/@classes.0">
            <callPart/>
          </classifierType>
        </signal>
        <target xsi:type="dbl:IdExpr" concreteSyntax="a" referencedElement="//@modules.0/@functions.0/@statements.0"/>
      </statements>
    </functions>
  </modules>
</dbl:Model>
