<?xml version="1.0" encoding="ASCII"?>
<dbl:Model xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dbl="http://www.informatik.hu-berlin.de/sam/dbl">
  <imports file="../../stdlib">
    <model href="../../stdlib.xmi#/"/>
  </imports>
  <imports file="ssm-language">
    <model href="ssm-language.xmi#/"/>
  </imports>
  <imports file="ssm-runtime">
    <model href="ssm-runtime.xmi#/"/>
  </imports>
  <module name="ssmSimpleSystem">
    <classes name="Data" concreteSyntax="class Data extends Signal {&#xA;&#x9;string payLoad;&#xA;&#x9;&#xA;&#x9;new(string payLoad) {&#xA;&#x9;&#x9;self.payLoad = payLoad;&#xA;&#x9;}&#xA;}">
      <superClasses href="ssm-runtime.xmi#//@module/@classes.1"/>
      <constructors>
        <statements xsi:type="dbl:Assignment" concreteSyntax="self.payLoad = payLoad">
          <variable concreteSyntax="self.payLoad">
            <idExpr concreteSyntax="self.payLoad" referencedElement="//@module/@classes.0/@constructors.0/@parameters.0">
              <parentIdExpr concreteSyntax="self">
                <predefinedId xsi:type="dbl:MeLiteral"/>
              </parentIdExpr>
            </idExpr>
          </variable>
          <value xsi:type="dbl:IdExpr" concreteSyntax="payLoad" referencedElement="//@module/@classes.0/@constructors.0/@parameters.0"/>
        </statements>
        <parameters name="payLoad">
          <primitiveType xsi:type="dbl:StringType"/>
        </parameters>
      </constructors>
      <attributes name="payLoad" concreteSyntax="string payLoad">
        <primitiveType xsi:type="dbl:StringType"/>
      </attributes>
    </classes>
    <classes name="Delayer" concreteSyntax="class Delayer extends ObjectWithStateMachine {&#xA;&#x9;StateMachineRuntime createStateMachineRuntime(Object context) {StateMachine stateMachine = new StateMachine;stateMachine.context = context;StateMachineRuntime stateMachineRuntime = new StateMachineRuntime(stateMachine);State stateId____module__classes_1__contentExtensions_0 = new State;stateMachine.states.add(stateId____module__classes_1__contentExtensions_0);stateId____module__classes_1__contentExtensions_0.name = &quot;waiting&quot;;stateMachine.initialState = stateId____module__classes_1__contentExtensions_0;CompiledState compiledStateId____module__classes_1__contentExtensions_0 = new CompiledState(stateId____module__classes_1__contentExtensions_0);stateMachineRuntime.setCompiledState(stateId____module__classes_1__contentExtensions_0, compiledStateId____module__classes_1__contentExtensions_0);Transition transitionId____module__classes_1__contentExtensions_0 = new Transition;stateId____module__classes_1__contentExtensions_0.outgoingTransitions.add(transitionId____module__classes_1__contentExtensions_0);transitionId____module__classes_1__contentExtensions_0.target = stateId____module__classes_1__contentExtensions_0;CompiledTransition compiledTransitionId____module__classes_1__contentExtensions_0 = new compiledTransitionClassId____module__classes_1__contentExtensions_0(transitionId____module__classes_1__contentExtensions_0);compiledStateId____module__classes_1__contentExtensions_0.addCompiledTransition(compiledTransitionId____module__classes_1__contentExtensions_0);return stateMachineRuntime;}void transitionEffectsFunctionId____module__classes_1__contentExtensions_0() {{ print &quot;received data\n&quot;; }}&#x9;&#x9;&#xA;}">
      <superClasses href="ssm-runtime.xmi#//@module/@classes.3"/>
      <methods name="createStateMachineRuntime">
        <classifierType concreteSyntax="StateMachineRuntime">
          <referencedElement href="ssm-runtime.xmi#//@module/@classes.8"/>
        </classifierType>
        <statements xsi:type="dbl:Variable" name="stateMachine" concreteSyntax="StateMachine stateMachine = new StateMachine">
          <classifierType concreteSyntax="StateMachine">
            <referencedElement href="ssm-runtime.xmi#//@module/@classes.4"/>
          </classifierType>
          <initialValue xsi:type="dbl:CreateObject" concreteSyntax="new StateMachine">
            <classifierType concreteSyntax="StateMachine">
              <referencedElement href="ssm-runtime.xmi#//@module/@classes.4"/>
            </classifierType>
          </initialValue>
        </statements>
        <statements xsi:type="dbl:Assignment" concreteSyntax="stateMachine.context = context">
          <variable concreteSyntax="stateMachine.context">
            <idExpr concreteSyntax="stateMachine.context" referencedElement="//@module/@classes.1/@methods.0/@parameters.0">
              <parentIdExpr concreteSyntax="stateMachine" referencedElement="//@module/@classes.1/@methods.0/@statements.0"/>
            </idExpr>
          </variable>
          <value xsi:type="dbl:IdExpr" concreteSyntax="context" referencedElement="//@module/@classes.1/@methods.0/@parameters.0"/>
        </statements>
        <statements xsi:type="dbl:Variable" name="stateMachineRuntime" concreteSyntax="StateMachineRuntime stateMachineRuntime = new StateMachineRuntime(stateMachine)">
          <classifierType concreteSyntax="StateMachineRuntime">
            <referencedElement href="ssm-runtime.xmi#//@module/@classes.8"/>
          </classifierType>
          <initialValue xsi:type="dbl:CreateObject" concreteSyntax="new StateMachineRuntime(stateMachine)">
            <classifierType concreteSyntax="StateMachineRuntime(stateMachine)">
              <referencedElement href="ssm-runtime.xmi#//@module/@classes.8"/>
              <callPart>
                <callArguments xsi:type="dbl:IdExpr" concreteSyntax="stateMachine" referencedElement="//@module/@classes.1/@methods.0/@statements.0"/>
              </callPart>
            </classifierType>
          </initialValue>
        </statements>
        <statements xsi:type="dbl:Variable" name="stateId____module__classes_1__contentExtensions_0" concreteSyntax="State stateId____module__classes_1__contentExtensions_0 = new State">
          <classifierType concreteSyntax="State">
            <referencedElement href="ssm-runtime.xmi#//@module/@classes.5"/>
          </classifierType>
          <initialValue xsi:type="dbl:CreateObject" concreteSyntax="new State">
            <classifierType concreteSyntax="State">
              <referencedElement href="ssm-runtime.xmi#//@module/@classes.5"/>
            </classifierType>
          </initialValue>
        </statements>
        <statements xsi:type="dbl:FunctionCall" concreteSyntax="stateMachine.states.add(stateId____module__classes_1__contentExtensions_0)">
          <callIdExpr concreteSyntax="stateMachine.states.add(stateId____module__classes_1__contentExtensions_0)">
            <parentIdExpr concreteSyntax="stateMachine.states">
              <parentIdExpr concreteSyntax="stateMachine" referencedElement="//@module/@classes.1/@methods.0/@statements.0"/>
              <referencedElement href="ssm-runtime.xmi#//@module/@classes.4/@attributes.1"/>
            </parentIdExpr>
            <referencedElement href="../../stdlib.xmi#//@module/@classes.5/@methods.0"/>
            <callPart>
              <callArguments xsi:type="dbl:IdExpr" concreteSyntax="stateId____module__classes_1__contentExtensions_0" referencedElement="//@module/@classes.1/@methods.0/@statements.3"/>
            </callPart>
          </callIdExpr>
        </statements>
        <statements xsi:type="dbl:Assignment" concreteSyntax="stateId____module__classes_1__contentExtensions_0.name = &quot;waiting&quot;">
          <variable concreteSyntax="stateId____module__classes_1__contentExtensions_0.name">
            <idExpr concreteSyntax="stateId____module__classes_1__contentExtensions_0.name">
              <parentIdExpr concreteSyntax="stateId____module__classes_1__contentExtensions_0" referencedElement="//@module/@classes.1/@methods.0/@statements.3"/>
              <referencedElement href="ssm-runtime.xmi#//@module/@classes.5/@attributes.0"/>
            </idExpr>
          </variable>
          <value xsi:type="dbl:StringLiteral" concreteSyntax="&quot;waiting&quot;" value="waiting"/>
        </statements>
        <statements xsi:type="dbl:Assignment" concreteSyntax="stateMachine.initialState = stateId____module__classes_1__contentExtensions_0">
          <variable concreteSyntax="stateMachine.initialState">
            <idExpr concreteSyntax="stateMachine.initialState">
              <parentIdExpr concreteSyntax="stateMachine" referencedElement="//@module/@classes.1/@methods.0/@statements.0"/>
              <referencedElement href="ssm-runtime.xmi#//@module/@classes.4/@attributes.2"/>
            </idExpr>
          </variable>
          <value xsi:type="dbl:IdExpr" concreteSyntax="stateId____module__classes_1__contentExtensions_0" referencedElement="//@module/@classes.1/@methods.0/@statements.3"/>
        </statements>
        <statements xsi:type="dbl:Variable" name="compiledStateId____module__classes_1__contentExtensions_0" concreteSyntax="CompiledState compiledStateId____module__classes_1__contentExtensions_0 = new CompiledState(stateId____module__classes_1__contentExtensions_0)">
          <classifierType concreteSyntax="CompiledState">
            <referencedElement href="ssm-runtime.xmi#//@module/@classes.7"/>
          </classifierType>
          <initialValue xsi:type="dbl:CreateObject" concreteSyntax="new CompiledState(stateId____module__classes_1__contentExtensions_0)">
            <classifierType concreteSyntax="CompiledState(stateId____module__classes_1__contentExtensions_0)">
              <referencedElement href="ssm-runtime.xmi#//@module/@classes.7"/>
              <callPart>
                <callArguments xsi:type="dbl:IdExpr" concreteSyntax="stateId____module__classes_1__contentExtensions_0" referencedElement="//@module/@classes.1/@methods.0/@statements.3"/>
              </callPart>
            </classifierType>
          </initialValue>
        </statements>
        <statements xsi:type="dbl:FunctionCall" concreteSyntax="stateMachineRuntime.setCompiledState(stateId____module__classes_1__contentExtensions_0, compiledStateId____module__classes_1__contentExtensions_0)">
          <callIdExpr concreteSyntax="stateMachineRuntime.setCompiledState(stateId____module__classes_1__contentExtensions_0, compiledStateId____module__classes_1__contentExtensions_0)">
            <parentIdExpr concreteSyntax="stateMachineRuntime" referencedElement="//@module/@classes.1/@methods.0/@statements.2"/>
            <referencedElement href="ssm-runtime.xmi#//@module/@classes.8/@methods.0"/>
            <callPart>
              <callArguments xsi:type="dbl:IdExpr" concreteSyntax="stateId____module__classes_1__contentExtensions_0" referencedElement="//@module/@classes.1/@methods.0/@statements.3"/>
              <callArguments xsi:type="dbl:IdExpr" concreteSyntax="compiledStateId____module__classes_1__contentExtensions_0" referencedElement="//@module/@classes.1/@methods.0/@statements.7"/>
            </callPart>
          </callIdExpr>
        </statements>
        <statements xsi:type="dbl:Variable" name="transitionId____module__classes_1__contentExtensions_0" concreteSyntax="Transition transitionId____module__classes_1__contentExtensions_0 = new Transition">
          <classifierType concreteSyntax="Transition">
            <referencedElement href="ssm-runtime.xmi#//@module/@classes.6"/>
          </classifierType>
          <initialValue xsi:type="dbl:CreateObject" concreteSyntax="new Transition">
            <classifierType concreteSyntax="Transition">
              <referencedElement href="ssm-runtime.xmi#//@module/@classes.6"/>
            </classifierType>
          </initialValue>
        </statements>
        <statements xsi:type="dbl:FunctionCall" concreteSyntax="stateId____module__classes_1__contentExtensions_0.outgoingTransitions.add(transitionId____module__classes_1__contentExtensions_0)">
          <callIdExpr concreteSyntax="stateId____module__classes_1__contentExtensions_0.outgoingTransitions.add(transitionId____module__classes_1__contentExtensions_0)">
            <parentIdExpr concreteSyntax="stateId____module__classes_1__contentExtensions_0.outgoingTransitions">
              <parentIdExpr concreteSyntax="stateId____module__classes_1__contentExtensions_0" referencedElement="//@module/@classes.1/@methods.0/@statements.3"/>
              <referencedElement href="ssm-runtime.xmi#//@module/@classes.5/@attributes.1"/>
            </parentIdExpr>
            <referencedElement href="../../stdlib.xmi#//@module/@classes.5/@methods.0"/>
            <callPart>
              <callArguments xsi:type="dbl:IdExpr" concreteSyntax="transitionId____module__classes_1__contentExtensions_0" referencedElement="//@module/@classes.1/@methods.0/@statements.9"/>
            </callPart>
          </callIdExpr>
        </statements>
        <statements xsi:type="dbl:Assignment" concreteSyntax="transitionId____module__classes_1__contentExtensions_0.target = stateId____module__classes_1__contentExtensions_0">
          <variable concreteSyntax="transitionId____module__classes_1__contentExtensions_0.target">
            <idExpr concreteSyntax="transitionId____module__classes_1__contentExtensions_0.target">
              <parentIdExpr concreteSyntax="transitionId____module__classes_1__contentExtensions_0" referencedElement="//@module/@classes.1/@methods.0/@statements.9"/>
              <referencedElement href="ssm-runtime.xmi#//@module/@classes.6/@attributes.0"/>
            </idExpr>
          </variable>
          <value xsi:type="dbl:IdExpr" concreteSyntax="stateId____module__classes_1__contentExtensions_0" referencedElement="//@module/@classes.1/@methods.0/@statements.3"/>
        </statements>
        <statements xsi:type="dbl:Variable" name="compiledTransitionId____module__classes_1__contentExtensions_0" concreteSyntax="CompiledTransition compiledTransitionId____module__classes_1__contentExtensions_0 = new compiledTransitionClassId____module__classes_1__contentExtensions_0(transitionId____module__classes_1__contentExtensions_0)">
          <classifierType concreteSyntax="CompiledTransition">
            <referencedElement href="ssm-runtime.xmi#//@module/@classes.9"/>
          </classifierType>
          <initialValue xsi:type="dbl:CreateObject" concreteSyntax="new compiledTransitionClassId____module__classes_1__contentExtensions_0(transitionId____module__classes_1__contentExtensions_0)">
            <classifierType concreteSyntax="compiledTransitionClassId____module__classes_1__contentExtensions_0(transitionId____module__classes_1__contentExtensions_0)" referencedElement="//@module/@classes.2">
              <callPart>
                <callArguments xsi:type="dbl:IdExpr" concreteSyntax="transitionId____module__classes_1__contentExtensions_0" referencedElement="//@module/@classes.1/@methods.0/@statements.9"/>
              </callPart>
            </classifierType>
          </initialValue>
        </statements>
        <statements xsi:type="dbl:FunctionCall" concreteSyntax="compiledStateId____module__classes_1__contentExtensions_0.addCompiledTransition(compiledTransitionId____module__classes_1__contentExtensions_0)">
          <callIdExpr concreteSyntax="compiledStateId____module__classes_1__contentExtensions_0.addCompiledTransition(compiledTransitionId____module__classes_1__contentExtensions_0)">
            <parentIdExpr concreteSyntax="compiledStateId____module__classes_1__contentExtensions_0" referencedElement="//@module/@classes.1/@methods.0/@statements.7"/>
            <referencedElement href="ssm-runtime.xmi#//@module/@classes.7/@methods.5"/>
            <callPart>
              <callArguments xsi:type="dbl:IdExpr" concreteSyntax="compiledTransitionId____module__classes_1__contentExtensions_0" referencedElement="//@module/@classes.1/@methods.0/@statements.12"/>
            </callPart>
          </callIdExpr>
        </statements>
        <statements xsi:type="dbl:Return" concreteSyntax="return stateMachineRuntime">
          <value xsi:type="dbl:IdExpr" concreteSyntax="stateMachineRuntime" referencedElement="//@module/@classes.1/@methods.0/@statements.2"/>
        </statements>
        <parameters name="context">
          <classifierType concreteSyntax="Object">
            <referencedElement href="../../stdlib.xmi#//@module/@classes.1"/>
          </classifierType>
        </parameters>
      </methods>
      <methods name="transitionEffectsFunctionId____module__classes_1__contentExtensions_0">
        <primitiveType xsi:type="dbl:VoidType"/>
        <statements xsi:type="dbl:LocalScopeStatement" concreteSyntax="{ print &quot;received data\n&quot;; }">
          <statements xsi:type="dbl:Print" concreteSyntax="print &quot;received data\n&quot;">
            <outputs xsi:type="dbl:StringLiteral" concreteSyntax="&quot;received data\n&quot;" value="received data\n"/>
          </statements>
        </statements>
      </methods>
    </classes>
    <classes name="compiledTransitionClassId____module__classes_1__contentExtensions_0" concreteSyntax="class compiledTransitionClassId____module__classes_1__contentExtensions_0 extends CompiledTransition {new(Transition transition) {&#x9;super(transition);}void executeEffects(Object context, Event event) {&#x9;Delayer concreteContext = context as Delayer;&#x9;concreteContext.transitionEffectsFunctionId____module__classes_1__contentExtensions_0();}}">
      <superClasses href="ssm-runtime.xmi#//@module/@classes.9"/>
      <constructors>
        <statements xsi:type="dbl:FunctionCall" concreteSyntax="super(transition)">
          <callIdExpr concreteSyntax="super(transition)">
            <predefinedId xsi:type="dbl:SuperLiteral"/>
            <callPart>
              <callArguments xsi:type="dbl:IdExpr" concreteSyntax="transition" referencedElement="//@module/@classes.2/@constructors.0/@parameters.0"/>
            </callPart>
          </callIdExpr>
        </statements>
        <parameters name="transition">
          <classifierType concreteSyntax="Transition">
            <referencedElement href="ssm-runtime.xmi#//@module/@classes.6"/>
          </classifierType>
        </parameters>
      </constructors>
      <methods name="executeEffects">
        <primitiveType xsi:type="dbl:VoidType"/>
        <statements xsi:type="dbl:Variable" name="concreteContext" concreteSyntax="Delayer concreteContext = context as Delayer">
          <classifierType concreteSyntax="Delayer" referencedElement="//@module/@classes.1"/>
          <initialValue xsi:type="dbl:Cast" concreteSyntax="context as Delayer">
            <classifierType concreteSyntax="Delayer" referencedElement="//@module/@classes.1"/>
            <op xsi:type="dbl:IdExpr" concreteSyntax="context" referencedElement="//@module/@classes.2/@methods.0/@parameters.0"/>
          </initialValue>
        </statements>
        <statements xsi:type="dbl:FunctionCall" concreteSyntax="concreteContext.transitionEffectsFunctionId____module__classes_1__contentExtensions_0()">
          <callIdExpr concreteSyntax="concreteContext.transitionEffectsFunctionId____module__classes_1__contentExtensions_0()" referencedElement="//@module/@classes.1/@methods.1">
            <parentIdExpr concreteSyntax="concreteContext" referencedElement="//@module/@classes.2/@methods.0/@statements.0"/>
            <callPart/>
          </callIdExpr>
        </statements>
        <parameters name="context">
          <classifierType concreteSyntax="Object">
            <referencedElement href="../../stdlib.xmi#//@module/@classes.1"/>
          </classifierType>
        </parameters>
        <parameters name="event">
          <classifierType concreteSyntax="Event">
            <referencedElement href="ssm-runtime.xmi#//@module/@classes.0"/>
          </classifierType>
        </parameters>
      </methods>
    </classes>
    <functions name="main">
      <primitiveType xsi:type="dbl:VoidType"/>
      <statements xsi:type="dbl:Variable" name="delayer" concreteSyntax="Delayer delayer = new Delayer">
        <classifierType concreteSyntax="Delayer" referencedElement="//@module/@classes.1"/>
        <initialValue xsi:type="dbl:CreateObject" concreteSyntax="new Delayer">
          <classifierType concreteSyntax="Delayer" referencedElement="//@module/@classes.1"/>
        </initialValue>
      </statements>
      <statements xsi:type="dbl:ActivateObject" concreteSyntax="activate delayer">
        <objectAccess xsi:type="dbl:IdExpr" concreteSyntax="delayer" referencedElement="//@module/@functions.0/@statements.0"/>
      </statements>
      <statements xsi:type="dbl:Advance" concreteSyntax="advance 1">
        <time xsi:type="dbl:IntLiteral" concreteSyntax="1" value="1"/>
      </statements>
      <statements xsi:type="dbl:FunctionCall" concreteSyntax="delayer.sendSignal(new Data(&quot;blob&quot;))">
        <callIdExpr concreteSyntax="delayer.sendSignal(new Data(&quot;blob&quot;))">
          <parentIdExpr concreteSyntax="delayer" referencedElement="//@module/@functions.0/@statements.0"/>
          <referencedElement href="ssm-runtime.xmi#//@module/@classes.3/@methods.1"/>
          <callPart>
            <callArguments xsi:type="dbl:CreateObject" concreteSyntax="new Data(&quot;blob&quot;)">
              <classifierType concreteSyntax="Data(&quot;blob&quot;)" referencedElement="//@module/@classes.0">
                <callPart>
                  <callArguments xsi:type="dbl:StringLiteral" concreteSyntax="&quot;blob&quot;" value="blob"/>
                </callPart>
              </classifierType>
            </callArguments>
          </callPart>
        </callIdExpr>
      </statements>
      <statements xsi:type="dbl:Advance" concreteSyntax="advance 10">
        <time xsi:type="dbl:IntLiteral" concreteSyntax="10" value="10"/>
      </statements>
    </functions>
  </module>
</dbl:Model>
