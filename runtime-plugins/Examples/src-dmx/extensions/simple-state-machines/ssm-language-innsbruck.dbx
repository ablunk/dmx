#import "../../dbl"
#import "../../stdx/foreach"

module ssm {

/*extension Signal extends dbl ModuleContentExtension {
	start SignalSyntax;
	SignalSyntax -> "signal" name:ID ";";
}

semantics for Signal {
	expand "class " name " {}";
}*/

extension SendStatement extends dbl SimpleStatement {
	start SendStatementSyntax;
	SendStatementSyntax -> "send" signal:Expression "to" target:Expression ";";
}

semantics for SendStatement {
	// TODO is place still working?
	expand "place " signal " into " target ".eventPool;";
	expand "reactivate " target ";";
}

extension StateMachine extends dbl ClassContentExtension {
	start StateMachineSyntax;
	
	StateMachineSyntax -> "stateMachine" name:ID "{" initialState:InitialState StateListOptional "}";
	
	StateListOptional -> ;
	StateListOptional -> states : list State StateListOptional;
	
	InitialState -> "initial" EffectsOptional "->" target:$$State ";";
	State -> "state" name:ID TransitionsOptional ";";
	
	TransitionsOptional -> ;
	TransitionsOptional -> "(" OutgoingList ")";
	
	OutgoingList -> outgoing : list Transition OutgoingListOptional;
	OutgoingListOptional -> ;
	OutgoingListOptional -> "," OutgoingList;

	Transition -> trigger:Trigger GuardOptional EffectsOptional TargetStateOptional;
	
	Trigger -> ;
	Trigger -> signalEvent:$Clazz;
	Trigger -> "after" timeEvent:TimeEvent;
	TimeEvent -> "(" delay:Expression ")"; 
	
	GuardOptional -> ;
	GuardOptional -> "[" condition:Expression "]";
	
	EffectsOptional -> ;
	EffectsOptional -> "/" effect:CodeBlock;
	
	//TargetStateOptional -> ;
	TargetStateOptional -> "->" target:$$State;
	TargetStateOptional -> "->" "final";
}

semantics for StateMachine {
		// runtime data
		expand "
			list(Object) eventPool;
			string currentState;
			boolean firstRun = true;
		";
		
		expand "
			initial {
				currentState = \"" initialState.target.name "\";
		";

		if (initialState.effect != null) {
			foreach (Statement stm in initialState.effect.getStatements()) {
				expand "" stm.getConcreteSyntax() ";";
			}
		}
		
		expand "
			}
		";
		
		// state machine behavior
		expand "
			actions {
				Timer timer;
				
				while (currentState != null) {
					if (timer != null) {
						timer.invalid = true;
					}
		";
		
		foreach (State state in states) {
			expand "if (currentState == \"" state.name "\") {";
			foreach (Transition tr in state.outgoing) {
				if (tr.trigger.signalEvent == null and tr.trigger.timeEvent == null) {
					// completion event
					
					// handle guard
					if (tr.condition != null) {
						expand "if (" tr.condition ") {";
					}
					
					if (tr.effect != null) {
						foreach (Statement stm in tr.effect.getStatements()) {
							expand "" stm.getConcreteSyntax() ";";
						}
					}
					
					if (tr.target != null) {
						expand "	currentState = \"" tr.target.name "\";";
					}
					else {
						// target is final state
						expand "	currentState = null;";
					}
					expand "continue;"; // goon
					
					if (tr.condition != null) {
						expand "}";
					}
				}
			
				if (tr.trigger.timeEvent != null) {
					expand "
						timer = new Timer;
						timer.delay = " tr.trigger.timeEvent.delay ";
						timer.sm = self;
						activate timer;
					";
				}
			}
			expand "}";
		}

		expand "
					if (!firstRun) {
						empty eventPool;
						wait;
					}
					else {
						firstRun = false;
					}
					
					while (eventPool.size > 0 and currentState != null) {
						Object ev = eventPool.first;
						remove ev from eventPool;
		";
		
		foreach (State state in states) {
			expand "if (currentState == \"" state.name "\") {";
			foreach (Transition tr in state.outgoing) {
				if (tr.trigger.signalEvent != null or tr.trigger.timeEvent != null) {
					if (tr.trigger.signalEvent != null) {
						expand "if (ev instanceof " tr.trigger.signalEvent ") {";
					}
					else {
						// time event
						expand "if (ev instanceof Timer) {";
					}

					// handle guard
					if (tr.condition != null) {
						expand "if (" tr.condition ") {";
					}
					
					if (tr.effect != null) {
						foreach (Statement stm in tr.effect.getStatements()) {
							expand "" stm.getConcreteSyntax() ";";
						}
					}
					if (tr.target != null) {
						expand "	currentState = \"" tr.target.name "\";";
					}
					else {
						// target is final state
						expand "	currentState = null;";
					}
					expand "break;"; // goon
	
					// handle guard
					if (tr.condition != null) {
						expand "}";
					}
	
					expand "}";
				}			

			}
			expand "}";
		}
		
		expand "
					} // end while (eventPool ...

				} // end while (true ...
			} // end actions
		";
		
		ClassContentExtension ext = self;
		ClassSimilar classSimilar = ext.eContainer() as ClassSimilar;
		Module mod = classSimilar.eContainer() as Module;
		Clazz clazz = classSimilar as Clazz;			
		
		// DONT USE resetGenContext, there is a bug, its not working
		setGenContext after mod.getClassifiers().first;
		gen "
			active class Timer {
				" clazz.getName() " sm;
				int delay = 1;
				boolean invalid = false;
				
				actions {
					advance delay;
					if (!invalid) {
						place self into sm.eventPool;
						reactivate sm;
					}
				}
			}
		";
}

}