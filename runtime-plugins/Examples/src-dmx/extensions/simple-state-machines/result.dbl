#import "../../stdlib"
#import "ssm-language"
#import "ssm-runtime"

module ssmSimpleSystem;

class Data extends Signal {
	string payLoad;
	
	new(string payLoad) {
		self.payLoad;
	}
}

void main() {
	Delayer delayer = new Delayer;
	activate delayer;
	advance 10;
}

class Delayer extends ObjectWithStateMachine {
	StateMachineRuntime createStateMachineRuntime(Object context) {StateMachine stateMachine = new StateMachine;stateMachine.context = context;StateMachineRuntime stateMachineRuntime = new StateMachineRuntime(stateMachine);State stateId____module__classes_1__contentExtensions_0 = new State;stateMachine.states.add(stateId____module__classes_1__contentExtensions_0);stateId____module__classes_1__contentExtensions_0.name = "waiting";CompiledState compiledStateId____module__classes_1__contentExtensions_0 = new CompiledState(stateId____module__classes_1__contentExtensions_0);stateMachineRuntime.setCompiledState(stateId____module__classes_1__contentExtensions_0, compiledStateId____module__classes_1__contentExtensions_0);Transition transitionId____module__classes_1__contentExtensions_0 = new Transition;states.outgoing.add(transitionId____module__classes_1__contentExtensions_0);transitionId____module__classes_1__contentExtensions_0.target = "stateId____module__classes_1__contentExtensions_0";CompiledTransition compiledTransitionId____module__classes_1__contentExtensions_0 = new compiledTransitionClassId____module__classes_1__contentExtensions_0(transitionId____module__classes_1__contentExtensions_0);compiledStateId____module__classes_1__contentExtensions_0.addCompiledTransition(compiledTransitionId____module__classes_1__contentExtensions_0);return stateMachineRuntime;}		
}

void transitionEffectsFunctionId____module__classes_1__contentExtensions_0() {
	{ print "received data\n"; }
}

class compiledTransitionClassId____module__classes_1__contentExtensions_0 extends CompiledTransition {
	void executeEffects(Object context, Event event) {
		Delayer concreteContext = context as Delayer;	
		concreteContext.
