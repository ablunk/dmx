#import "ssm2"
#import "../../stdlib"

module productionProcess {

RingGenerator ringGenerator;
Machine machine;

void main() {
	machine = new Machine();
	activate machine;
	
	ringGenerator = new RingGenerator();
	activate ringGenerator;
	
	advance 100;
}

active class Ring {
	int number;
	
	new(int _number) {
		number = _number;
	}
	
	stateMachine {
		initial -> acquireMachine;
		state acquireMachine (
			after(1) do { // workaround because we have no entry actions
				print "ring #" + number + " waits for machine";
				send self to machine;
			} -> unprocessed
		);
		state unprocessed (
			on Processed p do {
				print "ring #" + number + " processed";
			} -> final
		);
	}
}

active class RingGenerator {
	int nextNumber = 1;
	
	stateMachine {
		initial -> waiting;
		state waiting (
			after(10) do {
				activate new Ring(nextNumber);
			} -> waiting
		);
	}
}

class Processed {}

active class Machine {
	List waitingRings = new ArrayList;
	Ring ringInProcess = null;
	int processingTime = 5;
	Object message;
		
	stateMachine {
		initial -> idle;
		state idle (
			on Ring ring do {
				Ring ring = message as Ring;
				ringInProcess = ring;
			} -> processing
		);
		state processing (
			after(processingTime) do {
				send new Processed() to ringInProcess;
				ringInProcess = null;
				if (waitingRings.size() > 0) {
					ringInProcess = waitingRings.get(0);
					waitingRings.remove(ringInProcess);
				}
			} -> idle,
			on Ring otherRing do {
				Ring otherRing = message as Ring;
				waitingRings.add(otherRing);
			} -> processing
		);
	}
}

}