#import "../../stdlib"
#import "../../dbl"

module ssmRuntime {

// dbx files cannot be imported at the moment.
// therefore, all runtime structures have to be placed in a dbl file.

class AsynchService {
	StateMachineRuntime stateMachineRuntime;
	
	void enterEvent(Object event) {
		stateMachineRuntime.enterEvent(event);
	}
}

// syntax classes are auto-generated from the syntax definition of an extension
class StateMachine {
	Object context;
	List states;
	State initialState;
	
	new(State initialState, List states) {
		self.initialState = initialState;
		if (states != null) self.states = states;
		else self.states = new ArrayList;	
	}
}

class State {
	string name;
	List outgoingTransitions;
	
	new(string name, List outgoingTransitions) {
		self.name = name;
		self.outgoingTransitions = outgoingTransitions;
	}
}

class Transition {
	State target;
	Variable messageVariable;
	Expression timeDuration;
	SimpleStatement effects;
}

// TODO like in Java, each class should extend Object implicitly
// class must be placed before StateMachineRuntime because of the equals methods used there.
class CompiledState extends Object {
	State state;
	List compiledTransitions;
	List timers;
	
	new(State state) {
		self.state = state;
	}
	
	void enter() {
		startTimers();
	}
	
	void startTimers() {
		for (int i=0; i<timers.size(); i=i+1) {
			Timer timer = timers.get(i);
			timer.start();
		}
	}
	
	void leave() {
		cancelRunningTimers();
	}
	
	void cancelRunningTimers() {
		for (int i=0; i<timers.size(); i=i+1) {
			Timer timer = timers.get(i);
			timer.cancel();
		}
	}
	
	void addTimer(Timer timer) {
		timers.add(timer);
	}
	
	void addCompiledTransition(CompiledTransition compiledTransition) {
		compiledTransitions.add(compiledTransition);
	}
	
	State consumeEvent(Object event, Object context) {
		for (int i=0; i<compiledTransitions; i=i+1) {
			CompiledTransition compiledTransition = compiledTransitions.get(i);
			
			if (compiledTransition.canHandle(event)) {
				compiledTransition.executeEffects(context, event);
				Transition transition = compiledTransition.transition;
				return transition.target;
			}
		}
		return null;		
	}	
}

// runtime classes are manually defined
active class StateMachineRuntime {
	StateMachine stateMachine;
	
	Map stateToCompiledState = new HashMap;
	List eventQueue = new ArrayList;
	CompiledState currentState;
	
	new(StateMachine stateMachine) {
		self.stateMachine = stateMachine;
	}
	
	void setCompiledState(State state, CompiledState compiledState) {
		stateToCompiledState.put(state, new CompiledState(state));
	}

	actions {
		currentState = stateToCompiledState.get(stateMachine.initialState);
		executeEventLoop();
	}
	
	void executeEventLoop() {
		while (currentState != null and !eventQueue.isEmpty()) {
			Object nextEvent = popNextEvent();
			State nextState = currentState.consumeEvent(nextEvent, stateMachine.context);
			CompiledState compiledNextState = stateToCompiledState.get(nextState);
			currentState = compiledNextState;
			if (!currentState.equals(compiledNextState)) {
				currentState.leave();
			}
			currentState.enter();
			wait;
		}
	}
	
	Object popNextEvent() {
		Object nextEvent = eventQueue.get(0);
		eventQueue.remove(nextEvent);
		return nextEvent;
	}
	
	void enterEvent(Object event) {
		eventQueue.add(event);
		reactivate self;
	}
}

class CompiledTransition {
	Transition transition;
	
	new(Transition transition) {
		self.transition = transition;
	}
	
	boolean canHandle(Object event) {
		if (isMessageEvent(event) and transition.messageVariable != null) {
			return canHandleMessage(event);
		}
	}
	
	boolean isMessageEvent(Object event) {
		return !(event instanceof Timer);
	}
	
	boolean canHandleMessage(Object message) {
		return false;
	}
	
	void executeEffects(Object context, Object event) {
		// to be overridden
	}
	
	void interpreteEffects(Object context) {
	}
	
	int getTimeDuration() {
		// to be overridden
		return 0;
	}
}

active class Timer {
	StateMachineRuntime stateMachineRuntime;
	CompiledTransition compiledTransition;
	boolean cancelled = false;
	
	void fired() {
		stateMachineRuntime.enterEvent(self);
	}
	
	void executeEffects(Object context, Object event) {
		if (!cancelled) {
			compiledTransition.executeEffects(context, event);
		}
	}
	
	void start() {
		activate self;
	}
	
	void cancel() {
		cancelled = true;
	}
	
	actions {
		advance compiledTransition.getTimeDuration();
	}
}

}