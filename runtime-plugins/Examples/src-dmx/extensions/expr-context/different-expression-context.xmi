<?xml version="1.0" encoding="ASCII"?>
<dbl:Model xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dbl="http://www.informatik.hu-berlin.de/sam/dbl">
  <imports file="../../dbl">
    <model href="../../dbl.xmi#/"/>
  </imports>
  <module name="differentExpressionContext">
    <classifiers xsi:type="dbl:Interface" name="EcoreUtil" concreteSyntax="interface EcoreUtil {&#xA;&#x9;bindings {&#xA;&#x9;&#x9;&quot;java&quot; -> &quot;org.eclipse.emf.ecore.util.EcoreUtil&quot;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;static EObject copy(EObject eObject);&#x9;&#xA;}">
      <methods name="copy" class="true">
        <classifierType concreteSyntax="EObject">
          <referencedElement href="../../ecore.xmi#//@module/@classifiers.13"/>
        </classifierType>
        <parameters name="eObject">
          <classifierType concreteSyntax="EObject">
            <referencedElement href="../../ecore.xmi#//@module/@classifiers.13"/>
          </classifierType>
        </parameters>
      </methods>
      <bindings targetLanguage="java" targetType="org.eclipse.emf.ecore.util.EcoreUtil"/>
    </classifiers>
    <extensions name="ContextChange" concreteSyntax="extension ContextChange extends dbl SimpleStatement {&#xA;&#x9;start ContextChangeRule;&#xA;&#x9;ContextChangeRule -> &quot;context&quot; newContext:IdExpr &quot;{&quot; statements : list Statement &quot;}&quot;;&#xA;}">
      <extensionPoint href="../../dbl.xmi#//@module/@classifiers.37"/>
      <syntaxDefinition concreteSyntax="{&#xA;&#x9;start ContextChangeRule;&#xA;&#x9;ContextChangeRule -> &quot;context&quot; newContext:IdExpr &quot;{&quot; statements : list Statement &quot;}&quot;;&#xA;}" startSymbol="//@module/@extensions.0/@syntaxDefinition/@symbols.0">
        <symbols name="ContextChangeRule" concreteSyntax="ContextChangeRule -> &quot;context&quot; newContext:IdExpr &quot;{&quot; statements : list Statement &quot;}&quot;;">
          <possibleSyntax xsi:type="dbl:SymbolSequence">
            <sequence xsi:type="dbl:PlainSymbolReference">
              <ownedClassifier xsi:type="dbl:Keyword" concreteSyntax="&quot;context&quot;" keyword="context"/>
            </sequence>
            <sequence xsi:type="dbl:StructuralSymbolReference" name="newContext">
              <referencedClassifier href="../../dbl.xmi#//@module/@classifiers.104"/>
            </sequence>
            <sequence xsi:type="dbl:PlainSymbolReference">
              <ownedClassifier xsi:type="dbl:Keyword" concreteSyntax="&quot;{&quot;" keyword="{"/>
            </sequence>
            <sequence xsi:type="dbl:StructuralSymbolReference" name="statements" list="true">
              <referencedClassifier href="../../dbl.xmi#//@module/@classifiers.35"/>
            </sequence>
            <sequence xsi:type="dbl:PlainSymbolReference">
              <ownedClassifier xsi:type="dbl:Keyword" concreteSyntax="&quot;}&quot;" keyword="}"/>
            </sequence>
          </possibleSyntax>
        </symbols>
      </syntaxDefinition>
    </extensions>
    <extensionSemantics concreteSyntax="semantics for ContextChange {&#xA;&#x9;addContextToNavigationExpressions(statements, newContext);&#xA;&#x9;for (int i=0; i&lt;statements.size(); i=i+1) {&#xA;&#x9;&#x9;Statement statement = statements.get(0) as Statement;&#xA;&#x9;&#x9;expand prettyPrint(statement);&#xA;&#x9;}&#xA;}" syntaxDefinition="//@module/@extensions.0">
      <statements xsi:type="dbl:FunctionCall" concreteSyntax="addContextToNavigationExpressions(statements, newContext)">
        <callIdExpr concreteSyntax="addContextToNavigationExpressions(statements, newContext)" referencedElement="//@module/@functions.0">
          <callPart>
            <callArguments xsi:type="dbl:IdExpr" concreteSyntax="statements" referencedElement="//@module/@extensions.0/@syntaxDefinition/@symbols.0/@possibleSyntax/@sequence.3"/>
            <callArguments xsi:type="dbl:IdExpr" concreteSyntax="newContext" referencedElement="//@module/@extensions.0/@syntaxDefinition/@symbols.0/@possibleSyntax/@sequence.1"/>
          </callPart>
        </callIdExpr>
      </statements>
      <statements xsi:type="dbl:ForStatement" concreteSyntax="for (int i=0; i&lt;statements.size(); i=i+1) {&#xA;&#x9;&#x9;Statement statement = statements.get(0) as Statement;&#xA;&#x9;&#x9;expand prettyPrint(statement);&#xA;&#x9;}">
        <statements xsi:type="dbl:Variable" name="i" concreteSyntax="int i=0">
          <primitiveType xsi:type="dbl:IntType"/>
          <initialValue xsi:type="dbl:IntLiteral" concreteSyntax="0"/>
        </statements>
        <termination xsi:type="dbl:Less" concreteSyntax="i&lt;statements.size()">
          <op1 xsi:type="dbl:IdExpr" concreteSyntax="i" referencedElement="//@module/@extensionSemantics.0/@statements.1/@statements.0"/>
          <op2 xsi:type="dbl:IdExpr" concreteSyntax="statements.size()">
            <parentIdExpr concreteSyntax="statements" referencedElement="//@module/@extensions.0/@syntaxDefinition/@symbols.0/@possibleSyntax/@sequence.3"/>
            <referencedElement href="../../stdlib.xmi#//@module/@classifiers.5/@methods.4"/>
            <callPart/>
          </op2>
        </termination>
        <increment concreteSyntax="i=i+1">
          <variable concreteSyntax="i">
            <idExpr concreteSyntax="i" referencedElement="//@module/@extensionSemantics.0/@statements.1/@statements.0"/>
          </variable>
          <value xsi:type="dbl:Plus" concreteSyntax="i+1">
            <op1 xsi:type="dbl:IdExpr" concreteSyntax="i" referencedElement="//@module/@extensionSemantics.0/@statements.1/@statements.0"/>
            <op2 xsi:type="dbl:IntLiteral" concreteSyntax="1" value="1"/>
          </value>
        </increment>
        <body xsi:type="dbl:LocalScopeStatement" concreteSyntax="{&#xA;&#x9;&#x9;Statement statement = statements.get(0) as Statement;&#xA;&#x9;&#x9;expand prettyPrint(statement);&#xA;&#x9;}">
          <statements xsi:type="dbl:Variable" name="statement" concreteSyntax="Statement statement = statements.get(0) as Statement">
            <classifierType concreteSyntax="Statement">
              <referencedElement href="../../dbl.xmi#//@module/@classifiers.35"/>
            </classifierType>
            <initialValue xsi:type="dbl:Cast" concreteSyntax="statements.get(0) as Statement">
              <classifierType concreteSyntax="Statement">
                <referencedElement href="../../dbl.xmi#//@module/@classifiers.35"/>
              </classifierType>
              <op xsi:type="dbl:IdExpr" concreteSyntax="statements.get(0)">
                <parentIdExpr concreteSyntax="statements" referencedElement="//@module/@extensions.0/@syntaxDefinition/@symbols.0/@possibleSyntax/@sequence.3"/>
                <referencedElement href="../../stdlib.xmi#//@module/@classifiers.5/@methods.5"/>
                <callPart>
                  <callArguments xsi:type="dbl:IntLiteral" concreteSyntax="0"/>
                </callPart>
              </op>
            </initialValue>
          </statements>
          <statements xsi:type="dbl:ExpansionStatement" concreteSyntax="expand prettyPrint(statement)">
            <parts xsi:type="dbl:ExpandVariablePart">
              <expr xsi:type="dbl:IdExpr" concreteSyntax="prettyPrint(statement)" referencedElement="//@module/@functions.1">
                <callPart>
                  <callArguments xsi:type="dbl:IdExpr" concreteSyntax="statement" referencedElement="//@module/@extensionSemantics.0/@statements.1/@body/@statements.0"/>
                </callPart>
              </expr>
            </parts>
          </statements>
        </body>
      </statements>
    </extensionSemantics>
    <functions name="addContextToNavigationExpressions">
      <primitiveType xsi:type="dbl:VoidType"/>
      <statements xsi:type="dbl:Variable" name="rootIdExprs" concreteSyntax="List rootIdExprs = new ArrayList()">
        <classifierType concreteSyntax="List">
          <referencedElement href="../../stdlib.xmi#//@module/@classifiers.5"/>
        </classifierType>
        <initialValue xsi:type="dbl:CreateObject" concreteSyntax="new ArrayList()">
          <classifierType concreteSyntax="ArrayList()">
            <referencedElement href="../../stdlib.xmi#//@module/@classifiers.6"/>
            <callPart/>
          </classifierType>
        </initialValue>
      </statements>
      <statements xsi:type="dbl:FunctionCall" concreteSyntax="collectContainedRootIdExprs(statement, rootIdExprs)">
        <callIdExpr concreteSyntax="collectContainedRootIdExprs(statement, rootIdExprs)" referencedElement="//@module/@functions.2">
          <callPart>
            <callArguments xsi:type="dbl:IdExpr" concreteSyntax="statement" referencedElement="//@module/@functions.0/@parameters.0"/>
            <callArguments xsi:type="dbl:IdExpr" concreteSyntax="rootIdExprs" referencedElement="//@module/@functions.0/@statements.0"/>
          </callPart>
        </callIdExpr>
      </statements>
      <statements xsi:type="dbl:ForStatement" concreteSyntax="for (int i=0; i&lt;rootIdExprs.size(); i=i+1) {&#xA;&#x9;&#x9;IdExpr rootIdExpr = rootIdExprs.get(0) as IdExpr;&#xA;&#x9;&#x9;IdExpr lastParent = getLastParent(rootIdExpr);&#xA;&#x9;&#x9;lastParent.getParentIdExpr() = EcoreUtil.copy(contextPrefix);&#xA;&#x9;}">
        <statements xsi:type="dbl:Variable" name="i" concreteSyntax="int i=0">
          <primitiveType xsi:type="dbl:IntType"/>
          <initialValue xsi:type="dbl:IntLiteral" concreteSyntax="0"/>
        </statements>
        <termination xsi:type="dbl:Less" concreteSyntax="i&lt;rootIdExprs.size()">
          <op1 xsi:type="dbl:IdExpr" concreteSyntax="i" referencedElement="//@module/@functions.0/@statements.2/@statements.0"/>
          <op2 xsi:type="dbl:IdExpr" concreteSyntax="rootIdExprs.size()">
            <parentIdExpr concreteSyntax="rootIdExprs" referencedElement="//@module/@functions.0/@statements.0"/>
            <referencedElement href="../../stdlib.xmi#//@module/@classifiers.5/@methods.4"/>
            <callPart/>
          </op2>
        </termination>
        <increment concreteSyntax="i=i+1">
          <variable concreteSyntax="i">
            <idExpr concreteSyntax="i" referencedElement="//@module/@functions.0/@statements.2/@statements.0"/>
          </variable>
          <value xsi:type="dbl:Plus" concreteSyntax="i+1">
            <op1 xsi:type="dbl:IdExpr" concreteSyntax="i" referencedElement="//@module/@functions.0/@statements.2/@statements.0"/>
            <op2 xsi:type="dbl:IntLiteral" concreteSyntax="1" value="1"/>
          </value>
        </increment>
        <body xsi:type="dbl:LocalScopeStatement" concreteSyntax="{&#xA;&#x9;&#x9;IdExpr rootIdExpr = rootIdExprs.get(0) as IdExpr;&#xA;&#x9;&#x9;IdExpr lastParent = getLastParent(rootIdExpr);&#xA;&#x9;&#x9;lastParent.getParentIdExpr() = EcoreUtil.copy(contextPrefix);&#xA;&#x9;}">
          <statements xsi:type="dbl:Variable" name="rootIdExpr" concreteSyntax="IdExpr rootIdExpr = rootIdExprs.get(0) as IdExpr">
            <classifierType concreteSyntax="IdExpr">
              <referencedElement href="../../dbl.xmi#//@module/@classifiers.104"/>
            </classifierType>
            <initialValue xsi:type="dbl:Cast" concreteSyntax="rootIdExprs.get(0) as IdExpr">
              <classifierType concreteSyntax="IdExpr">
                <referencedElement href="../../dbl.xmi#//@module/@classifiers.104"/>
              </classifierType>
              <op xsi:type="dbl:IdExpr" concreteSyntax="rootIdExprs.get(0)">
                <parentIdExpr concreteSyntax="rootIdExprs" referencedElement="//@module/@functions.0/@statements.0"/>
                <referencedElement href="../../stdlib.xmi#//@module/@classifiers.5/@methods.5"/>
                <callPart>
                  <callArguments xsi:type="dbl:IntLiteral" concreteSyntax="0"/>
                </callPart>
              </op>
            </initialValue>
          </statements>
          <statements xsi:type="dbl:Variable" name="lastParent" concreteSyntax="IdExpr lastParent = getLastParent(rootIdExpr)">
            <classifierType concreteSyntax="IdExpr">
              <referencedElement href="../../dbl.xmi#//@module/@classifiers.104"/>
            </classifierType>
            <initialValue xsi:type="dbl:IdExpr" concreteSyntax="getLastParent(rootIdExpr)" referencedElement="//@module/@functions.3">
              <callPart>
                <callArguments xsi:type="dbl:IdExpr" concreteSyntax="rootIdExpr" referencedElement="//@module/@functions.0/@statements.2/@body/@statements.0"/>
              </callPart>
            </initialValue>
          </statements>
          <statements xsi:type="dbl:Assignment" concreteSyntax="lastParent.getParentIdExpr() = EcoreUtil.copy(contextPrefix)">
            <variable concreteSyntax="lastParent.getParentIdExpr()">
              <idExpr concreteSyntax="lastParent.getParentIdExpr()">
                <parentIdExpr concreteSyntax="lastParent" referencedElement="//@module/@functions.0/@statements.2/@body/@statements.1"/>
                <referencedElement href="../../dbl.xmi#//@module/@classifiers.104/@methods.0"/>
                <callPart/>
              </idExpr>
            </variable>
            <value xsi:type="dbl:IdExpr" concreteSyntax="EcoreUtil.copy(contextPrefix)" referencedElement="//@module/@classifiers.0/@methods.0">
              <parentIdExpr concreteSyntax="EcoreUtil" referencedElement="//@module/@classifiers.0"/>
              <callPart>
                <callArguments xsi:type="dbl:IdExpr" concreteSyntax="contextPrefix" referencedElement="//@module/@functions.0/@parameters.1"/>
              </callPart>
            </value>
          </statements>
        </body>
      </statements>
      <parameters name="statement">
        <classifierType concreteSyntax="Statement">
          <referencedElement href="../../dbl.xmi#//@module/@classifiers.35"/>
        </classifierType>
      </parameters>
      <parameters name="contextPrefix">
        <classifierType concreteSyntax="IdExpr">
          <referencedElement href="../../dbl.xmi#//@module/@classifiers.104"/>
        </classifierType>
      </parameters>
    </functions>
    <functions name="prettyPrint">
      <primitiveType xsi:type="dbl:StringType"/>
      <parameters name="construct">
        <classifierType concreteSyntax="Construct">
          <referencedElement href="../../dbl.xmi#//@module/@classifiers.0"/>
        </classifierType>
      </parameters>
    </functions>
    <functions name="collectContainedRootIdExprs">
      <primitiveType xsi:type="dbl:VoidType"/>
      <statements xsi:type="dbl:IfStatement" concreteSyntax="if (eObject != null) {&#xA;&#x9;&#x9;String eClassName = new String(eObject.eClass().getName());&#xA;&#x9;&#x9;if (eClassName.equals(&quot;IdExpr&quot;)) {&#xA;&#x9;&#x9;&#x9;rootIdExprs.add(eObject);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (eObject.eContents().size() > 0) {&#xA;&#x9;&#x9;&#x9;for (int i=0; i&lt;eObject.eContents().size(); i=i+1) {&#xA;&#x9;&#x9;&#x9;&#x9;collectContainedRootIdExprs(eObject, rootIdExprs);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}">
        <condition xsi:type="dbl:NotEqual" concreteSyntax="eObject != null">
          <op1 xsi:type="dbl:IdExpr" concreteSyntax="eObject" referencedElement="//@module/@functions.2/@parameters.0"/>
          <op2 xsi:type="dbl:NullLiteral" concreteSyntax="null"/>
        </condition>
        <trueCase xsi:type="dbl:LocalScopeStatement" concreteSyntax="{&#xA;&#x9;&#x9;String eClassName = new String(eObject.eClass().getName());&#xA;&#x9;&#x9;if (eClassName.equals(&quot;IdExpr&quot;)) {&#xA;&#x9;&#x9;&#x9;rootIdExprs.add(eObject);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (eObject.eContents().size() > 0) {&#xA;&#x9;&#x9;&#x9;for (int i=0; i&lt;eObject.eContents().size(); i=i+1) {&#xA;&#x9;&#x9;&#x9;&#x9;collectContainedRootIdExprs(eObject, rootIdExprs);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}">
          <statements xsi:type="dbl:Variable" name="eClassName" concreteSyntax="String eClassName = new String(eObject.eClass().getName())">
            <classifierType concreteSyntax="String">
              <referencedElement href="../../stdlib.xmi#//@module/@classifiers.2"/>
            </classifierType>
            <initialValue xsi:type="dbl:CreateObject" concreteSyntax="new String(eObject.eClass().getName())">
              <classifierType concreteSyntax="String(eObject.eClass().getName())">
                <referencedElement href="../../stdlib.xmi#//@module/@classifiers.2"/>
                <callPart>
                  <callArguments xsi:type="dbl:IdExpr" concreteSyntax="eObject.eClass().getName()">
                    <parentIdExpr concreteSyntax="eObject.eClass()">
                      <parentIdExpr concreteSyntax="eObject" referencedElement="//@module/@functions.2/@parameters.0"/>
                      <referencedElement href="../../ecore.xmi#//@module/@classifiers.13/@methods.1"/>
                      <callPart/>
                    </parentIdExpr>
                    <referencedElement href="../../ecore.xmi#//@module/@classifiers.9/@methods.0"/>
                    <callPart/>
                  </callArguments>
                </callPart>
              </classifierType>
            </initialValue>
          </statements>
          <statements xsi:type="dbl:IfStatement" concreteSyntax="if (eClassName.equals(&quot;IdExpr&quot;)) {&#xA;&#x9;&#x9;&#x9;rootIdExprs.add(eObject);&#xA;&#x9;&#x9;}">
            <condition xsi:type="dbl:IdExpr" concreteSyntax="eClassName.equals(&quot;IdExpr&quot;)">
              <parentIdExpr concreteSyntax="eClassName" referencedElement="//@module/@functions.2/@statements.0/@trueCase/@statements.0"/>
              <referencedElement href="../../stdlib.xmi#//@module/@classifiers.1/@methods.0"/>
              <callPart>
                <callArguments xsi:type="dbl:StringLiteral" concreteSyntax="&quot;IdExpr&quot;" value="IdExpr"/>
              </callPart>
            </condition>
            <trueCase xsi:type="dbl:LocalScopeStatement" concreteSyntax="{&#xA;&#x9;&#x9;&#x9;rootIdExprs.add(eObject);&#xA;&#x9;&#x9;}">
              <statements xsi:type="dbl:FunctionCall" concreteSyntax="rootIdExprs.add(eObject)">
                <callIdExpr concreteSyntax="rootIdExprs.add(eObject)">
                  <parentIdExpr concreteSyntax="rootIdExprs" referencedElement="//@module/@functions.2/@parameters.1"/>
                  <referencedElement href="../../stdlib.xmi#//@module/@classifiers.5/@methods.0"/>
                  <callPart>
                    <callArguments xsi:type="dbl:IdExpr" concreteSyntax="eObject" referencedElement="//@module/@functions.2/@parameters.0"/>
                  </callPart>
                </callIdExpr>
              </statements>
            </trueCase>
          </statements>
          <statements xsi:type="dbl:IfStatement" concreteSyntax="if (eObject.eContents().size() > 0) {&#xA;&#x9;&#x9;&#x9;for (int i=0; i&lt;eObject.eContents().size(); i=i+1) {&#xA;&#x9;&#x9;&#x9;&#x9;collectContainedRootIdExprs(eObject, rootIdExprs);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}">
            <condition xsi:type="dbl:Greater" concreteSyntax="eObject.eContents().size() > 0">
              <op1 xsi:type="dbl:IdExpr" concreteSyntax="eObject.eContents().size()">
                <parentIdExpr concreteSyntax="eObject.eContents()">
                  <parentIdExpr concreteSyntax="eObject" referencedElement="//@module/@functions.2/@parameters.0"/>
                  <referencedElement href="../../ecore.xmi#//@module/@classifiers.13/@methods.5"/>
                  <callPart/>
                </parentIdExpr>
                <referencedElement href="../../stdlib.xmi#//@module/@classifiers.5/@methods.4"/>
                <callPart/>
              </op1>
              <op2 xsi:type="dbl:IntLiteral" concreteSyntax="0"/>
            </condition>
            <trueCase xsi:type="dbl:LocalScopeStatement" concreteSyntax="{&#xA;&#x9;&#x9;&#x9;for (int i=0; i&lt;eObject.eContents().size(); i=i+1) {&#xA;&#x9;&#x9;&#x9;&#x9;collectContainedRootIdExprs(eObject, rootIdExprs);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}">
              <statements xsi:type="dbl:ForStatement" concreteSyntax="for (int i=0; i&lt;eObject.eContents().size(); i=i+1) {&#xA;&#x9;&#x9;&#x9;&#x9;collectContainedRootIdExprs(eObject, rootIdExprs);&#xA;&#x9;&#x9;&#x9;}">
                <statements xsi:type="dbl:Variable" name="i" concreteSyntax="int i=0">
                  <primitiveType xsi:type="dbl:IntType"/>
                  <initialValue xsi:type="dbl:IntLiteral" concreteSyntax="0"/>
                </statements>
                <termination xsi:type="dbl:Less" concreteSyntax="i&lt;eObject.eContents().size()">
                  <op1 xsi:type="dbl:IdExpr" concreteSyntax="i" referencedElement="//@module/@functions.2/@statements.0/@trueCase/@statements.2/@trueCase/@statements.0/@statements.0"/>
                  <op2 xsi:type="dbl:IdExpr" concreteSyntax="eObject.eContents().size()">
                    <parentIdExpr concreteSyntax="eObject.eContents()">
                      <parentIdExpr concreteSyntax="eObject" referencedElement="//@module/@functions.2/@parameters.0"/>
                      <referencedElement href="../../ecore.xmi#//@module/@classifiers.13/@methods.5"/>
                      <callPart/>
                    </parentIdExpr>
                    <referencedElement href="../../stdlib.xmi#//@module/@classifiers.5/@methods.4"/>
                    <callPart/>
                  </op2>
                </termination>
                <increment concreteSyntax="i=i+1">
                  <variable concreteSyntax="i">
                    <idExpr concreteSyntax="i" referencedElement="//@module/@functions.2/@statements.0/@trueCase/@statements.2/@trueCase/@statements.0/@statements.0"/>
                  </variable>
                  <value xsi:type="dbl:Plus" concreteSyntax="i+1">
                    <op1 xsi:type="dbl:IdExpr" concreteSyntax="i" referencedElement="//@module/@functions.2/@statements.0/@trueCase/@statements.2/@trueCase/@statements.0/@statements.0"/>
                    <op2 xsi:type="dbl:IntLiteral" concreteSyntax="1" value="1"/>
                  </value>
                </increment>
                <body xsi:type="dbl:LocalScopeStatement" concreteSyntax="{&#xA;&#x9;&#x9;&#x9;&#x9;collectContainedRootIdExprs(eObject, rootIdExprs);&#xA;&#x9;&#x9;&#x9;}">
                  <statements xsi:type="dbl:FunctionCall" concreteSyntax="collectContainedRootIdExprs(eObject, rootIdExprs)">
                    <callIdExpr concreteSyntax="collectContainedRootIdExprs(eObject, rootIdExprs)" referencedElement="//@module/@functions.2">
                      <callPart>
                        <callArguments xsi:type="dbl:IdExpr" concreteSyntax="eObject" referencedElement="//@module/@functions.2/@parameters.0"/>
                        <callArguments xsi:type="dbl:IdExpr" concreteSyntax="rootIdExprs" referencedElement="//@module/@functions.2/@parameters.1"/>
                      </callPart>
                    </callIdExpr>
                  </statements>
                </body>
              </statements>
            </trueCase>
          </statements>
        </trueCase>
      </statements>
      <parameters name="eObject">
        <classifierType concreteSyntax="EObject">
          <referencedElement href="../../ecore.xmi#//@module/@classifiers.13"/>
        </classifierType>
      </parameters>
      <parameters name="rootIdExprs">
        <classifierType concreteSyntax="List">
          <referencedElement href="../../stdlib.xmi#//@module/@classifiers.5"/>
        </classifierType>
      </parameters>
    </functions>
    <functions name="getLastParent">
      <classifierType concreteSyntax="IdExpr">
        <referencedElement href="../../dbl.xmi#//@module/@classifiers.104"/>
      </classifierType>
      <statements xsi:type="dbl:Variable" name="parent" concreteSyntax="IdExpr parent = idExpr.getParentIdExpr()">
        <classifierType concreteSyntax="IdExpr">
          <referencedElement href="../../dbl.xmi#//@module/@classifiers.104"/>
        </classifierType>
        <initialValue xsi:type="dbl:IdExpr" concreteSyntax="idExpr.getParentIdExpr()">
          <parentIdExpr concreteSyntax="idExpr" referencedElement="//@module/@functions.3/@parameters.0"/>
          <referencedElement href="../../dbl.xmi#//@module/@classifiers.104/@methods.0"/>
          <callPart/>
        </initialValue>
      </statements>
      <statements xsi:type="dbl:WhileStatement" concreteSyntax="while (parent != null) {&#xA;&#x9;&#x9;parent = idExpr.getParentIdExpr();&#xA;&#x9;}">
        <condition xsi:type="dbl:NotEqual" concreteSyntax="parent != null">
          <op1 xsi:type="dbl:IdExpr" concreteSyntax="parent" referencedElement="//@module/@functions.3/@statements.0"/>
          <op2 xsi:type="dbl:NullLiteral" concreteSyntax="null"/>
        </condition>
        <body xsi:type="dbl:LocalScopeStatement" concreteSyntax="{&#xA;&#x9;&#x9;parent = idExpr.getParentIdExpr();&#xA;&#x9;}">
          <statements xsi:type="dbl:Assignment" concreteSyntax="parent = idExpr.getParentIdExpr()">
            <variable concreteSyntax="parent">
              <idExpr concreteSyntax="parent" referencedElement="//@module/@functions.3/@statements.0"/>
            </variable>
            <value xsi:type="dbl:IdExpr" concreteSyntax="idExpr.getParentIdExpr()">
              <parentIdExpr concreteSyntax="idExpr" referencedElement="//@module/@functions.3/@parameters.0"/>
              <referencedElement href="../../dbl.xmi#//@module/@classifiers.104/@methods.0"/>
              <callPart/>
            </value>
          </statements>
        </body>
      </statements>
      <statements xsi:type="dbl:Return" concreteSyntax="return parent">
        <value xsi:type="dbl:IdExpr" concreteSyntax="parent" referencedElement="//@module/@functions.3/@statements.0"/>
      </statements>
      <parameters name="idExpr">
        <classifierType concreteSyntax="IdExpr">
          <referencedElement href="../../dbl.xmi#//@module/@classifiers.104"/>
        </classifierType>
      </parameters>
    </functions>
  </module>
</dbl:Model>
