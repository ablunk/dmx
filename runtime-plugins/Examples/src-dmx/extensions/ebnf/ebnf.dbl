#import "../../dbl"

module EbnfExtension;

	/*TsRule getOwnerTsRule(EObject obj) {
		EObject c = obj.eContainer();
		while (c != null) {
			if (c instanceof TsRule) return c as TsRule;
			else c = obj.eContainer();
		}
		return null;
	}*/

	extension ManyExpr extends dbl L1SyntaxExpression {
		start ManyExpr;
		ManyExpr -> L1SyntaxExpression "*";
		ManyExpr -> "(" sequence:SyntaxExpression ")" "*";
	}
	/*
	semantics for ManyExpr {
		// source:
		// Forever -> "forever" "{" (stms:list(Statement))* "}";
		
		// target:
		// Forever -> "forever" "{" Forever_ManyOpt "}";
		// Forever_ManyOpt -> ;
		// Forever_ManyOpt -> stms:list(Statement) Forever_ManyOpt;
		
		TsRule tsRule = getOwnerTsRule(expr);
		string newRuleName = tsRule.name + "_ManyOpt";
		
		expand newRuleName;
		
		// set expand after tsRule;
		expand newRuleName " -> ;";
		expand newRuleName " -> " expr " " newRuleName ";";
	}

	extension AtLeastExpr extends dbl L1RhsExpr {
		start AtLeastExpr;
		AtLeastExpr -> expr:L1RhsExpr "+";
	}

	extension OptionalExpr extends dbl L1RhsExpr {
		start OptionalExpr;
		OptionalExpr -> expr:L1RhsExpr "?";
	}

	extension AlternativeExpr extends dbl L3RhsExpr {
		start AlternativeExpr;
		AlternativeExpr -> left:RhsExpression "|" right:L2RhsExpr;
	}
	
	extension BooleanTest extends dbl SimpleStatement {
		start BTest;
		BTest -> "btest" BOpt ";";
		BOpt -> ;
		BOpt -> b:"on";
	}*/