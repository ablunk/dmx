<?xml version="1.0" encoding="ASCII"?>
<dbl:Model xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dbl="http://www.informatik.hu-berlin.de/sam/dbl">
  <module name="statements">
    <classes name="A"/>
    <classes name="B" superClasses="//@module/@classes.0">
      <attributes name="n">
        <primitiveType xsi:type="dbl:IntType"/>
      </attributes>
    </classes>
    <functions name="f">
      <primitiveType xsi:type="dbl:IntType"/>
      <statements xsi:type="dbl:Print">
        <outputs xsi:type="dbl:StringLiteral" value="text"/>
      </statements>
      <statements xsi:type="dbl:FunctionCall">
        <callIdExpr referencedElement="//@module/@functions.0">
          <callPart/>
        </callIdExpr>
      </statements>
      <statements xsi:type="dbl:Variable" name="i">
        <primitiveType xsi:type="dbl:IntType"/>
      </statements>
      <statements xsi:type="dbl:Assignment">
        <variable>
          <idExpr referencedElement="//@module/@functions.0/@statements.2"/>
        </variable>
        <value xsi:type="dbl:IntLiteral" value="1"/>
      </statements>
      <statements xsi:type="dbl:SwitchStatement">
        <variable>
          <idExpr referencedElement="//@module/@functions.0/@statements.2"/>
        </variable>
        <cases>
          <value xsi:type="dbl:IntLiteral" value="1"/>
          <body xsi:type="dbl:Print">
            <outputs xsi:type="dbl:StringLiteral" value="1"/>
          </body>
        </cases>
        <defaultCase>
          <body xsi:type="dbl:LocalScopeStatement">
            <statements xsi:type="dbl:Print">
              <outputs xsi:type="dbl:StringLiteral" value="default"/>
            </statements>
          </body>
        </defaultCase>
      </statements>
      <statements xsi:type="dbl:WhileStatement">
        <condition xsi:type="dbl:Greater">
          <op1 xsi:type="dbl:IdExpr" referencedElement="//@module/@functions.0/@statements.2"/>
          <op2 xsi:type="dbl:IntLiteral"/>
        </condition>
        <body xsi:type="dbl:LocalScopeStatement">
          <statements xsi:type="dbl:ContinueStatement"/>
        </body>
      </statements>
      <statements xsi:type="dbl:ForStatement">
        <statements xsi:type="dbl:Assignment">
          <variable>
            <idExpr referencedElement="//@module/@functions.0/@statements.2"/>
          </variable>
          <value xsi:type="dbl:IntLiteral"/>
        </statements>
        <termination xsi:type="dbl:Less">
          <op1 xsi:type="dbl:IdExpr" referencedElement="//@module/@functions.0/@statements.2"/>
          <op2 xsi:type="dbl:IntLiteral" value="1"/>
        </termination>
        <increment>
          <variable>
            <idExpr referencedElement="//@module/@functions.0/@statements.2"/>
          </variable>
          <value xsi:type="dbl:Plus">
            <op1 xsi:type="dbl:IdExpr" referencedElement="//@module/@functions.0/@statements.2"/>
            <op2 xsi:type="dbl:IntLiteral" value="1"/>
          </value>
        </increment>
        <body xsi:type="dbl:LocalScopeStatement">
          <statements xsi:type="dbl:BreakStatement"/>
        </body>
      </statements>
      <statements xsi:type="dbl:IfStatement">
        <condition xsi:type="dbl:Greater">
          <op1 xsi:type="dbl:IdExpr" referencedElement="//@module/@functions.0/@statements.2"/>
          <op2 xsi:type="dbl:IntLiteral" value="1"/>
        </condition>
        <trueCase xsi:type="dbl:LocalScopeStatement"/>
        <falseCase xsi:type="dbl:IfStatement">
          <condition xsi:type="dbl:Less">
            <op1 xsi:type="dbl:IdExpr" referencedElement="//@module/@functions.0/@statements.2"/>
            <op2 xsi:type="dbl:IntLiteral" value="1"/>
          </condition>
          <trueCase xsi:type="dbl:LocalScopeStatement"/>
          <falseCase xsi:type="dbl:LocalScopeStatement"/>
        </falseCase>
      </statements>
      <statements xsi:type="dbl:Return">
        <value xsi:type="dbl:IntLiteral" value="1"/>
      </statements>
      <statements xsi:type="dbl:Variable" name="a">
        <classifierType referencedElement="//@module/@classes.0"/>
        <initialValue xsi:type="dbl:CreateObject">
          <classifierType referencedElement="//@module/@classes.1"/>
        </initialValue>
      </statements>
      <statements xsi:type="dbl:Variable" name="b">
        <classifierType referencedElement="//@module/@classes.1"/>
        <initialValue xsi:type="dbl:Cast">
          <classifierType referencedElement="//@module/@classes.1"/>
          <op xsi:type="dbl:IdExpr" referencedElement="//@module/@functions.0/@statements.9"/>
        </initialValue>
      </statements>
      <statements xsi:type="dbl:Print">
        <outputs xsi:type="dbl:IdExpr" referencedElement="//@module/@classes.1/@attributes.0">
          <parentIdExpr referencedElement="//@module/@functions.0/@statements.10"/>
        </outputs>
      </statements>
      <statements xsi:type="dbl:Variable" name="is">
        <primitiveType xsi:type="dbl:IntType"/>
        <typeArrayDimensions/>
        <initialValue xsi:type="dbl:CreateObject">
          <primitiveType xsi:type="dbl:IntType"/>
          <typeArrayDimensions>
            <size xsi:type="dbl:IntLiteral" value="10"/>
          </typeArrayDimensions>
        </initialValue>
      </statements>
      <statements xsi:type="dbl:Assignment">
        <variable>
          <idExpr referencedElement="//@module/@functions.0/@statements.12">
            <arrayIndex xsi:type="dbl:IntLiteral"/>
          </idExpr>
        </variable>
        <value xsi:type="dbl:IntLiteral" value="1"/>
      </statements>
    </functions>
    <functions name="main">
      <primitiveType xsi:type="dbl:VoidType"/>
    </functions>
  </module>
</dbl:Model>
