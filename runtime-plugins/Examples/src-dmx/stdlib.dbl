module stdlib {

class Object {
	bindings {
		"java" -> "java.lang.Object"
	}
	boolean equals(Object other) abstract;
	int hashCode() abstract;
	string toString() abstract;
}

class String extends Object {
	bindings {
		"java" -> "java.lang.String"
	}
	new(string original) {}
}

class Iterator {
	bindings {
		"java" -> "java.util.Iterator"
	}

	boolean hasNext() abstract;
	Object next() abstract;
	void remove() abstract;
}

// List with only read operations
class RList {
	bindings {
		"java" -> "java.util.List"
	}

	boolean add(Object e) abstract;
	boolean add(int index, Object e) abstract;
	boolean contains(Object e) abstract;
	int size() abstract;
	Object get(int index) abstract;
	int indexOf(Object e) abstract;
	boolean isEmpty() abstract;
	Object array[] toArray() abstract;
	Iterator iterator() abstract;
}

class List extends RList {
	bindings {
		"java" -> "java.util.List"
	}

	boolean add(Object e) abstract;
	boolean add(int index, Object e) abstract;
	void clear() abstract;
	boolean contains(Object e) abstract;
	int size() abstract;
	Object get(int index) abstract;
	int indexOf(Object e) abstract;
	boolean isEmpty() abstract;
	//Object remove(int index) abstract; // TODO removed, beacuse method parameters are not considered yet in DblIdentificationScheme
	boolean remove(Object e) abstract;
	Object set(int index, Object e) abstract;
	Object array[] toArray() abstract;
	Iterator iterator() abstract;
}

class ArrayList extends List {
	bindings {
		"java" -> "java.util.ArrayList"
	}
}

class Map {
	bindings {
		"java" -> "java.util.Map"
	}
	
	Object get(Object key) abstract;
	void put(Object key, Object value) abstract;
}

class HashMap extends Map {
	bindings {
		"java" -> "java.util.HashMap"
	}
}

}