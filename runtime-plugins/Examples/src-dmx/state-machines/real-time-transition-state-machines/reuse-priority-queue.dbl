module RealTimeTaskBaseOnlyApplication1 {

	interface Object {}
	
	boolean debug = true;

	void trace(string msg) {
		if (debug) {
			print time + " - " + active + ": " + msg + "\n";
		}
	}
	
	class DblComparable {
		bindings {
			"desmoj" -> "hub.sam.dmx.javasim.generic.DblComparable"
		}
		int dblCompareTo(Object o) {}
	}
	
	class MinHeap {
		bindings {
			"desmoj" -> "hub.sam.dmx.javasim.generic.MinHeap"
		}
		void insert(Object o) {}
		void clear() {}
		Object pick() {}
		int size() {}
	}
	
	class Signal extends DblComparable {
		string name;
		int taskPrio;
	
		int dblCompareTo(Object o) {
			Signal s = o as Signal;
			if (taskPrio > s.taskPrio) {
				return -1;
			}
			elseif (taskPrio < s.taskPrio) {
				return 1;
			}
			else {
				return 0;
			}
		}
	}
	
	void main() {
		MinHeap mh = new MinHeap();
		
		Signal s = new Signal();
		s.name = "C";
		s.taskPrio = 3;
		mh.insert(s);
		
		s = new Signal();
		s.name = "A";
		s.taskPrio = 1;
		mh.insert(s);
		
		s = new Signal();
		s.name = "B";
		s.taskPrio = 2;
		mh.insert(s);
		
		while (mh.size() > 0) {
			Signal topSig = mh.pick() as Signal;
			trace(topSig.name);
		}
	}

}