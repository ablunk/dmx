<?xml version="1.0" encoding="ASCII"?>
<dbl:Model xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dbl="http://www.informatik.hu-berlin.de/sam/dbl">
  <modules name="RealTimeTaskBaseOnlyApplication1">
    <classifiers xsi:type="dbl:Interface" name="Object"/>
    <classifiers xsi:type="dbl:Clazz" name="Comparable">
      <methods name="compareTo">
        <primitiveType xsi:type="dbl:IntType"/>
        <statements xsi:type="dbl:Return">
          <value xsi:type="dbl:IntLiteral"/>
        </statements>
        <parameters name="o">
          <classifierTypeExpr referencedElement="//@modules.0/@classifiers.0"/>
        </parameters>
      </methods>
    </classifiers>
    <classifiers xsi:type="dbl:Clazz" name="Signal" superClass="//@modules.0/@classifiers.1">
      <attributes name="name">
        <primitiveType xsi:type="dbl:StringType"/>
      </attributes>
      <attributes name="taskPrio">
        <primitiveType xsi:type="dbl:IntType"/>
      </attributes>
      <methods name="compareTo">
        <primitiveType xsi:type="dbl:IntType"/>
        <statements xsi:type="dbl:Variable" name="s">
          <classifierTypeExpr referencedElement="//@modules.0/@classifiers.2"/>
          <initialValue xsi:type="dbl:Cast">
            <op xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.2/@methods.0/@parameters.0"/>
            <classifierTypeExpr referencedElement="//@modules.0/@classifiers.2"/>
          </initialValue>
        </statements>
        <statements xsi:type="dbl:IfStatement">
          <condition xsi:type="dbl:Less">
            <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.2/@attributes.1"/>
            <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.2/@attributes.1">
              <parentIdExpr referencedElement="//@modules.0/@classifiers.2/@methods.0/@statements.0"/>
            </op2>
          </condition>
          <ifCaseBlock>
            <statements xsi:type="dbl:Return">
              <value xsi:type="dbl:Neg">
                <op xsi:type="dbl:IntLiteral" value="1"/>
              </value>
            </statements>
          </ifCaseBlock>
          <elifCondition xsi:type="dbl:Greater">
            <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.2/@attributes.1"/>
            <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.2/@attributes.1">
              <parentIdExpr referencedElement="//@modules.0/@classifiers.2/@methods.0/@statements.0"/>
            </op2>
          </elifCondition>
          <elifCaseBlock>
            <statements xsi:type="dbl:Return">
              <value xsi:type="dbl:IntLiteral" value="1"/>
            </statements>
          </elifCaseBlock>
          <elseCaseBlock>
            <statements xsi:type="dbl:Return">
              <value xsi:type="dbl:IntLiteral"/>
            </statements>
          </elseCaseBlock>
        </statements>
        <parameters name="o">
          <classifierTypeExpr referencedElement="//@modules.0/@classifiers.0"/>
        </parameters>
      </methods>
    </classifiers>
    <classifiers xsi:type="dbl:Clazz" name="MinHeap">
      <attributes name="elements" isList="true">
        <listDims>
          <classifierTypeExpr referencedElement="//@modules.0/@classifiers.1"/>
        </listDims>
      </attributes>
      <methods name="add">
        <primitiveType xsi:type="dbl:VoidType"/>
        <statements xsi:type="dbl:AddToSet">
          <object xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.3/@methods.0/@parameters.0"/>
          <set xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.3/@attributes.0"/>
        </statements>
        <statements xsi:type="dbl:Variable" name="lastIndex">
          <primitiveType xsi:type="dbl:IntType"/>
          <initialValue xsi:type="dbl:Minus">
            <op1 xsi:type="dbl:IdExpr">
              <parentIdExpr referencedElement="//@modules.0/@classifiers.3/@attributes.0"/>
              <predefinedId xsi:type="dbl:SizeOfSet"/>
            </op1>
            <op2 xsi:type="dbl:IntLiteral" value="1"/>
          </initialValue>
        </statements>
        <statements xsi:type="dbl:ExpressionStatement">
          <expression xsi:type="dbl:ProcedureCall">
            <procedureAccess xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.3/@methods.2">
              <arguments>
                <arguments xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.3/@methods.0/@statements.1"/>
              </arguments>
            </procedureAccess>
          </expression>
        </statements>
        <parameters name="o">
          <classifierTypeExpr referencedElement="//@modules.0/@classifiers.1"/>
        </parameters>
      </methods>
      <methods name="isLess">
        <primitiveType xsi:type="dbl:BoolType"/>
        <statements xsi:type="dbl:Return">
          <value xsi:type="dbl:Equal">
            <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.1/@methods.0">
              <parentIdExpr referencedElement="//@modules.0/@classifiers.3/@methods.1/@parameters.0"/>
              <arguments>
                <arguments xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.3/@methods.1/@parameters.1"/>
              </arguments>
            </op1>
            <op2 xsi:type="dbl:Neg">
              <op xsi:type="dbl:IntLiteral" value="1"/>
            </op2>
          </value>
        </statements>
        <parameters name="c1">
          <classifierTypeExpr referencedElement="//@modules.0/@classifiers.1"/>
        </parameters>
        <parameters name="c2">
          <classifierTypeExpr referencedElement="//@modules.0/@classifiers.1"/>
        </parameters>
      </methods>
      <methods name="shiftLeft">
        <primitiveType xsi:type="dbl:VoidType"/>
        <statements xsi:type="dbl:Variable" name="currentIndex">
          <primitiveType xsi:type="dbl:IntType"/>
          <initialValue xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.3/@methods.2/@parameters.0"/>
        </statements>
        <statements xsi:type="dbl:WhileStatement">
          <condition xsi:type="dbl:Greater">
            <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.3/@methods.2/@statements.0"/>
            <op2 xsi:type="dbl:IntLiteral"/>
          </condition>
          <whileBlock>
            <statements xsi:type="dbl:Variable" name="parentIndex">
              <primitiveType xsi:type="dbl:IntType"/>
              <initialValue xsi:type="dbl:Div">
                <op1 xsi:type="dbl:Minus">
                  <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.3/@methods.2/@statements.0"/>
                  <op2 xsi:type="dbl:IntLiteral" value="1"/>
                </op1>
                <op2 xsi:type="dbl:IntLiteral" value="2"/>
              </initialValue>
            </statements>
            <statements xsi:type="dbl:IfStatement">
              <condition xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.3/@methods.1">
                <arguments>
                  <arguments xsi:type="dbl:IdExpr">
                    <parentIdExpr referencedElement="//@modules.0/@classifiers.3/@attributes.0"/>
                    <predefinedId xsi:type="dbl:ObjectAt"/>
                    <arguments>
                      <arguments xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.3/@methods.2/@statements.0"/>
                    </arguments>
                  </arguments>
                  <arguments xsi:type="dbl:IdExpr">
                    <parentIdExpr referencedElement="//@modules.0/@classifiers.3/@attributes.0"/>
                    <predefinedId xsi:type="dbl:ObjectAt"/>
                    <arguments>
                      <arguments xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.3/@methods.2/@statements.1/@whileBlock/@statements.0"/>
                    </arguments>
                  </arguments>
                </arguments>
              </condition>
              <ifCaseBlock>
                <statements xsi:type="dbl:Variable" name="tmp">
                  <classifierTypeExpr referencedElement="//@modules.0/@classifiers.1"/>
                  <initialValue xsi:type="dbl:IdExpr">
                    <parentIdExpr referencedElement="//@modules.0/@classifiers.3/@attributes.0"/>
                    <predefinedId xsi:type="dbl:ObjectAt"/>
                    <arguments>
                      <arguments xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.3/@methods.2/@statements.0"/>
                    </arguments>
                  </initialValue>
                </statements>
                <statements xsi:type="dbl:AddToSet">
                  <object xsi:type="dbl:IdExpr">
                    <parentIdExpr referencedElement="//@modules.0/@classifiers.3/@attributes.0"/>
                    <predefinedId xsi:type="dbl:ObjectAt"/>
                    <arguments>
                      <arguments xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.3/@methods.2/@statements.1/@whileBlock/@statements.0"/>
                    </arguments>
                  </object>
                  <set xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.3/@attributes.0"/>
                  <atIndex>
                    <arguments xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.3/@methods.2/@statements.0"/>
                  </atIndex>
                </statements>
                <statements xsi:type="dbl:AddToSet">
                  <object xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.3/@methods.2/@statements.1/@whileBlock/@statements.1/@ifCaseBlock/@statements.0"/>
                  <set xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.3/@attributes.0"/>
                  <atIndex>
                    <arguments xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.3/@methods.2/@statements.1/@whileBlock/@statements.0"/>
                  </atIndex>
                </statements>
                <statements xsi:type="dbl:Assignment">
                  <variable>
                    <idExpr referencedElement="//@modules.0/@classifiers.3/@methods.2/@statements.0"/>
                  </variable>
                  <value xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.3/@methods.2/@statements.1/@whileBlock/@statements.0"/>
                </statements>
              </ifCaseBlock>
              <elseCaseBlock>
                <statements xsi:type="dbl:BreakStatement"/>
              </elseCaseBlock>
            </statements>
          </whileBlock>
        </statements>
        <parameters name="fromIndex">
          <primitiveType xsi:type="dbl:IntType"/>
        </parameters>
      </methods>
      <methods name="shiftRight">
        <primitiveType xsi:type="dbl:VoidType"/>
        <statements xsi:type="dbl:Variable" name="current">
          <primitiveType xsi:type="dbl:IntType"/>
          <initialValue xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.3/@methods.3/@parameters.0"/>
        </statements>
        <statements xsi:type="dbl:Variable" name="lastIndex">
          <primitiveType xsi:type="dbl:IntType"/>
          <initialValue xsi:type="dbl:Minus">
            <op1 xsi:type="dbl:IdExpr">
              <parentIdExpr referencedElement="//@modules.0/@classifiers.3/@attributes.0"/>
              <predefinedId xsi:type="dbl:SizeOfSet"/>
            </op1>
            <op2 xsi:type="dbl:IntLiteral" value="1"/>
          </initialValue>
        </statements>
        <statements xsi:type="dbl:WhileStatement">
          <condition xsi:type="dbl:TrueLiteral"/>
          <whileBlock>
            <statements xsi:type="dbl:Variable" name="min">
              <primitiveType xsi:type="dbl:IntType"/>
              <initialValue xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.3/@methods.3/@parameters.0"/>
            </statements>
            <statements xsi:type="dbl:Variable" name="left">
              <primitiveType xsi:type="dbl:IntType"/>
              <initialValue xsi:type="dbl:Plus">
                <op1 xsi:type="dbl:Mul">
                  <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.3/@methods.3/@statements.2/@whileBlock/@statements.0"/>
                  <op2 xsi:type="dbl:IntLiteral" value="2"/>
                </op1>
                <op2 xsi:type="dbl:IntLiteral" value="1"/>
              </initialValue>
            </statements>
            <statements xsi:type="dbl:Variable" name="right">
              <primitiveType xsi:type="dbl:IntType"/>
              <initialValue xsi:type="dbl:Plus">
                <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.3/@methods.3/@statements.2/@whileBlock/@statements.1"/>
                <op2 xsi:type="dbl:IntLiteral" value="1"/>
              </initialValue>
            </statements>
            <statements xsi:type="dbl:IfStatement">
              <condition xsi:type="dbl:And">
                <op1 xsi:type="dbl:LessEqual">
                  <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.3/@methods.3/@statements.2/@whileBlock/@statements.1"/>
                  <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.3/@methods.3/@statements.1"/>
                </op1>
                <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.3/@methods.1">
                  <arguments>
                    <arguments xsi:type="dbl:IdExpr">
                      <parentIdExpr referencedElement="//@modules.0/@classifiers.3/@attributes.0"/>
                      <predefinedId xsi:type="dbl:ObjectAt"/>
                      <arguments>
                        <arguments xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.3/@methods.3/@statements.2/@whileBlock/@statements.1"/>
                      </arguments>
                    </arguments>
                    <arguments xsi:type="dbl:IdExpr">
                      <parentIdExpr referencedElement="//@modules.0/@classifiers.3/@attributes.0"/>
                      <predefinedId xsi:type="dbl:ObjectAt"/>
                      <arguments>
                        <arguments xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.3/@methods.3/@statements.2/@whileBlock/@statements.0"/>
                      </arguments>
                    </arguments>
                  </arguments>
                </op2>
              </condition>
              <ifCaseBlock>
                <statements xsi:type="dbl:Assignment">
                  <variable>
                    <idExpr referencedElement="//@modules.0/@classifiers.3/@methods.3/@statements.2/@whileBlock/@statements.0"/>
                  </variable>
                  <value xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.3/@methods.3/@statements.2/@whileBlock/@statements.1"/>
                </statements>
              </ifCaseBlock>
            </statements>
            <statements xsi:type="dbl:IfStatement">
              <condition xsi:type="dbl:And">
                <op1 xsi:type="dbl:LessEqual">
                  <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.3/@methods.3/@statements.2/@whileBlock/@statements.2"/>
                  <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.3/@methods.3/@statements.1"/>
                </op1>
                <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.3/@methods.1">
                  <arguments>
                    <arguments xsi:type="dbl:IdExpr">
                      <parentIdExpr referencedElement="//@modules.0/@classifiers.3/@attributes.0"/>
                      <predefinedId xsi:type="dbl:ObjectAt"/>
                      <arguments>
                        <arguments xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.3/@methods.3/@statements.2/@whileBlock/@statements.2"/>
                      </arguments>
                    </arguments>
                    <arguments xsi:type="dbl:IdExpr">
                      <parentIdExpr referencedElement="//@modules.0/@classifiers.3/@attributes.0"/>
                      <predefinedId xsi:type="dbl:ObjectAt"/>
                      <arguments>
                        <arguments xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.3/@methods.3/@statements.2/@whileBlock/@statements.0"/>
                      </arguments>
                    </arguments>
                  </arguments>
                </op2>
              </condition>
              <ifCaseBlock>
                <statements xsi:type="dbl:Assignment">
                  <variable>
                    <idExpr referencedElement="//@modules.0/@classifiers.3/@methods.3/@statements.2/@whileBlock/@statements.0"/>
                  </variable>
                  <value xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.3/@methods.3/@statements.2/@whileBlock/@statements.2"/>
                </statements>
              </ifCaseBlock>
            </statements>
            <statements xsi:type="dbl:IfStatement">
              <condition xsi:type="dbl:Equal">
                <op1 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.3/@methods.3/@statements.2/@whileBlock/@statements.0"/>
                <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.3/@methods.3/@statements.0"/>
              </condition>
              <ifCaseBlock>
                <statements xsi:type="dbl:BreakStatement"/>
              </ifCaseBlock>
            </statements>
            <statements xsi:type="dbl:Variable" name="tmp">
              <classifierTypeExpr referencedElement="//@modules.0/@classifiers.1"/>
              <initialValue xsi:type="dbl:IdExpr">
                <parentIdExpr referencedElement="//@modules.0/@classifiers.3/@attributes.0"/>
                <predefinedId xsi:type="dbl:ObjectAt"/>
                <arguments>
                  <arguments xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.3/@methods.3/@statements.0"/>
                </arguments>
              </initialValue>
            </statements>
            <statements xsi:type="dbl:AddToSet">
              <object xsi:type="dbl:IdExpr">
                <parentIdExpr referencedElement="//@modules.0/@classifiers.3/@attributes.0"/>
                <predefinedId xsi:type="dbl:ObjectAt"/>
                <arguments>
                  <arguments xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.3/@methods.3/@statements.2/@whileBlock/@statements.0"/>
                </arguments>
              </object>
              <set xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.3/@attributes.0"/>
              <atIndex>
                <arguments xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.3/@methods.3/@statements.0"/>
              </atIndex>
            </statements>
            <statements xsi:type="dbl:AddToSet">
              <object xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.3/@methods.3/@statements.2/@whileBlock/@statements.6"/>
              <set xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.3/@attributes.0"/>
              <atIndex>
                <arguments xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.3/@methods.3/@statements.2/@whileBlock/@statements.0"/>
              </atIndex>
            </statements>
            <statements xsi:type="dbl:Assignment">
              <variable>
                <idExpr referencedElement="//@modules.0/@classifiers.3/@methods.3/@statements.0"/>
              </variable>
              <value xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.3/@methods.3/@statements.2/@whileBlock/@statements.0"/>
            </statements>
          </whileBlock>
        </statements>
        <parameters name="fromIndex">
          <primitiveType xsi:type="dbl:IntType"/>
        </parameters>
      </methods>
      <methods name="clear">
        <primitiveType xsi:type="dbl:VoidType"/>
        <statements xsi:type="dbl:EmptySet">
          <set xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.3/@attributes.0"/>
        </statements>
      </methods>
      <methods name="pick">
        <classifierTypeExpr referencedElement="//@modules.0/@classifiers.1"/>
        <statements xsi:type="dbl:Variable" name="f">
          <classifierTypeExpr referencedElement="//@modules.0/@classifiers.1"/>
          <initialValue xsi:type="dbl:IdExpr">
            <parentIdExpr referencedElement="//@modules.0/@classifiers.3/@attributes.0"/>
            <predefinedId xsi:type="dbl:FirstInSet"/>
          </initialValue>
        </statements>
        <statements xsi:type="dbl:Variable" name="l">
          <classifierTypeExpr referencedElement="//@modules.0/@classifiers.1"/>
          <initialValue xsi:type="dbl:IdExpr">
            <parentIdExpr referencedElement="//@modules.0/@classifiers.3/@attributes.0"/>
            <predefinedId xsi:type="dbl:LastInSet"/>
          </initialValue>
        </statements>
        <statements xsi:type="dbl:RemoveFromSet">
          <object xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.3/@methods.5/@statements.1"/>
          <set xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.3/@attributes.0"/>
        </statements>
        <statements xsi:type="dbl:AddToSet">
          <object xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.3/@methods.5/@statements.1"/>
          <set xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.3/@attributes.0"/>
          <atIndex>
            <arguments xsi:type="dbl:IntLiteral"/>
          </atIndex>
        </statements>
        <statements xsi:type="dbl:ExpressionStatement">
          <expression xsi:type="dbl:ProcedureCall">
            <procedureAccess xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.3/@methods.3">
              <arguments>
                <arguments xsi:type="dbl:IntLiteral"/>
              </arguments>
            </procedureAccess>
          </expression>
        </statements>
        <statements xsi:type="dbl:Return">
          <value xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.3/@methods.5/@statements.0"/>
        </statements>
      </methods>
      <methods name="size">
        <primitiveType xsi:type="dbl:IntType"/>
        <statements xsi:type="dbl:Return">
          <value xsi:type="dbl:IdExpr">
            <parentIdExpr referencedElement="//@modules.0/@classifiers.3/@attributes.0"/>
            <predefinedId xsi:type="dbl:SizeOfSet"/>
          </value>
        </statements>
      </methods>
    </classifiers>
    <procedures name="trace">
      <primitiveType xsi:type="dbl:VoidType"/>
      <statements xsi:type="dbl:IfStatement">
        <condition xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@variables.0"/>
        <ifCaseBlock>
          <statements xsi:type="dbl:Print">
            <outputs xsi:type="dbl:Plus">
              <op1 xsi:type="dbl:Plus">
                <op1 xsi:type="dbl:Plus">
                  <op1 xsi:type="dbl:Plus">
                    <op1 xsi:type="dbl:Plus">
                      <op1 xsi:type="dbl:TimeLiteral"/>
                      <op2 xsi:type="dbl:StringLiteral" value=" - "/>
                    </op1>
                    <op2 xsi:type="dbl:ActiveLiteral"/>
                  </op1>
                  <op2 xsi:type="dbl:StringLiteral" value=": "/>
                </op1>
                <op2 xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@procedures.0/@parameters.0"/>
              </op1>
              <op2 xsi:type="dbl:StringLiteral" value="\n"/>
            </outputs>
          </statements>
        </ifCaseBlock>
      </statements>
      <parameters name="msg">
        <primitiveType xsi:type="dbl:StringType"/>
      </parameters>
    </procedures>
    <procedures name="main">
      <primitiveType xsi:type="dbl:VoidType"/>
      <statements xsi:type="dbl:Variable" name="mh">
        <classifierTypeExpr referencedElement="//@modules.0/@classifiers.3"/>
        <initialValue xsi:type="dbl:CreateObject">
          <classifierTypeExpr referencedElement="//@modules.0/@classifiers.3">
            <arguments/>
          </classifierTypeExpr>
        </initialValue>
      </statements>
      <statements xsi:type="dbl:Variable" name="s">
        <classifierTypeExpr referencedElement="//@modules.0/@classifiers.2"/>
        <initialValue xsi:type="dbl:CreateObject">
          <classifierTypeExpr referencedElement="//@modules.0/@classifiers.2">
            <arguments/>
          </classifierTypeExpr>
        </initialValue>
      </statements>
      <statements xsi:type="dbl:Assignment">
        <variable>
          <idExpr referencedElement="//@modules.0/@classifiers.2/@attributes.0">
            <parentIdExpr referencedElement="//@modules.0/@procedures.1/@statements.1"/>
          </idExpr>
        </variable>
        <value xsi:type="dbl:StringLiteral" value="C"/>
      </statements>
      <statements xsi:type="dbl:Assignment">
        <variable>
          <idExpr referencedElement="//@modules.0/@classifiers.2/@attributes.1">
            <parentIdExpr referencedElement="//@modules.0/@procedures.1/@statements.1"/>
          </idExpr>
        </variable>
        <value xsi:type="dbl:IntLiteral" value="3"/>
      </statements>
      <statements xsi:type="dbl:ExpressionStatement">
        <expression xsi:type="dbl:ProcedureCall">
          <procedureAccess xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.3/@methods.0">
            <parentIdExpr referencedElement="//@modules.0/@procedures.1/@statements.0"/>
            <arguments>
              <arguments xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@procedures.1/@statements.1"/>
            </arguments>
          </procedureAccess>
        </expression>
      </statements>
      <statements xsi:type="dbl:Assignment">
        <variable>
          <idExpr referencedElement="//@modules.0/@procedures.1/@statements.1"/>
        </variable>
        <value xsi:type="dbl:CreateObject">
          <classifierTypeExpr referencedElement="//@modules.0/@classifiers.2">
            <arguments/>
          </classifierTypeExpr>
        </value>
      </statements>
      <statements xsi:type="dbl:Assignment">
        <variable>
          <idExpr referencedElement="//@modules.0/@classifiers.2/@attributes.0">
            <parentIdExpr referencedElement="//@modules.0/@procedures.1/@statements.1"/>
          </idExpr>
        </variable>
        <value xsi:type="dbl:StringLiteral" value="A"/>
      </statements>
      <statements xsi:type="dbl:Assignment">
        <variable>
          <idExpr referencedElement="//@modules.0/@classifiers.2/@attributes.1">
            <parentIdExpr referencedElement="//@modules.0/@procedures.1/@statements.1"/>
          </idExpr>
        </variable>
        <value xsi:type="dbl:IntLiteral" value="1"/>
      </statements>
      <statements xsi:type="dbl:ExpressionStatement">
        <expression xsi:type="dbl:ProcedureCall">
          <procedureAccess xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.3/@methods.0">
            <parentIdExpr referencedElement="//@modules.0/@procedures.1/@statements.0"/>
            <arguments>
              <arguments xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@procedures.1/@statements.1"/>
            </arguments>
          </procedureAccess>
        </expression>
      </statements>
      <statements xsi:type="dbl:Assignment">
        <variable>
          <idExpr referencedElement="//@modules.0/@procedures.1/@statements.1"/>
        </variable>
        <value xsi:type="dbl:CreateObject">
          <classifierTypeExpr referencedElement="//@modules.0/@classifiers.2">
            <arguments/>
          </classifierTypeExpr>
        </value>
      </statements>
      <statements xsi:type="dbl:Assignment">
        <variable>
          <idExpr referencedElement="//@modules.0/@classifiers.2/@attributes.0">
            <parentIdExpr referencedElement="//@modules.0/@procedures.1/@statements.1"/>
          </idExpr>
        </variable>
        <value xsi:type="dbl:StringLiteral" value="B"/>
      </statements>
      <statements xsi:type="dbl:Assignment">
        <variable>
          <idExpr referencedElement="//@modules.0/@classifiers.2/@attributes.1">
            <parentIdExpr referencedElement="//@modules.0/@procedures.1/@statements.1"/>
          </idExpr>
        </variable>
        <value xsi:type="dbl:IntLiteral" value="2"/>
      </statements>
      <statements xsi:type="dbl:ExpressionStatement">
        <expression xsi:type="dbl:ProcedureCall">
          <procedureAccess xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.3/@methods.0">
            <parentIdExpr referencedElement="//@modules.0/@procedures.1/@statements.0"/>
            <arguments>
              <arguments xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@procedures.1/@statements.1"/>
            </arguments>
          </procedureAccess>
        </expression>
      </statements>
      <statements xsi:type="dbl:WhileStatement">
        <condition xsi:type="dbl:Greater">
          <op1 xsi:type="dbl:IdExpr">
            <parentIdExpr referencedElement="//@modules.0/@procedures.1/@statements.0"/>
            <predefinedId xsi:type="dbl:SizeOfSet"/>
            <arguments/>
          </op1>
          <op2 xsi:type="dbl:IntLiteral"/>
        </condition>
        <whileBlock>
          <statements xsi:type="dbl:Variable" name="topSig">
            <classifierTypeExpr referencedElement="//@modules.0/@classifiers.2"/>
            <initialValue xsi:type="dbl:Cast">
              <op xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.3/@methods.5">
                <parentIdExpr referencedElement="//@modules.0/@procedures.1/@statements.0"/>
                <arguments/>
              </op>
              <classifierTypeExpr referencedElement="//@modules.0/@classifiers.2"/>
            </initialValue>
          </statements>
          <statements xsi:type="dbl:ExpressionStatement">
            <expression xsi:type="dbl:ProcedureCall">
              <procedureAccess xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@procedures.0">
                <arguments>
                  <arguments xsi:type="dbl:IdExpr" referencedElement="//@modules.0/@classifiers.2/@attributes.0">
                    <parentIdExpr referencedElement="//@modules.0/@procedures.1/@statements.13/@whileBlock/@statements.0"/>
                  </arguments>
                </arguments>
              </procedureAccess>
            </expression>
          </statements>
        </whileBlock>
      </statements>
    </procedures>
    <variables name="debug">
      <primitiveType xsi:type="dbl:BoolType"/>
      <initialValue xsi:type="dbl:TrueLiteral"/>
    </variables>
  </modules>
</dbl:Model>
