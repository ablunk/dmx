#import "../../dbl"

module sml {

extension Signal extends dbl ModuleContentExtension {
	start Signal;
	Signal -> "signal" name:ID ";";
}
semantics {
}

extension SendStatement extends dbl SimpleStatement {
	start SendStatement;
	SendStatement -> "send" signal:Expression "to" target:Expression ";";
}
semantics {
}

extension StateMachine extends dbl ClassContentExtension {
	start StateMachine;
	
	StateMachine -> "stateMachine" name:ID "{" initialState:InitialState StateListOptional "}";
	
	StateListOptional -> ;
	StateListOptional -> states:list(State) StateListOptional;
	
	InitialState -> "initial" EffectsOptional "->" target:$$State ";";
	State -> "state" name:ID TransitionsOptional ";";
	
	TransitionsOptional -> ;
	TransitionsOptional -> "(" OutgoingList ")";
	
	OutgoingList -> outgoing:list(Transition) OutgoingListOptional;
	OutgoingListOptional -> ;
	OutgoingListOptional -> "," OutgoingList;

	Transition -> trigger:Trigger GuardOptional EffectsOptional TargetState;
	
	Trigger -> ;
	Trigger -> signalEvent:$Clazz;
	Trigger -> "after" timeEvent:TimeEvent;
	TimeEvent -> "(" delay:Expression ")"; 
	
	GuardOptional -> ;
	GuardOptional -> "[" condition:Expression "]";
	
	EffectsOptional -> ;
	EffectsOptional -> "/" effect:LocalScopeStatement;
	
	TargetState -> "->" target:$$State;
	TargetState -> "->" "final";
}

}