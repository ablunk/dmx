<?xml version="1.0" encoding="ASCII"?>
<modifications:ModificationsRecord xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:modifications="http://www.informatik.hu-berlin.de/sam/modifications">
  <modifications xsi:type="modifications:Substitution" sourceEObjectUri="//@modules.0/@procedures.1/@statements.2" replacementText="place new Start into c.eventPool;reactivate c;"/>
  <modifications xsi:type="modifications:Substitution" sourceEObjectUri="//@modules.0/@classifiers.4/@extensions.0" replacementText="&#xD;&#xA;&#x9;&#x9;&#x9;list(Object) eventPool;&#xD;&#xA;&#x9;&#x9;&#x9;string currentState;&#xD;&#xA;&#x9;&#x9;&#x9;boolean firstRun = true;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;initial {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;currentState = &quot;StandBy&quot;;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;actions {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;Timer timer;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;while (currentState != null) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (timer != null) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;timer.invalid = true;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;if (currentState == &quot;StandBy&quot;) {}if (currentState == &quot;Active&quot;) {if (count >= limit) {trace(&quot;Finished.&quot;);&#x9;currentState = null;continue;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;timer = new Timer;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;timer.delay = step;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;timer.sm = self;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;activate timer;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (!firstRun) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;empty eventPool;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;wait;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;firstRun = false;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;while (eventPool.size > 0 and currentState != null) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Object ev = eventPool.first;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;remove ev from eventPool;&#xD;&#xA;&#x9;&#x9;if (currentState == &quot;StandBy&quot;) {if (ev instanceof Start) {count=0;&#x9;currentState = &quot;Active&quot;;break;}if (ev instanceof Resume) {&#x9;currentState = &quot;Active&quot;;break;}}if (currentState == &quot;Active&quot;) {if (ev instanceof Timer) {if (count &lt; limit) {count=count+1;trace(&quot;Tick &quot; + count);&#x9;currentState = &quot;Active&quot;;break;}}if (ev instanceof Pause) {&#x9;currentState = &quot;StandBy&quot;;break;}if (ev instanceof Reset) {count=0;&#x9;currentState = &quot;Active&quot;;break;}}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;} // end while (eventPool ...&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} // end while (true ...&#xD;&#xA;&#x9;&#x9;&#x9;} // end actions&#xD;&#xA;&#x9;&#x9;"/>
  <modifications xsi:type="modifications:Addition" sourceEObjectUri="//@modules.0/@classifiers.0" replacementText="&#xD;&#xA;&#x9;&#x9;&#x9;active class Timer {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;Counter sm;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;int delay = 1;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;boolean invalid = false;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;actions {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;advance delay;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (!invalid) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;place self into sm.eventPool;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reactivate sm;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;" addAfterPosition="true"/>
</modifications:ModificationsRecord>
